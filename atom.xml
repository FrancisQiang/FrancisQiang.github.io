<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Francis的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://francisqiang.github.io/"/>
  <updated>2019-07-20T14:59:07.100Z</updated>
  <id>https://francisqiang.github.io/</id>
  
  <author>
    <name>Francis Qiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Servlet规范和Servlet容器</title>
    <link href="https://francisqiang.github.io/2019/07/20/Servlet%E8%A7%84%E8%8C%83%E5%92%8CServlet%E5%AE%B9%E5%99%A8/"/>
    <id>https://francisqiang.github.io/2019/07/20/Servlet规范和Servlet容器/</id>
    <published>2019-07-20T13:21:24.000Z</published>
    <updated>2019-07-20T14:59:07.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet是什么"><a href="#Servlet是什么" class="headerlink" title="Servlet是什么"></a>Servlet是什么</h2><p>  当HTTP服务器在接收到请求就需要调用服务端的应用程序去处理，一般来说，不同请求对应不同Java类。</p><p>  如果我们将处理不同请求去调用不同处理程序的逻辑写在HTTP服务器中，那么HTTP服务器的代码中就会加入许多if else语句，而且这一逻辑就相当于业务逻辑代码和HTTP服务器代码耦合在了一起，当我们新增删除我们的业务方法的时候还需要改动HTTP服务器的代码。</p><p>  但是HTTP服务器就应该独立于业务逻辑，所以Servlet就出现了。首先我们可以把Servlet划分为Servlet容器和Servlet类，简单理解的话Servlet容器就是用来解决HTTP服务器和业务代码之间的耦合问题的，而Servlet类有很多中，它分别对应不同的业务代码。</p><p>  <img src="/2019/07/20/Servlet规范和Servlet容器/1.jpg" alt="Servlet的作用"></p><p>  对于Servlet，它是一个接口，即它是一个规范，它本身独立于HTTP服务器。但是因为我们日常开发中经常在HTTP的环境中，所以Servlet为我们实现了HttpServlet实现类，我们只需要重写doGet和doPost方法就行了。</p><h2 id="浅析Servlet"><a href="#浅析Servlet" class="headerlink" title="浅析Servlet"></a>浅析Servlet</h2><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p>  首先我们来看一下Servlet接口的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化Servlet，Servlet容器在加载该Servlet的时候会调用init方法</span></span><br><span class="line">  <span class="comment">// 我们可以再init方法中初始化一些资源</span></span><br><span class="line">  <span class="comment">// 比如说SpringMVC中的DispacherServlet就是init方法的时候</span></span><br><span class="line">  <span class="comment">// 初始化SpringMVC容器的</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ServletConfig是Servlet的配置类，里面存放着Servlet的一些配置信息</span></span><br><span class="line">  <span class="comment">// 比如我们再web.xml文件中配置的一些init-param</span></span><br><span class="line">  <span class="comment">// 通过这个方法我们可以获取我们的ServletConfig</span></span><br><span class="line">  <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// service是Servlet的核心，具体业务类在这里实现业务逻辑</span></span><br><span class="line">  <span class="comment">// 其中ServletRequest封装了请求信息</span></span><br><span class="line">  <span class="comment">// ServletResponse封装了相应信息</span></span><br><span class="line">  <span class="comment">// 这两个类其实就是对通信协议(格式)的封装</span></span><br><span class="line">  <span class="comment">// 比如HTTP协议封装的HttpServletRequest和HttpServletResponse</span></span><br><span class="line">  <span class="comment">// 我们可以通过HttpServletRequest来获取所有请求信息，比如请求路径</span></span><br><span class="line">  <span class="comment">// HTTP头，Cookie，请求参数等，我们还可以通过它来创建和获取Session</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取Servlet的信息</span></span><br><span class="line">  <span class="function">String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 销毁，我们可以执行一些资源的销毁工作</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><p>  我们来看一下ServletConfig接口的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取Servlet的名字</span></span><br><span class="line">  <span class="function">String <span class="title">getServletName</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取ServletContext</span></span><br><span class="line">  <span class="comment">// 在Servlet中定义了ServletContext接口来对应一个Web应用</span></span><br><span class="line">  <span class="comment">// 在Web应用部署好之后，Servlet容器在启动时会加载Web应用</span></span><br><span class="line">  <span class="comment">// 并为每个Web应用创建一个ServletContext对象</span></span><br><span class="line">  <span class="comment">// ServletContext是一个全局对象，一个Web应用可能会有多个Servlet</span></span><br><span class="line">  <span class="comment">// 这些Servlet通过全局的ServletContext来共享数据</span></span><br><span class="line">  <span class="comment">// 比如说Web应用的初始化参数，Web应用目录下的文件资源等</span></span><br><span class="line">  <span class="comment">// 由于ServletContext持有所有的Servlet实例</span></span><br><span class="line">  <span class="comment">// 所以我们可以通过ServletContext来实现Servlet的请求的转发</span></span><br><span class="line">  <span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取初始化参数，在Servlet在web.xml文件中每个Servlet</span></span><br><span class="line">  <span class="comment">// 可能会自定义一些初始化参数</span></span><br><span class="line">  <span class="function">String <span class="title">getInitParameter</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取初始化参数的名字</span></span><br><span class="line">  <span class="comment">// 上面的方法对应param-value 这里对应param-name</span></span><br><span class="line">  <span class="function">Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>  ServletContext接口源码</p><p>  ServletContext中定义了很多方法，我们可以将它分类几类并且做功能说明</p><ol><li><p>多个Servlet通过ServletContext对象实现数据共享。通过setAttribute等属性设置获取删除方法等</p></li><li><p>实现Servlet的请求转发。 获取分发器getRequestDispatcher方法</p><p>这里就不得不提一下重定向和请求转发的区别了。我们知道ServletContext拥有着所有Servlet实例，所以我们可以通过ServletContext对象来实现服务器内部的请求转发，比如将这个请求交给其他Servlet去处理，这个是服务器的内部行为，所以URL是不变的。还有就是重定向，即两次request请求，所以URL是会变的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getServletConfig().getServletContext().getRequestDispatcher(<span class="string">"xx"</span>).forward(request,response);</span><br></pre></td></tr></table></figure></li><li><p>获取Web应用的初始化参数，或者设置获取全局参数。 例如getInitParameter方法等</p></li><li><p>利用ServletContext对象读取资源文件（比如properties文件）</p></li><li><p>过滤器和监听器</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletContext</span> </span>&#123;</span><br><span class="line">  String TEMPDIR = <span class="string">"javax.servlet.context.tempdir"</span>;</span><br><span class="line">  String ORDERED_LIBS = <span class="string">"javax.servlet.context.orderedLibs"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getContextPath</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">ServletContext <span class="title">getContext</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getMajorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getMinorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getEffectiveMajorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getEffectiveMinorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getMimeType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Set&lt;String&gt; <span class="title">getResourcePaths</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">URL <span class="title">getResource</span><span class="params">(String var1)</span> <span class="keyword">throws</span> MalformedURLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">InputStream <span class="title">getResourceAsStream</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">RequestDispatcher <span class="title">getNamedDispatcher</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function">Servlet <span class="title">getServlet</span><span class="params">(String var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function">Enumeration&lt;Servlet&gt; <span class="title">getServlets</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function">Enumeration&lt;String&gt; <span class="title">getServletNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(Exception var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String var1, Throwable var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getRealPath</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getServerInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getInitParameter</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">setInitParameter</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">getAttribute</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Enumeration&lt;String&gt; <span class="title">getAttributeNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getServletContextName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String var1, Servlet var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String var1, Class&lt;? extends Servlet&gt; var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Dynamic <span class="title">addJspFile</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  &lt;T extends Servlet&gt; <span class="function">T <span class="title">createServlet</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">ServletRegistration <span class="title">getServletRegistration</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  Map&lt;String, ? extends ServletRegistration&gt; getServletRegistrations();</span><br><span class="line"></span><br><span class="line">  javax.servlet.FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  javax.servlet.FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String var1, Filter var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  javax.servlet.FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String var1, Class&lt;? extends Filter&gt; var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  &lt;T extends Filter&gt; <span class="function">T <span class="title">createFilter</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">FilterRegistration <span class="title">getFilterRegistration</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  Map&lt;String, ? extends FilterRegistration&gt; getFilterRegistrations();</span><br><span class="line"></span><br><span class="line">  <span class="function">SessionCookieConfig <span class="title">getSessionCookieConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setSessionTrackingModes</span><span class="params">(Set&lt;SessionTrackingMode&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Set&lt;SessionTrackingMode&gt; <span class="title">getDefaultSessionTrackingModes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Set&lt;SessionTrackingMode&gt; <span class="title">getEffectiveSessionTrackingModes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  &lt;T extends EventListener&gt; <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(T var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(Class&lt;? extends EventListener&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  &lt;T extends EventListener&gt; <span class="function">T <span class="title">createListener</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">JspConfigDescriptor <span class="title">getJspConfigDescriptor</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">declareRoles</span><span class="params">(String... var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getVirtualServerName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getSessionTimeout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setSessionTimeout</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getRequestCharacterEncoding</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setRequestCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getResponseCharacterEncoding</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setResponseCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  <span class="comment">// 定义一个config成员变量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不用管</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">GenericServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不用管</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现一些ServletConfig的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getServletConfig().getInitParameter(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getServletConfig().getInitParameterNames();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 由于init先执行，所以在getServletConfig方法调用之前config已经被赋值</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.config;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 封装getServletContext，是从config中获取的</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getServletConfig().getServletContext();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回为空不用管，就是一些信息</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上面设置了一个成员变量，这里将Tomcat传入的servletConfig赋值给它</span></span><br><span class="line">  <span class="comment">// 将局部变量提高为全局的</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">// 上文中提到的在init中做一些初始化的事情比如Spring</span></span><br><span class="line">    <span class="keyword">this</span>.config = config;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getServletContext().log(<span class="keyword">this</span>.getServletName() + <span class="string">": "</span> + msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getServletContext().log(<span class="keyword">this</span>.getServletName() + <span class="string">": "</span> + message, t);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们发现唯独servic方法为被得到实现，这个需要我们自己去实现</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.config.getServletName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  总结一下GenericServlet的作用</p><ol><li><p>提升servletConfig对象的作用域，方便其他方法使用</p></li><li><p>init方法中还调用了空的init方法，如果我们需要servlet创建后做一些初始化操作，我们可以继承GenericServlet并且重写init无参方法。</p></li><li><p>还是保留了service方法 未实现它。</p></li></ol><h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>  未完待续。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_DELETE = <span class="string">"DELETE"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_HEAD = <span class="string">"HEAD"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_GET = <span class="string">"GET"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_OPTIONS = <span class="string">"OPTIONS"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_POST = <span class="string">"POST"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_PUT = <span class="string">"PUT"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_TRACE = <span class="string">"TRACE"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_IFMODSINCE = <span class="string">"If-Modified-Since"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_LASTMOD = <span class="string">"Last-Modified"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LSTRING_FILE = <span class="string">"javax.servlet.http.LocalStrings"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourceBundle lStrings = ResourceBundle.getBundle(<span class="string">"javax.servlet.http.LocalStrings"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HttpServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String protocol = req.getProtocol();</span><br><span class="line">    String msg = lStrings.getString(<span class="string">"http.method_get_not_supported"</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">      resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1L</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHead</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DispatcherType.INCLUDE.equals(req.getDispatcherType())) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      NoBodyResponse response = <span class="keyword">new</span> NoBodyResponse(resp);</span><br><span class="line">      <span class="keyword">this</span>.doGet(req, response);</span><br><span class="line">      response.setContentLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String protocol = req.getProtocol();</span><br><span class="line">    String msg = lStrings.getString(<span class="string">"http.method_post_not_supported"</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">      resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String protocol = req.getProtocol();</span><br><span class="line">    String msg = lStrings.getString(<span class="string">"http.method_put_not_supported"</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">      resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String protocol = req.getProtocol();</span><br><span class="line">    String msg = lStrings.getString(<span class="string">"http.method_delete_not_supported"</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">      resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method[] getAllDeclaredMethods(Class&lt;?&gt; c) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c.equals(HttpServlet.class)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Method[] parentMethods = getAllDeclaredMethods(c.getSuperclass());</span><br><span class="line">      Method[] thisMethods = c.getDeclaredMethods();</span><br><span class="line">      <span class="keyword">if</span> (parentMethods != <span class="keyword">null</span> &amp;&amp; parentMethods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        Method[] allMethods = <span class="keyword">new</span> Method[parentMethods.length + thisMethods.length];</span><br><span class="line">        System.arraycopy(parentMethods, <span class="number">0</span>, allMethods, <span class="number">0</span>, parentMethods.length);</span><br><span class="line">        System.arraycopy(thisMethods, <span class="number">0</span>, allMethods, parentMethods.length, thisMethods.length);</span><br><span class="line">        thisMethods = allMethods;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> thisMethods;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOptions</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    Method[] methods = getAllDeclaredMethods(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_GET = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_HEAD = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_POST = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_PUT = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_DELETE = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_TRACE = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_OPTIONS = <span class="keyword">true</span>;</span><br><span class="line">    Class clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      clazz = Class.forName(<span class="string">"org.apache.catalina.connector.RequestFacade"</span>);</span><br><span class="line">      Method getAllowTrace = clazz.getMethod(<span class="string">"getAllowTrace"</span>, (Class[])<span class="keyword">null</span>);</span><br><span class="line">      ALLOW_TRACE = (Boolean)getAllowTrace.invoke(req, (Object[])<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | ClassNotFoundException var14) &#123;</span><br><span class="line">      ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; ++i) &#123;</span><br><span class="line">      Method m = methods[i];</span><br><span class="line">      <span class="keyword">if</span> (m.getName().equals(<span class="string">"doGet"</span>)) &#123;</span><br><span class="line">        ALLOW_GET = <span class="keyword">true</span>;</span><br><span class="line">        ALLOW_HEAD = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (m.getName().equals(<span class="string">"doPost"</span>)) &#123;</span><br><span class="line">        ALLOW_POST = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (m.getName().equals(<span class="string">"doPut"</span>)) &#123;</span><br><span class="line">        ALLOW_PUT = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (m.getName().equals(<span class="string">"doDelete"</span>)) &#123;</span><br><span class="line">        ALLOW_DELETE = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String allow = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (ALLOW_GET) &#123;</span><br><span class="line">      allow = <span class="string">"GET"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_HEAD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"HEAD"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", HEAD"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_POST) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"POST"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", POST"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_PUT) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"PUT"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", PUT"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_DELETE) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"DELETE"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", DELETE"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_TRACE) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"TRACE"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", TRACE"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_OPTIONS) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"OPTIONS"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", OPTIONS"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resp.setHeader(<span class="string">"Allow"</span>, allow);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doTrace</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String CRLF = <span class="string">"\r\n"</span>;</span><br><span class="line">    StringBuilder buffer = (<span class="keyword">new</span> StringBuilder(<span class="string">"TRACE "</span>)).append(req.getRequestURI()).append(<span class="string">" "</span>).append(req.getProtocol());</span><br><span class="line">    Enumeration reqHeaderEnum = req.getHeaderNames();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(reqHeaderEnum.hasMoreElements()) &#123;</span><br><span class="line">      String headerName = (String)reqHeaderEnum.nextElement();</span><br><span class="line">      buffer.append(CRLF).append(headerName).append(<span class="string">": "</span>).append(req.getHeader(headerName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buffer.append(CRLF);</span><br><span class="line">    <span class="keyword">int</span> responseLength = buffer.length();</span><br><span class="line">    resp.setContentType(<span class="string">"message/http"</span>);</span><br><span class="line">    resp.setContentLength(responseLength);</span><br><span class="line">    ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">    out.print(buffer.toString());</span><br><span class="line">    out.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String method = req.getMethod();</span><br><span class="line">    <span class="keyword">long</span> lastModified;</span><br><span class="line">    <span class="keyword">if</span> (method.equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">      lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">      <span class="keyword">if</span> (lastModified == -<span class="number">1L</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          ifModifiedSince = req.getDateHeader(<span class="string">"If-Modified-Since"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">          ifModifiedSince = -<span class="number">1L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ifModifiedSince &lt; lastModified / <span class="number">1000L</span> * <span class="number">1000L</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">          <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resp.setStatus(<span class="number">304</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"HEAD"</span>)) &#123;</span><br><span class="line">      lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">      <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">      <span class="keyword">this</span>.doHead(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"PUT"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doPut(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"DELETE"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doDelete(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"OPTIONS"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doOptions(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"TRACE"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doTrace(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">      Object[] errArgs = <span class="keyword">new</span> Object[]&#123;method&#125;;</span><br><span class="line">      errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">      resp.sendError(<span class="number">501</span>, errMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">maybeSetLastModified</span><span class="params">(HttpServletResponse resp, <span class="keyword">long</span> lastModified)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!resp.containsHeader(<span class="string">"Last-Modified"</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (lastModified &gt;= <span class="number">0L</span>) &#123;</span><br><span class="line">        resp.setDateHeader(<span class="string">"Last-Modified"</span>, lastModified);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    HttpServletRequest request;</span><br><span class="line">    HttpServletResponse response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      request = (HttpServletRequest)req;</span><br><span class="line">      response = (HttpServletResponse)res;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException var6) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"non-HTTP request or response"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.service(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Servlet是什么&quot;&gt;&lt;a href=&quot;#Servlet是什么&quot; class=&quot;headerlink&quot; title=&quot;Servlet是什么&quot;&gt;&lt;/a&gt;Servlet是什么&lt;/h2&gt;&lt;p&gt;  当HTTP服务器在接收到请求就需要调用服务端的应用程序去处理，一般来说，
      
    
    </summary>
    
      <category term="Tomcat" scheme="https://francisqiang.github.io/categories/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Web容器和HTTP协议必知必会</title>
    <link href="https://francisqiang.github.io/2019/07/20/Web%E5%AE%B9%E5%99%A8%E5%92%8CHTTP%E5%8D%8F%E8%AE%AE%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <id>https://francisqiang.github.io/2019/07/20/Web容器和HTTP协议必知必会/</id>
    <published>2019-07-20T12:03:44.000Z</published>
    <updated>2019-07-20T12:49:44.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web容器是什么"><a href="#Web容器是什么" class="headerlink" title="Web容器是什么"></a>Web容器是什么</h2><p>  在早期，Web容器是指<strong>HTTP服务器</strong>。因为在那时候浏览器只是用来浏览新闻和文章的，像类似的Apache,Nginx等HTTP服务器就是负责向浏览器返回静态资源如HTML等，然后浏览器在负责解析HTML来展现给用户。</p><p>  后来，人们又要求网页呈现动态化和交互效果，于是伟大的Web开发工程师就想出了一种扩展机制来让HTTP服务器调用服务端程序，Sun公司由此推出了Servlet技术，我们可以简单理解它是运行在服务端的Java小程序，但是Servlet没有main方法,他不能独立运行，必须把它部署到Servlet容器中，由容器来实例化并调用Servlet。</p><p>  而Tomcat和Jetty就是一个Servlet容器，同时它具有HTTP服务器的功能，因此Tomcat或Jetty就是一个HTTP服务器+Servlet容器，我们也叫它 <strong><em>Web容器</em></strong>。</p><p>  而类似的，JBoss，WebLogic，他们不仅仅有Servlet容器的功能，同时也包含EJB容器，是完整的JavaEE应用服务器。</p><p>  而对于倾向于轻量化的今天，尤其是微服务大行其道的今天，Tomcat和Jetty的轻量化更加吸引了人们的使用，在SpringBoot中Tomcat就作为嵌入应用的默认Web容器。</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>  学过网络的都知道OSI七层模型，而HTTP是在应用层的协议，HTTP是基于传输层TCP/IP协议来传输数据(HTML,图片，查询结果等)的。<em>HTTP不涉及数据包的传输，主要规定了传输数据的格式即客户端和服务端的通信格式</em>。</p><p>  假设这时候一个浏览器要从远程HTTP服务器获取HTML文本，这个过程中，实际要做两件事情。</p><ol><li><p>与服务器建立socket连接</p></li><li><p>生成请求数据并通过socket发送出去</p><p>其中这个请求数据就必须遵循某种特定的数据格式，这种数据格式其实就是HTTP协议的本质。</p></li></ol><h3 id="HTTP请求格式"><a href="#HTTP请求格式" class="headerlink" title="HTTP请求格式"></a>HTTP请求格式</h3><p>  请求行，请求报头，请求正文</p><p>  <img src="/2019/07/20/Web容器和HTTP协议必知必会/1.jpg" alt="请求格式"></p><h3 id="HTTP相应格式"><a href="#HTTP相应格式" class="headerlink" title="HTTP相应格式"></a>HTTP相应格式</h3><p>  状态行，响应报头，报文主体</p><p>  <img src="/2019/07/20/Web容器和HTTP协议必知必会/2.jpg" alt="相应格式"></p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>  存储在用户本地的文件，里面包含了每次请求需要传递的消息，每次HTTP请求报文中都包含有Cookie。</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>  因为Cookie的明文传输的问题，Session出现了。Session可以理解为服务器开辟的存储空间，里面保存了用户的状态信息。</p><p>  那么Session在何时何地创建呢？当然还是在服务器端程序运行的过程中创建的，不同语言实现的应用程序有不同的创建Session的方法。在Java中，是Web应用程序在调用HttpServletRequest的getSession方法时，由Web容器（比如Tomcat）创建的。</p><p>  同时，Session有过期时间，因此Tomcat会开启后台线程定期的轮询，如果Session过期了就将Session失效。</p><p>  Session怎么和请求对应起来的呢？</p><p>  Cookie， 浏览器在Cookie中填充了一个SessionID字段用来表示请求</p><p>  工作流程:</p><p>  创建Session同时生成唯一ID，当浏览器再次发送请求的时候会将SessionID带上，服务器通过SessionID来寻找对应的Session，然后对其进行操作，具体内容只会保存在服务器中，客户端只会存SessionID，这样来说相对安全，但不是绝对安全。但是当访问量变多时候服务器不可能能承受那么多Session，这时候服务器要做集群，但是集群中还要解决Session共享的问题，所以一般会引入中间件Redis来存储Session。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Web容器是什么&quot;&gt;&lt;a href=&quot;#Web容器是什么&quot; class=&quot;headerlink&quot; title=&quot;Web容器是什么&quot;&gt;&lt;/a&gt;Web容器是什么&lt;/h2&gt;&lt;p&gt;  在早期，Web容器是指&lt;strong&gt;HTTP服务器&lt;/strong&gt;。因为在那时候浏览
      
    
    </summary>
    
      <category term="Tomcat" scheme="https://francisqiang.github.io/categories/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——visitor模式</title>
    <link href="https://francisqiang.github.io/2019/07/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94visitor%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/07/19/设计模式——visitor模式/</id>
    <published>2019-07-19T09:36:59.000Z</published>
    <updated>2019-07-19T11:01:56.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是visitor模式"><a href="#什么是visitor模式" class="headerlink" title="什么是visitor模式"></a>什么是visitor模式</h2><p>  访问者模式，《JAVA与模式》这本书中提到的一句: <strong><em>访问者模式是对象的行为模式。访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这些操作的数据结构则可以保持不变。</em></strong></p><p>  我们先来理解一下这句话的意思，目的是封装对于数据结构元素的操作。首先，提出三个问题，这句话的封装是什么意思？这句话指的数据结构是什么？对于数据结构的操作又是什么？</p><p>  有些官方语句之所以难理解就是因为它太抽象了，能使它容易理解那么就必须先化抽象为具体，然后再从具体去看抽象。</p><p>  在visitor模式中运用到了一个最核心的理念就是<strong>双分派</strong>，何为双分派呢？既然是双，那么必定存在两个角色，这两个角色是什么呢？在访问者模式里面肯定是访问者和被访问者。</p><p>  我们再来看看上面那句话，刚刚还有两个疑问分别是这句话的数据结构是什么？这句话的操作又是什么？其实我们可以直接理解为数据结构就是被访问者，操作就是访问者，封装就是通过双分派机制来使操作去拥有数据结构并且能对数据结构进行改变，而数据结构(元素)同时也接受一个操作对象(访问者)，当操作改变的时候，我们再利用面向抽象编程就可以轻松地分离出操作而不改变数据结构了。</p><h2 id="visitor模式UML图"><a href="#visitor模式UML图" class="headerlink" title="visitor模式UML图"></a>visitor模式UML图</h2><p>  <img src="/2019/07/19/设计模式——visitor模式/1.jpg" alt="UML"></p><p>  Visitor: 抽象访问者，为具体访问者声明一个visit方法，注意的是这里的visit方法数量是根据访问者类型多少而决定的。</p><p>  ConcreteVisitor: 具体访问者，实现了visit方法，是对于访问者操作的具体实现</p><p>  Element: 被访问的数据结构的抽象类，定义了一个accept方法用来接受一个访问者对象。</p><p>  ConcreteElement: 被访问者的数据结构的具体实现类，实现accept方法。accept方法接受一个访问者，让后这里面会调用访问者的具体visit方法，然后再将自己作为对象传入这个访问者的具体visit方法中，在这个visit方法中就会调用一些对于对象进行操作的方法。</p><p>  ObjectStructure: 这个类其实对于整个设计模式中关联性不是很强，可以忽略，它的作用就是将上述的Element放入一个集合中，可能我们会对这个集合进行遍历然后再进行操作等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是visitor模式&quot;&gt;&lt;a href=&quot;#什么是visitor模式&quot; class=&quot;headerlink&quot; title=&quot;什么是visitor模式&quot;&gt;&lt;/a&gt;什么是visitor模式&lt;/h2&gt;&lt;p&gt;  访问者模式，《JAVA与模式》这本书中提到的一句: &lt;s
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——Decoration模式</title>
    <link href="https://francisqiang.github.io/2019/07/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94Decoration%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/07/18/设计模式——Decoration模式/</id>
    <published>2019-07-18T15:13:42.000Z</published>
    <updated>2019-07-18T15:39:37.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是装饰模式"><a href="#什么是装饰模式" class="headerlink" title="什么是装饰模式"></a>什么是装饰模式</h2><p>  参考自<a href="https://www.zhihu.com/question/32007641/answer/687582571" target="_blank" rel="noopener">java中什么是装饰者模式?</a></p><p>  看了老半天Decoration模式还是没看懂，后面看具体实现再去看UML图的时候突然恍然大悟。</p><p>  首先，我们要先确定这个设计模式中有什么角色，有什么作用。</p><p>  第一当然需要被装饰的类了，比如说有一个Component抽象类，然后又有一个ConcreateComponent实现类，这个具体的Component类就是具体我们需要装饰的类。</p><p>  既然是装饰模式，当然需要装饰的类了，和其他设计模式一样，我们面向抽象编程，首先这个装饰的类我们先定义一个抽象的类AbstractDecoration，它继承了Component抽象类，这时候它就可以去重写Component类中需要被包装增强的方法了，并且它还拥有一个Component字段，我们只需要将Component(需要被包装的类)放入它的构造方法中，然后这个包装类重写被包装类的某个需要被包装的方法。</p><p>  之后我们可以新增一些具体实现的包装类，比如MusicDecoration类，我们需要在包装方法前调用听音乐，我们这个MusicDecoration就可以新增一个listenMusic方法，并且在重写方法前添上这个方法的调用在调用字段的需要被包装方法前。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写打电话的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在打电话之前听音乐</span></span><br><span class="line">    listenMusic();</span><br><span class="line">    <span class="comment">// 因为super.call就是调用当前字段的call方法</span></span><br><span class="line">    <span class="keyword">super</span>.call();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  当我们需要在包装方法后面添加一个吃饭的方法，我们可以新增一个具体实现类EatDecoration类并且重写call方法。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 重写打电话的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 因为super.call就是调用当前字段的call方法</span></span><br><span class="line">    <span class="keyword">super</span>.call();</span><br><span class="line">    <span class="comment">// 在调用完call之后新添加一个eat</span></span><br><span class="line">    eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这时候我们就可以这样创建一个对象，并且调用。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Phone phone = <span class="keyword">new</span> EatDecoration(<span class="keyword">new</span> MusicDecoration(<span class="keyword">new</span> ConcreateComponent()));</span><br><span class="line">phone.call();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是装饰模式&quot;&gt;&lt;a href=&quot;#什么是装饰模式&quot; class=&quot;headerlink&quot; title=&quot;什么是装饰模式&quot;&gt;&lt;/a&gt;什么是装饰模式&lt;/h2&gt;&lt;p&gt;  参考自&lt;a href=&quot;https://www.zhihu.com/question/32007
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Java设计模式——Builder模式</title>
    <link href="https://francisqiang.github.io/2019/07/17/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94Builder%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/07/17/Java设计模式——Builder模式/</id>
    <published>2019-07-17T14:43:09.000Z</published>
    <updated>2019-07-17T15:17:10.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Builder模式"><a href="#什么是Builder模式" class="headerlink" title="什么是Builder模式"></a>什么是Builder模式</h2><p>  今天看了Builder设计模式，发现Builder模式和模板方法模式都差不多，不同的是——模板方法模式中对于方法的调用顺序是在原本抽象父类里面定义的，而建造者模式是在另一个Director类中定义的。</p><p>  <img src="/2019/07/17/Java设计模式——Builder模式/1.jpg" alt="UML类图"></p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>Builder类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String str)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类主要是定义一些抽象方法提供一些子类Builder去实现。</p><p>比如这里的TextBuilder和AnotherBuilder等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        buffer.append(<span class="string">"======\n"</span>);</span><br><span class="line">        buffer.append(<span class="string">"["</span> + title + <span class="string">"]\n"</span>);</span><br><span class="line">        buffer.append(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        buffer.append(<span class="string">".."</span> + str + <span class="string">"..\n"</span>);</span><br><span class="line">        buffer.append(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i++)&#123;</span><br><span class="line">            buffer.append(<span class="string">"----"</span> + items[i] + <span class="string">"----\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.append(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        buffer.append(<span class="string">"================\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        buffer.append(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n"</span>);</span><br><span class="line">        buffer.append(<span class="string">"&#123;"</span> + title + <span class="string">"&#125;\n"</span>);</span><br><span class="line">        buffer.append(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        buffer.append(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i++)&#123;</span><br><span class="line">            buffer.append(<span class="string">"+++++"</span> + items[i] + <span class="string">"++++\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.append(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        buffer.append(<span class="string">"0000000000000\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面两个子类分别不同实现了Builder抽象类，这时候我们创建一个Director类去拥有一个Builder实例，并且在Director中创建一个方法去控制Builder中实现的一些方法的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.makeTitle(<span class="string">"Title"</span>);</span><br><span class="line">        builder.makeString(<span class="string">"String"</span>);</span><br><span class="line">        builder.makeItems(<span class="keyword">new</span> String[]&#123;</span><br><span class="line">            <span class="string">"xxx"</span>,</span><br><span class="line">            <span class="string">"xxxx"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        builder.makeString(<span class="string">"endString"</span>);</span><br><span class="line">            builder.makeItems(<span class="keyword">new</span> String[]&#123;</span><br><span class="line">            <span class="string">"endxxx"</span>,</span><br><span class="line">            <span class="string">"endxxx"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        builder.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  所谓建造者模式，就是变相的模板方法模式。其中我们的Builder是一个抽象类，其中定义了建造者的一些建造方法，这些方法都是一些细节的，比如说建造一个大楼，首先打地基可能就是Builder中需要定义实现的一个方法。然后一些实体类去实现这个抽象方法。之后我们定义了一个Director类，这个类拥有了一个Builder字段，然后有一个方法中调用了这个builder实体字段的某些建造方法比如打地基什么的，这个调用建造方法的方法可能还调用了其他建造方法，总之这个方法作为一个集大成者，将一些细节拼装起来，最后可能就建造了一座雄伟的大厦。</p><p>  当我们需要构造一个非常复杂的对象的时候，我们可以使用Builder模式，我们可以将它拆解成一些细小的东西最后拼装起来，这有点像Flutter中的组件开发。</p><p>  Builder模式和模板方法模式，我认为Builder模式更加松耦合。在模板方法模式中，定义方法的顺序或者执行的一些细节是在被实现的抽象父类中的，这个方法里面可能调用了许多抽象方法(当然不只是抽象，主要就是后面会被实现的)，模板方法模式在Servlet中的doGet，doPost中运用到了。而Builder模式是开辟了一个新的类，这个类拥有这个需要被实现方法的类，并且在新类中的方法中调用了需要被实现方法的类的方法。可以说，这里正好阐释了has有时候往往由于is。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Builder模式&quot;&gt;&lt;a href=&quot;#什么是Builder模式&quot; class=&quot;headerlink&quot; title=&quot;什么是Builder模式&quot;&gt;&lt;/a&gt;什么是Builder模式&lt;/h2&gt;&lt;p&gt;  今天看了Builder设计模式，发现Builder模式和
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Java是解释执行吗</title>
    <link href="https://francisqiang.github.io/2019/07/15/Java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%90%97/"/>
    <id>https://francisqiang.github.io/2019/07/15/Java是解释执行吗/</id>
    <published>2019-07-15T12:45:04.000Z</published>
    <updated>2019-07-15T13:24:15.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h2><p>  所谓解释型语言就是解释器对代码进行逐条解释，解释成本地机器代码然后直接运行</p><h2 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h2><p>  所谓编译型语言就是在程序运行之前，将代码提前编译成本地机器代码。</p><h2 id="JIT编译技术"><a href="#JIT编译技术" class="headerlink" title="JIT编译技术"></a>JIT编译技术</h2><p>  以前不是很懂JIT和解释型语言的区别，一直以为JIT就是解释型语言。其实JIT是在程序运行时将代码逐条编译成本地机器代码，看似和解释型语言的定义没啥区别，但是JIT最重要的是加了个缓存。根据程序的局部性原理，代码会被多次循环调用，JIT所做的就是将逐条解释编译成的机器代码存入缓存中，当再次对相同语句进行编译的时候直接从缓存中调用。因为局部性原理，所以性能不会有什么损失。</p><h2 id="Java是解释执行吗"><a href="#Java是解释执行吗" class="headerlink" title="Java是解释执行吗"></a>Java是解释执行吗</h2><p>  以前一直以为Java是编译型语言，因为从.java文件到.class文件需要一个编译的过程。</p><p>  看了许多回答，其实大家对解释型语言和编译型语言都有着不同的见解。我觉得对于语言类型的定义并不重要，了解语言的本质才是精髓。</p><p>  上文提到编译型语言，当编译型语言的程序生成了目标文件，这个目标文件是本地机器能直接运行的文件，它是针对cpu而言的，因为硬件本身的差异，编译型语言的程序当需要在另外一种cpu上面运行的时候，这个程序必须要重新编译。</p><p>  这里我就直接定义为编译型语言就是在运行之前将程序直接编译成本机机器码的语言，如C，C++等。</p><p>  而对于py，java这些语言来说，可能也存在着一些编译的过程，就比如说Java中需要先将.java文件编译成.class文件，而对于本地机器，它是无法运行.class文件的，所以我们称之为解释语言。对于.java到.class的编译，它的目的就是将代码编译成统一平台(JVM)上能看得懂的代码，它是一种中间代码，不是本地机器代码，之所以java代码能Write once, run anywhere就是因为JVM这个中间层的存在，因为jvm屏蔽了操作系统和硬件的细节，它会将.class文件转换为本地机器可以执行的本地代码。</p><p>  我们通常会把Java分为编译期和运行时，上述就是编译期。而运行时的时候，JVM会通过类加载器(Class-Loader)加载字节码，解释或者编译执行。</p><p>  注意这里是解释或者编译执行，在主流Java版本Java8中它就是解释和编译混合的一种模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;解释型语言&quot;&gt;&lt;a href=&quot;#解释型语言&quot; class=&quot;headerlink&quot; title=&quot;解释型语言&quot;&gt;&lt;/a&gt;解释型语言&lt;/h2&gt;&lt;p&gt;  所谓解释型语言就是解释器对代码进行逐条解释，解释成本地机器代码然后直接运行&lt;/p&gt;
&lt;h2 id=&quot;编译型语言&quot;
      
    
    </summary>
    
      <category term="Java SE" scheme="https://francisqiang.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter实例——搜索条的实现</title>
    <link href="https://francisqiang.github.io/2019/06/27/Flutter%E5%AE%9E%E4%BE%8B%E2%80%94%E2%80%94%E6%90%9C%E7%B4%A2%E6%9D%A1%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://francisqiang.github.io/2019/06/27/Flutter实例——搜索条的实现/</id>
    <published>2019-06-27T02:55:51.000Z</published>
    <updated>2019-06-27T07:08:33.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SearchDelegate"><a href="#SearchDelegate" class="headerlink" title="SearchDelegate"></a>SearchDelegate</h2><p>  在Flutter中实现搜索框可以使用SearchDelegate来实现，我们需要将自己要实现搜索框的类继承于它，并且实现相关的方法。</p><ul><li><h3 id="buildSuggestions"><a href="#buildSuggestions" class="headerlink" title="buildSuggestions"></a>buildSuggestions</h3><p>这个方法监听这query，query是用户键入的内容，这个方法一般返回一个ListView，然后将建议的列表放置其中，当列表中某一项被点击的时候应该通过回调showResults方法来显示结果。</p></li><li><h3 id="buildResults"><a href="#buildResults" class="headerlink" title="buildResults"></a>buildResults</h3><p>用来构建搜索结果被提交后的显示结果</p></li><li><h3 id="buildLeading"><a href="#buildLeading" class="headerlink" title="buildLeading"></a>buildLeading</h3><p>查询条的左边头放置的部件，通常返回一个返回按钮并且触发close事件</p></li><li><h3 id="buildActions"><a href="#buildActions" class="headerlink" title="buildActions"></a>buildActions</h3><p>查询条右边放置的组件，返回一个widget数组，通常里面存放着清除按钮，搜索按钮等</p></li></ul><h2 id="SearchDelegate源码及详解"><a href="#SearchDelegate源码及详解" class="headerlink" title="SearchDelegate源码及详解"></a>SearchDelegate源码及详解</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchDelegate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建议显示在搜索页的正文中，而用户在搜索字段中键入一个查询。每当[Query]的内容发生变化时，都会调用委托方法。建议应该基于当前[Query]字符串。如果查询String为空，则根据PASS查询或当前上下文显示建议的查询是很好的做法。通常，此方法将返回一个[listview]，其中包含每个建议中的一个列表。当[listtile.ontab]被调用时，[query]应该用相应的建议来更新，结果页面应该通过调用[showResults]来显示。</span></span><br><span class="line"></span><br><span class="line">  Widget buildSuggestions(BuildContext context);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户从搜索页面提交搜索后显示的结果。可使用[Query]的当前值来确定用户搜索的内容。此方法可多次应用于同一查询。如果您的[构建结果]方法在计算上开销很大，您可能希望缓存一个或多个查询的搜索结果。通常，此方法返回带有搜索结果的[listview]。当用户点击特定的搜索结果时，[close]应该被调用，并将选定的结果作为参数。这将关闭搜索页面并将结果传回[SHOWSEARCH]的初始调用方。</span></span><br><span class="line">  Widget buildResults(BuildContext context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在[appbar]中当前查询之前显示的一个小部件。通常是一个配置了一个[backtton图标]的[偶像按钮]，该按钮退出带有[Close]的搜索。还可以使用由[过渡动画]驱动的[动画图标]，当搜索覆盖逐渐消失时，[动画图标]从汉堡包菜单到Back按钮。如果不显示小部件，则返回NULL。</span></span><br><span class="line">  Widget buildLeading(BuildContext context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在[appbar]中的搜索查询之后显示的小部件。如果[查询]不是空的，这通常应该包含到清除查询的按钮，并再次显示建议(通过[显示建议])</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; buildActions(BuildContext context);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于设置主题 默认为白色主题</span></span><br><span class="line">  ThemeData appBarTheme(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(context != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">final</span> ThemeData theme = Theme.of(context);</span><br><span class="line">    <span class="keyword">assert</span>(theme != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> theme.copyWith(</span><br><span class="line">      primaryColor: Colors.white,</span><br><span class="line">      primaryIconTheme: theme.primaryIconTheme.copyWith(color: Colors.grey),</span><br><span class="line">      primaryColorBrightness: Brightness.light,</span><br><span class="line">      primaryTextTheme: theme.textTheme,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示在[appbar]中的当前查询字符串。用户通过键盘操作此字符串。如果用户点击[buildSuggestions]提供的建议，则应通过setter将该string更新为该建议。</span></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> query =&gt; _queryTextController.text;</span><br><span class="line">  <span class="keyword">set</span> query(<span class="built_in">String</span> value) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(query != <span class="keyword">null</span>);</span><br><span class="line">    _queryTextController.text = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从[BuildSuggestions]返回的建议转换到[BuildResults]返回的[查询]结果如果用户点击[BuildSuggestions]提供的建议，屏幕应典型地过渡到显示所建议查询的搜索结果的页面。同样的，使用[showSuggestions]可再次显示搜索建议。</span></span><br><span class="line">  <span class="keyword">void</span> showResults(BuildContext context) &#123;</span><br><span class="line">    _focusNode.unfocus();</span><br><span class="line">    _currentBody = _SearchBody.results;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从显示[buildResults]返回的结果到显示/显示[BuildSuggestions]返回的建议。调用此方法还会将输入焦点放回[appbar]的搜索字段中。如果目前显示了结果，则可以使用此方法返回以显示搜索建议。</span></span><br><span class="line">  <span class="keyword">void</span> showSuggestions(BuildContext context) &#123;</span><br><span class="line">    FocusScope.of(context).requestFocus(_focusNode);</span><br><span class="line">    _currentBody = _SearchBody.suggestions;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭搜索页面并返回到底层路由。Result为为底层路由返回的值</span></span><br><span class="line">  <span class="keyword">void</span> close(BuildContext context, T result) &#123;</span><br><span class="line">    _currentBody = <span class="keyword">null</span>;</span><br><span class="line">    _focusNode.unfocus();</span><br><span class="line">    Navigator.of(context)</span><br><span class="line">      ..popUntil((Route&lt;<span class="keyword">dynamic</span>&gt; route) =&gt; route == _route)</span><br><span class="line">      ..pop(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// [animation]在搜索页面淡入或淡出时触发。此动画通常用于为[buildleading]或[buildactions]返回的[iconbutton]s设置动画。它还可以用于设置搜索页面下方路线中包含的[iconbutton]的动画。</span></span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; <span class="keyword">get</span> transitionAnimation =&gt; _proxyAnimation;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否选中</span></span><br><span class="line">  <span class="keyword">final</span> FocusNode _focusNode = FocusNode();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输入框的控制器</span></span><br><span class="line">  <span class="keyword">final</span> TextEditingController _queryTextController = TextEditingController();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置过度动画</span></span><br><span class="line">  <span class="keyword">final</span> ProxyAnimation _proxyAnimation = ProxyAnimation(kAlwaysDismissedAnimation);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> ValueNotifier&lt;_SearchBody&gt; _currentBodyNotifier = ValueNotifier&lt;_SearchBody&gt;(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">  _SearchBody <span class="keyword">get</span> _currentBody =&gt; _currentBodyNotifier.value;</span><br><span class="line">  <span class="keyword">set</span> _currentBody(_SearchBody value) &#123;</span><br><span class="line">    _currentBodyNotifier.value = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _SearchPageRoute&lt;T&gt; _route;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'search bar'</span>,</span><br><span class="line">      theme: ThemeData(primarySwatch: Colors.cyan),</span><br><span class="line">      home: SearchBarDemo(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchBarDemo</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SearchBarDemoState createState() =&gt; _SearchBarDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SearchBarDemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SearchBarDemo</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        centerTitle: <span class="keyword">true</span>,</span><br><span class="line">        title: Text(<span class="string">'search bar demo'</span>),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          IconButton(</span><br><span class="line">            icon: Icon(Icons.search),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              showSearch(context: context, delegate: SearchBarDelegate());</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchBarDelegate</span> <span class="keyword">extends</span> <span class="title">SearchDelegate</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; buildActions(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      IconButton(</span><br><span class="line">        icon: Icon(Icons.clear),</span><br><span class="line">        onPressed: () =&gt; query = <span class="string">''</span>,</span><br><span class="line">      )</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildLeading(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> IconButton(</span><br><span class="line">      icon: AnimatedIcon(</span><br><span class="line">        icon: AnimatedIcons.menu_arrow,</span><br><span class="line">        progress: transitionAnimation,</span><br><span class="line">      ),</span><br><span class="line">      onPressed: () =&gt; close(context, <span class="keyword">null</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildResults(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        width: <span class="number">100.0</span>,</span><br><span class="line">        height: <span class="number">100.0</span>,</span><br><span class="line">        child: Card(</span><br><span class="line">          elevation: <span class="number">50.0</span>,</span><br><span class="line">          color: Colors.green,</span><br><span class="line">          child: Text(</span><br><span class="line">            <span class="string">'<span class="subst">$query<span class="string">',</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            style: TextStyle(color: Colors.red),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">          ),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        ),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      ),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    );</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  @override</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  Widget buildSuggestions(BuildContext context) &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    final suggestionList = query.isEmpty</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        ? recentSuggest</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        : searchList.where((input) =&gt; input.startsWith(query)).toList();</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    return ListView.builder(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        itemCount: suggestionList.length,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        itemBuilder: (context, index) =&gt; ListTile(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">              onTap: () &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                showResults(context);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">              &#125;,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">              title: RichText(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                  text: TextSpan(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                      text: suggestionList[index].substring(0, query.length),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                      style: TextStyle(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                          color: Colors.black, fontWeight: FontWeight.bold),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                      children: [</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                    TextSpan(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        text: suggestionList[index].substring(query.length),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        style: TextStyle(color: Colors.grey))</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                  ])),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            ));</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">const searchList = [</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "jiejie-大长腿",</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "jiejie-水蛇腰",</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "gege1-帅气欧巴",</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "gege2-小鲜肉"</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">];</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">const recentSuggest = [</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "推荐-1",</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "推荐-2"</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">];</span></span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SearchDelegate&quot;&gt;&lt;a href=&quot;#SearchDelegate&quot; class=&quot;headerlink&quot; title=&quot;SearchDelegate&quot;&gt;&lt;/a&gt;SearchDelegate&lt;/h2&gt;&lt;p&gt;  在Flutter中实现搜索框可以使用Se
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter中的动画(一)</title>
    <link href="https://francisqiang.github.io/2019/06/24/Flutter%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB-%E4%B8%80/"/>
    <id>https://francisqiang.github.io/2019/06/24/Flutter中的动画-一/</id>
    <published>2019-06-24T15:19:39.000Z</published>
    <updated>2019-06-24T16:37:25.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画概述"><a href="#动画概述" class="headerlink" title="动画概述"></a>动画概述</h2><p>  对于任何UI框架，实现动画的原理都是一样的，通过画面在短时间内的变化形成动画，基本上人眼对30帧以上的动画的感受就是极限了，即在30帧以上人眼是基本区别不了的，在Flutter中，动画的平均帧率是可以达到60FPS的，这和原生基本持平，也是Flutter的一个特点。</p><h2 id="主要涉及到的类"><a href="#主要涉及到的类" class="headerlink" title="主要涉及到的类"></a>主要涉及到的类</h2><p>  在Flutter中，实现动画主要涉及到四个类，分别是Animation,Curved,Tween,Controller。</p><p>  其中Animation类是用来保存动画的插值和状态的</p><p>  Curved是用来实现动态的变化方式，比如说一般变化是线性的，你可以通过设置不同Curved来实现不同的函数变化方式。</p><p>  Tween，在默认情况下，AnimationController对象的值范围是在0.0到1.0之间，我们可以通过设置Tween来设置动画的值的变化范围以达到我们想要的效果。</p><p>  Controller，用来控制动画的控制器。</p><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><p>  Animation对象本身和UI渲染没有关系，它是用来保存动画插值和状态的对象，我们可以查看Animation源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animation</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Listenable</span> <span class="keyword">implements</span> <span class="title">ValueListenable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Animation();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> addListener(VoidCallback listener);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> removeListener(VoidCallback listener);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> addStatusListener(AnimationStatusListener listener);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> removeStatusListener(AnimationStatusListener listener);</span><br><span class="line"></span><br><span class="line">  AnimationStatus <span class="keyword">get</span> status;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  T <span class="keyword">get</span> value;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isDismissed =&gt; status == AnimationStatus.dismissed;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isCompleted =&gt; status == AnimationStatus.completed;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@optionalTypeArgs</span></span><br><span class="line">  Animation&lt;U&gt; drive&lt;U&gt;(Animatable&lt;U&gt; child) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(<span class="keyword">this</span> <span class="keyword">is</span> Animation&lt;<span class="built_in">double</span>&gt;);</span><br><span class="line">    <span class="keyword">return</span> child.animate(<span class="keyword">this</span> <span class="keyword">as</span> <span class="keyword">dynamic</span>); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'<span class="subst">$&#123;describeIdentity(<span class="keyword">this</span>)&#125;</span>(<span class="subst">$&#123;toStringDetails()&#125;</span>)'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">String</span> toStringDetails() &#123;</span><br><span class="line">    <span class="keyword">assert</span>(status != <span class="keyword">null</span>);</span><br><span class="line">    <span class="built_in">String</span> icon;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.forward:</span><br><span class="line">        icon = <span class="string">'\u25B6'</span>; <span class="comment">// &gt;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.reverse:</span><br><span class="line">        icon = <span class="string">'\u25C0'</span>; <span class="comment">// &lt;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.completed:</span><br><span class="line">        icon = <span class="string">'\u23ED'</span>; <span class="comment">// &gt;&gt;|</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.dismissed:</span><br><span class="line">        icon = <span class="string">'\u23EE'</span>; <span class="comment">// |&lt;&lt;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">assert</span>(icon != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'<span class="subst">$icon<span class="string">';</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br></pre></td></tr></table></figure><p>  Animation对象是一个在一段时间内一次生成一个区间(Tween)之间值的类，这种输出可以是线性的，曲线的(我们可以通过Curved来设置)，这个类中还为我们定义了一些监听器和状态监听器，我们可以通过设置监听器来监听动画发生的一些变化，然后做出一些改变。</p><ol><li>addListener()可以给Animation添加帧监听器，在每一帧都会被调用。帧监听器中最常见的行为是改变状态后调用setState()来触发UI重建。</li><li>addStatusListener()可以给Animation添加“动画状态改变”监听器；动画开始、结束、正向或反向（见AnimationStatus定义）时会调用StatusListener。</li></ol><h2 id="Tween"><a href="#Tween" class="headerlink" title="Tween"></a>Tween</h2><p>  刚刚提到了Animation是用来生成在Tween之间的值的对象。</p><p>  我们先来查看一下源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tween</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">dynamic</span>&gt; <span class="keyword">extends</span> <span class="title">Animatable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tween的构造函数，接受一个开始的泛型和结束的泛型</span></span><br><span class="line">  <span class="comment">// 正如我们先前提到的Tween是一个范围</span></span><br><span class="line">  <span class="comment">// 这里的范围可以是数值也可以使某种对象例如Color等</span></span><br><span class="line">  Tween(&#123; <span class="keyword">this</span>.begin, <span class="keyword">this</span>.end &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 泛型的开始</span></span><br><span class="line">  T begin;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 泛型的结束</span></span><br><span class="line">  T end;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们需要传入一个进度百分比</span></span><br><span class="line">  <span class="comment">// 这个函数就能直接返还给我们当前进度的插值</span></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  T lerp(<span class="built_in">double</span> t) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(begin != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">assert</span>(end != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> begin + (end - begin) * t;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 该transform封装了lerp函数</span></span><br><span class="line">  <span class="comment">// 就是传入的值为0直接返回begin，为1返回end，如果不是那就返回lerp函数返回的值</span></span><br><span class="line">  <span class="comment">// 所以要实现自定义lerp，我们需要重写lerp函数而不是transform</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  T transform(<span class="built_in">double</span> t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0.0</span>)</span><br><span class="line">      <span class="keyword">return</span> begin;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">1.0</span>)</span><br><span class="line">      <span class="keyword">return</span> end;</span><br><span class="line">    <span class="keyword">return</span> lerp(t);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() =&gt; <span class="string">'<span class="subst">$runtimeType</span>(<span class="subst">$begin</span> \u2192 <span class="subst">$end</span>)'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  因为Tween继承Animatable这个抽象类，这个抽象类中有一个方法animate方法，它用来返回一个Animation对象，所以对于Tween类我们通常设置完begin和end之后会调用原本继承于Animatable抽象类的animate方法设置一个Animation对象并赋值给一个Animation对象。</p><h2 id="Curve"><a href="#Curve" class="headerlink" title="Curve"></a>Curve</h2><p>  Curve这个类是用来设置动画的变化曲线的，默认情况下是线性变化的。</p><p>  我们一般使用CurveAnimation这个对象来自定义设置动画曲线，我们可以查看一下它的源码。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurvedAnimation</span> <span class="keyword">extends</span> <span class="title">Animation</span>&lt;<span class="title">double</span>&gt; <span class="title">with</span> <span class="title">AnimationWithParentMixin</span>&lt;<span class="title">double</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  CurvedAnimation(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.parent,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.curve,</span><br><span class="line">    <span class="keyword">this</span>.reverseCurve,</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(parent != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(curve != <span class="keyword">null</span>) &#123;</span><br><span class="line">    _updateCurveDirection(parent.status);</span><br><span class="line">    parent.addStatusListener(_updateCurveDirection);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来设置父控制器，这里一般传入AnimationController</span></span><br><span class="line">  <span class="comment">// 用来将自己的curve添加到这个控制器中去。</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">final</span> Animation&lt;<span class="built_in">double</span>&gt; parent;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置自己的curve</span></span><br><span class="line">  Curve curve;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来设置动画的反转时的曲线，不设置就和原来相等，</span></span><br><span class="line">  <span class="comment">// 为了保持动画在结束和反转开始的时候动画的连续性</span></span><br><span class="line">  <span class="comment">// flutter会为我们将反转曲线的值和结束设置在同一点。</span></span><br><span class="line">  Curve reverseCurve;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来设置曲线的方向</span></span><br><span class="line">  <span class="comment">// 只有动画结束或者开始的时候我们才能设置</span></span><br><span class="line">  <span class="comment">// 以免造成动画的不连续性</span></span><br><span class="line">  AnimationStatus _curveDirection;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新curveDirection</span></span><br><span class="line">  <span class="keyword">void</span> _updateCurveDirection(AnimationStatus status) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.dismissed:</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.completed:</span><br><span class="line">        _curveDirection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.forward:</span><br><span class="line">        _curveDirection ??= AnimationStatus.forward;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.reverse:</span><br><span class="line">        _curveDirection ??= AnimationStatus.reverse;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> _useForwardCurve &#123;</span><br><span class="line">    <span class="keyword">return</span> reverseCurve == <span class="keyword">null</span> || (_curveDirection ?? parent.status) != AnimationStatus.reverse;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">double</span> <span class="keyword">get</span> value &#123;</span><br><span class="line">    <span class="keyword">final</span> Curve activeCurve = _useForwardCurve ? curve : reverseCurve;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> t = parent.value;</span><br><span class="line">    <span class="keyword">if</span> (activeCurve == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0.0</span> || t == <span class="number">1.0</span>) &#123;</span><br><span class="line">      <span class="keyword">assert</span>(() &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">double</span> transformedValue = activeCurve.transform(t);</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">double</span> roundedTransformedValue = transformedValue.round().toDouble();</span><br><span class="line">        <span class="keyword">if</span> (roundedTransformedValue != t) &#123;</span><br><span class="line">          <span class="keyword">throw</span> FlutterError(</span><br><span class="line">            <span class="string">'Invalid curve endpoint at <span class="subst">$t</span>.\n'</span></span><br><span class="line">            <span class="string">'Curves must map 0.0 to near zero and 1.0 to near one but '</span></span><br><span class="line">            <span class="string">'<span class="subst">$&#123;activeCurve.runtimeType&#125;</span> mapped <span class="subst">$t</span> to <span class="subst">$transformedValue</span>, which '</span></span><br><span class="line">            <span class="string">'is near <span class="subst">$roundedTransformedValue</span>.'</span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;());</span><br><span class="line">      <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> activeCurve.transform(t);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (reverseCurve == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'<span class="subst">$parent</span>\u27A9<span class="subst">$curve<span class="string">';</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    if (_useForwardCurve)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      return '</span></span><span class="subst">$parent</span>\u27A9<span class="subst">$curve</span>\u2092\u2099/<span class="subst">$reverseCurve<span class="string">';</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    return '</span></span><span class="subst">$parent</span>\u27A9<span class="subst">$curve</span>/<span class="subst">$reverseCurve</span>\u2092\u2099'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  对于CurveAnimation我们可以直接使用构造方法来指定父controller和想要实现的curve</p><h2 id="AnimationController"><a href="#AnimationController" class="headerlink" title="AnimationController"></a>AnimationController</h2><p>  用来实现动画的控制器，它包含动画的启动forward()、停止stop() 、反向播放 reverse()等方法。AnimationController会在动画的每一帧，就会生成一个新的值。默认情况下，AnimationController在给定的时间段内线性的生成从0.0到1.0（默认区间）的数字。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">AnimationController(&#123;</span><br><span class="line">  <span class="built_in">double</span> value,</span><br><span class="line">  <span class="comment">// 接受一个Duration对象，可以设置持续时间</span></span><br><span class="line">  <span class="keyword">this</span>.duration,</span><br><span class="line">  <span class="keyword">this</span>.debugLabel,</span><br><span class="line">  <span class="comment">// 设置动画值最低</span></span><br><span class="line">  <span class="keyword">this</span>.lowerBound = <span class="number">0.0</span>,</span><br><span class="line">  <span class="comment">// 设置最高</span></span><br><span class="line">  <span class="keyword">this</span>.upperBound = <span class="number">1.0</span>,</span><br><span class="line">  <span class="keyword">this</span>.animationBehavior = AnimationBehavior.normal,</span><br><span class="line">  <span class="meta">@required</span> TickerProvider vsync,</span><br><span class="line">&#125;) : <span class="keyword">assert</span>(lowerBound != <span class="keyword">null</span>),</span><br><span class="line">     <span class="keyword">assert</span>(upperBound != <span class="keyword">null</span>),</span><br><span class="line">     <span class="keyword">assert</span>(upperBound &gt;= lowerBound),</span><br><span class="line">     <span class="keyword">assert</span>(vsync != <span class="keyword">null</span>),</span><br><span class="line">     _direction = _AnimationDirection.forward &#123;</span><br><span class="line">  _ticker = vsync.createTicker(_tick);</span><br><span class="line">  _internalSetValue(value ?? lowerBound);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ticker"><a href="#Ticker" class="headerlink" title="Ticker"></a>Ticker</h2><p>  当创建一个AnimationController时，需要传递一个vsync参数，它接收一个TickerProvider类型的对象，它的主要职责是创建Ticker，定义如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TickerProvider</span> </span>&#123;</span><br><span class="line">  <span class="comment">//通过一个回调创建一个Ticker</span></span><br><span class="line">  Ticker createTicker(TickerCallback onTick);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  Flutter应用在启动时都会绑定一个SchedulerBinding，通过SchedulerBinding可以给每一次屏幕刷新添加回调，而Ticker就是通过SchedulerBinding来添加屏幕刷新回调，这样一来，每次屏幕刷新都会调用TickerCallback。使用Ticker(而不是Timer)来驱动动画会防止屏幕外动画（动画的UI不在当前屏幕时，如锁屏时）消耗不必要的资源，因为Flutter中屏幕刷新时会通知到绑定的SchedulerBinding，而Ticker是受SchedulerBinding驱动的，由于锁屏后屏幕会停止刷新，所以Ticker就不会再触发。</p><p>  通过将SingleTickerProviderStateMixin添加到State的定义中，然后将State对象作为vsync的值，这在后面的例子中可以见到。</p><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><p>  这里我们实现一个Icon通过动画的值来变化大小和颜色的动画</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimateLove</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimateLoveState createState() =&gt; _AnimateLoveState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimateLoveState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimateLove</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来保存动画的插值</span></span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _animation;</span><br><span class="line">  <span class="comment">// 动画的控制器</span></span><br><span class="line">  AnimationController _animationController;</span><br><span class="line">  <span class="comment">// 动画实现曲线效果</span></span><br><span class="line">  CurvedAnimation _curvedAnimation;</span><br><span class="line">  <span class="comment">// 用来保存动画的值(这里则是Color)</span></span><br><span class="line">  Animation&lt;Color&gt; _colorTween;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 首先初始化动画控制器</span></span><br><span class="line">    <span class="comment">// 这个类需要with一个TickerProviderStateMixin</span></span><br><span class="line">    <span class="comment">// 这个类提供一个this实现动画的垂直同步</span></span><br><span class="line">    _animationController = AnimationController(</span><br><span class="line">      <span class="comment">// 接受一个Duration，可以设置动画的持续时间</span></span><br><span class="line">      duration: <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      <span class="comment">// 设置垂直同步</span></span><br><span class="line">      vsync: <span class="keyword">this</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 初始化一个动画曲线</span></span><br><span class="line">    <span class="comment">// 接受一个parent参数，这个是指定需要实现这个curve曲线的相应的动画控制器</span></span><br><span class="line">    <span class="comment">// 接受的curve参数是具体实现了什么curve</span></span><br><span class="line">    _curvedAnimation = CurvedAnimation(parent: _animationController, curve: Curves.fastLinearToSlowEaseIn);</span><br><span class="line">    <span class="comment">// Tween用来设置动画的插值</span></span><br><span class="line">    <span class="comment">// 并且使用animate方法(参数是用来接受这个范围值的父Animation，通常为CurveAnimation)用来将范围值保存到一个Animation对象中</span></span><br><span class="line">    _colorTween = ColorTween(begin: Colors.red[<span class="number">200</span>], end: Colors.red[<span class="number">800</span>]).animate(_curvedAnimation);</span><br><span class="line">    <span class="comment">// 这里也是设置一个动画保存值，这里是double</span></span><br><span class="line">    _animation = Tween(begin: <span class="number">0.0</span>, end: <span class="number">100.0</span>).animate(_curvedAnimation)</span><br><span class="line">    <span class="comment">// 添加监听器，变化的时候重新设置UI渲染</span></span><br><span class="line">    ..addListener(()&#123;</span><br><span class="line">      setState(() &#123;&#125;);</span><br><span class="line">    <span class="comment">// 增加状态监听器，这里接受一个带status状态参数的一个方法</span></span><br><span class="line">    &#125;)..addStatusListener((status)&#123;</span><br><span class="line">      <span class="comment">// 这里实现的主要功能就是判断动画是否结束，结束就方向播放动画</span></span><br><span class="line">      <span class="keyword">if</span>(status == AnimationStatus.completed) &#123;</span><br><span class="line">        _animationController.reverse();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == AnimationStatus.dismissed) &#123;</span><br><span class="line">        _animationController.forward();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化设置动画向前开始</span></span><br><span class="line">    _animationController.forward();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">// 销毁 减少资源浪费</span></span><br><span class="line">    _animationController.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Icon(</span><br><span class="line">        Icons.favorite,</span><br><span class="line">        <span class="comment">// 将数值赋给size</span></span><br><span class="line">        size: _animation.value,</span><br><span class="line">        <span class="comment">// 将color赋值给color</span></span><br><span class="line">        color: _colorTween.value,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;动画概述&quot;&gt;&lt;a href=&quot;#动画概述&quot; class=&quot;headerlink&quot; title=&quot;动画概述&quot;&gt;&lt;/a&gt;动画概述&lt;/h2&gt;&lt;p&gt;  对于任何UI框架，实现动画的原理都是一样的，通过画面在短时间内的变化形成动画，基本上人眼对30帧以上的动画的感受就是极限
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——表单组件</title>
    <link href="https://francisqiang.github.io/2019/06/19/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/"/>
    <id>https://francisqiang.github.io/2019/06/19/Flutter组件——表单组件/</id>
    <published>2019-06-19T13:14:52.000Z</published>
    <updated>2019-06-19T13:37:19.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h2><p>  在Flutter中TextField是最重要的一个表单组件，它是定义输入框，密码框以及textarea。</p><p>  其中有几个重要的属性</p><ul><li><p>maxLines</p><p>最大行数接受一个int，当这个设置为1时，就是我们平常的文本框了，你可以把它设置成更大，然后让它变成一个textarea。</p></li><li><p>onChanged</p><p>接受一个函数，函数中传入一个当前文本框值的参数，通过这个我们可以在文本框值改变的时候设置我们的值。</p></li><li><p>decoration</p><p>设置文本框的样式，接受一个InputDecoration对象，这个对象中的属性用来设置当前文本框的样式属性，比如说hintText类似于html的placeholder，labelText设置标签的文本，labelStyle设置标签文本文字样式(跟TextStyle用法一样), border设置文本框边框，我们可以传入一个OutlineInputBorder等。</p></li><li><p>obscureText</p><p>是否设置为密码框，默认为false，设置为true的时候就是密码框。</p></li><li><p>controller</p><p>接受一个TextEditController，我们可以在组件初始化的时候创建一个关于当前文本框的TextEditController，然后我们通过addListener函数来监听当前文本框的变化，它的作用比onChanged还要大。</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TextField(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.controller,</span><br><span class="line">    <span class="keyword">this</span>.focusNode,</span><br><span class="line">    <span class="keyword">this</span>.decoration = <span class="keyword">const</span> InputDecoration(),</span><br><span class="line">    TextInputType keyboardType,</span><br><span class="line">    <span class="keyword">this</span>.textInputAction,</span><br><span class="line">    <span class="keyword">this</span>.textCapitalization = TextCapitalization.none,</span><br><span class="line">    <span class="keyword">this</span>.style,</span><br><span class="line">    <span class="keyword">this</span>.strutStyle,</span><br><span class="line">    <span class="keyword">this</span>.textAlign = TextAlign.start,</span><br><span class="line">    <span class="keyword">this</span>.textDirection,</span><br><span class="line">    <span class="keyword">this</span>.autofocus = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.obscureText = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.autocorrect = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.maxLines = <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">this</span>.minLines,</span><br><span class="line">    <span class="keyword">this</span>.expands = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.maxLength,</span><br><span class="line">    <span class="keyword">this</span>.maxLengthEnforced = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.onChanged,</span><br><span class="line">    <span class="keyword">this</span>.onEditingComplete,</span><br><span class="line">    <span class="keyword">this</span>.onSubmitted,</span><br><span class="line">    <span class="keyword">this</span>.inputFormatters,</span><br><span class="line">    <span class="keyword">this</span>.enabled,</span><br><span class="line">    <span class="keyword">this</span>.cursorWidth = <span class="number">2.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.cursorRadius,</span><br><span class="line">    <span class="keyword">this</span>.cursorColor,</span><br><span class="line">    <span class="keyword">this</span>.keyboardAppearance,</span><br><span class="line">    <span class="keyword">this</span>.scrollPadding = <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">    <span class="keyword">this</span>.dragStartBehavior = DragStartBehavior.start,</span><br><span class="line">    <span class="keyword">this</span>.enableInteractiveSelection,</span><br><span class="line">    <span class="keyword">this</span>.onTap,</span><br><span class="line">    <span class="keyword">this</span>.buildCounter,</span><br><span class="line">    <span class="keyword">this</span>.scrollPhysics,</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(textAlign != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(autofocus != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(obscureText != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(autocorrect != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(maxLengthEnforced != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(scrollPadding != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(dragStartBehavior != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(maxLines == <span class="keyword">null</span> || maxLines &gt; <span class="number">0</span>),</span><br><span class="line">       <span class="keyword">assert</span>(minLines == <span class="keyword">null</span> || minLines &gt; <span class="number">0</span>),</span><br><span class="line">       <span class="keyword">assert</span>(</span><br><span class="line">         (maxLines == <span class="keyword">null</span>) || (minLines == <span class="keyword">null</span>) || (maxLines &gt;= minLines),</span><br><span class="line">         <span class="string">'minLines can\'t be greater than maxLines'</span>,</span><br><span class="line">       ),</span><br><span class="line">       <span class="keyword">assert</span>(expands != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(</span><br><span class="line">         !expands || (maxLines == <span class="keyword">null</span> &amp;&amp; minLines == <span class="keyword">null</span>),</span><br><span class="line">         <span class="string">'minLines and maxLines must be null when expands is true.'</span>,</span><br><span class="line">       ),</span><br><span class="line">       <span class="keyword">assert</span>(maxLength == <span class="keyword">null</span> || maxLength == TextField.noMaxLength || maxLength &gt; <span class="number">0</span>),</span><br><span class="line">       keyboardType = keyboardType ?? (maxLines == <span class="number">1</span> ? TextInputType.text : TextInputType.multiline),</span><br><span class="line">       <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><h2 id="Checkbox-CheckboxListTile多选框组件"><a href="#Checkbox-CheckboxListTile多选框组件" class="headerlink" title="Checkbox,CheckboxListTile多选框组件"></a>Checkbox,CheckboxListTile多选框组件</h2><h3 id="Checkbox常见属性"><a href="#Checkbox常见属性" class="headerlink" title="Checkbox常见属性"></a>Checkbox常见属性</h3><ul><li><p>value</p><p>当前多选框的值，设置成true或者false。</p></li><li><p>onChanged</p><p>在多选框的值被改变的时候调用的函数</p></li><li><p>activeColor</p><p>选中的背景颜色</p></li><li><p>checkColor</p><p>选中的√的颜色</p></li></ul><h3 id="CheckboxListTile"><a href="#CheckboxListTile" class="headerlink" title="CheckboxListTile"></a>CheckboxListTile</h3><p>  checkboxListTile是类似于ListTile的多选框，其中也可以像ListTile中定义title，subtitle等。</p><ul><li><p>value</p><p>当前多选框的值，设置成true或者false</p></li><li><p>onChanged</p><p>改变的时候接受的函数</p></li><li><p>title， subtitle</p><p>标题</p></li><li><p>secondary</p><p>在前面设置图片或者图片</p></li><li><p>selected</p><p>选中的时候是否文字颜色跟着改变</p></li></ul><h2 id="Radio，RadioListTile"><a href="#Radio，RadioListTile" class="headerlink" title="Radio，RadioListTile"></a>Radio，RadioListTile</h2><p>  Radio和checkbox差不多，主要就是一个groupValue。</p><p>  radio中有一个value是定义当前单选按钮的value，还有一个是groupValue是定义当前单选按钮对应的组的值。其他属性和checkbox差不多，同理RadioListTile也和checkboxListTile也差不多。</p><h2 id="Demo代码示例"><a href="#Demo代码示例" class="headerlink" title="Demo代码示例"></a>Demo代码示例</h2><p><img src="/2019/06/19/Flutter组件——表单组件/1.jpg" alt="demo样式"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Form App'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      theme: ThemeData(primarySwatch: Colors.green),</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        resizeToAvoidBottomPadding: <span class="keyword">false</span>,</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'Form'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: MyForm(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyFormState createState() =&gt; _MyFormState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyFormState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyForm</span>&gt; </span>&#123;</span><br><span class="line">  TextEditingController _usernameController = TextEditingController();</span><br><span class="line">  TextEditingController _passwordController = TextEditingController();</span><br><span class="line">  TextEditingController _informationController = TextEditingController();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> _checkBool = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> _switchBool = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> _groupValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _usernameController.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_usernameController.text);</span><br><span class="line">    &#125;);</span><br><span class="line">    _passwordController.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_usernameController.text);</span><br><span class="line">    &#125;);</span><br><span class="line">    _informationController.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_usernameController.text);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        margin:</span><br><span class="line">            EdgeInsets.only(left: <span class="number">20.0</span>, right: <span class="number">20.0</span>),</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">        height: <span class="number">750.0</span>,</span><br><span class="line">        width: <span class="number">550.0</span>,</span><br><span class="line">        child: Card(</span><br><span class="line">            color: Colors.green[<span class="number">200</span>],</span><br><span class="line">            shape: RoundedRectangleBorder(</span><br><span class="line">              borderRadius: BorderRadius.circular(<span class="number">50.0</span>),</span><br><span class="line">            ),</span><br><span class="line">            child: Padding(</span><br><span class="line">              padding: EdgeInsets.only(left: <span class="number">20.0</span>, right: <span class="number">20.0</span>),</span><br><span class="line">              child: Column(</span><br><span class="line">                mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    height: <span class="number">20.0</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  Container(</span><br><span class="line">                    child: Text(<span class="string">'Login'</span>,</span><br><span class="line">                        textScaleFactor: <span class="number">2.5</span>, textAlign: TextAlign.center),</span><br><span class="line">                  ),</span><br><span class="line">                  TextField(</span><br><span class="line">                    controller: <span class="keyword">this</span>._usernameController,</span><br><span class="line">                    maxLines: <span class="number">1</span>,</span><br><span class="line">                    onChanged: (username) &#123;</span><br><span class="line">                      <span class="built_in">print</span>(username);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    decoration: InputDecoration(</span><br><span class="line">                        hintText: <span class="string">'username'</span>,</span><br><span class="line">                        labelText: <span class="string">'username'</span>,</span><br><span class="line">                        icon: Icon(Icons.person)),</span><br><span class="line">                  ),</span><br><span class="line">                  TextField(</span><br><span class="line">                    controller: <span class="keyword">this</span>._passwordController,</span><br><span class="line">                    maxLines: <span class="number">1</span>,</span><br><span class="line">                    onChanged: (password) =&gt; debugPrint(password),</span><br><span class="line">                    decoration: InputDecoration(</span><br><span class="line">                      hintText: <span class="string">'code'</span>,</span><br><span class="line">                      labelText: <span class="string">'code'</span>,</span><br><span class="line">                      icon: Icon(Icons.message),</span><br><span class="line">                    ),</span><br><span class="line">                    obscureText: <span class="keyword">true</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    height: <span class="number">30.0</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  TextField(</span><br><span class="line">                    controller: <span class="keyword">this</span>._informationController,</span><br><span class="line">                    maxLines: <span class="number">1</span>,</span><br><span class="line">                    onChanged: (content) &#123;</span><br><span class="line">                      debugPrint(content);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    decoration: InputDecoration(</span><br><span class="line">                        hintText: <span class="string">'please input your information here'</span>,</span><br><span class="line">                        border: OutlineInputBorder(</span><br><span class="line">                            borderSide: BorderSide(</span><br><span class="line">                                color: Colors.purple,</span><br><span class="line">                                width: <span class="number">1.5</span>,</span><br><span class="line">                                style: BorderStyle.solid))),</span><br><span class="line">                  ),</span><br><span class="line">                  Row(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      Text(<span class="string">'remember'</span>),</span><br><span class="line">                      Checkbox(value: <span class="keyword">this</span>._checkBool, onChanged: (value) &#123;</span><br><span class="line">                        setState(() &#123;</span><br><span class="line">                          <span class="keyword">this</span>._checkBool = value;</span><br><span class="line">                          <span class="built_in">print</span>(value);</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;, checkColor: Colors.indigo,),</span><br><span class="line">                      Text(<span class="string">'remember'</span>),</span><br><span class="line">                      Expanded(</span><br><span class="line">                        child: Switch(value: <span class="keyword">this</span>._switchBool, onChanged: (value)&#123;</span><br><span class="line">                          setState(() &#123;</span><br><span class="line">                            <span class="keyword">this</span>._switchBool = value;</span><br><span class="line">                          &#125;);</span><br><span class="line">                        &#125;,activeColor: Colors.indigo,),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                  CheckboxListTile(</span><br><span class="line">                    title: Text(<span class="string">'checktile'</span>),</span><br><span class="line">                    subtitle: Text(<span class="string">'this is CheckBoxListTile'</span>),</span><br><span class="line">                    secondary: Icon(Icons.album),</span><br><span class="line">                    value: <span class="keyword">this</span>._checkBool,</span><br><span class="line">                    onChanged: ((value)&#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        <span class="keyword">this</span>._checkBool = value;</span><br><span class="line">                      &#125;);</span><br><span class="line">                    &#125;),</span><br><span class="line">                    selected: <span class="keyword">true</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  Row(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      Text(<span class="string">'male'</span>),</span><br><span class="line">                      Radio(value: <span class="number">0</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                        setState(() &#123;</span><br><span class="line">                          <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;, activeColor: Colors.red,),</span><br><span class="line">                      Text(<span class="string">'female'</span>),</span><br><span class="line">                      Radio(value: <span class="number">1</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                        setState(() &#123;</span><br><span class="line">                          <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;)</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                  RadioListTile(value: <span class="number">0</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;, title: Text(<span class="string">'female'</span>), subtitle: Text(<span class="string">'this is female radio'</span>)),</span><br><span class="line">                  RadioListTile(value: <span class="number">1</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;, title: Text(<span class="string">'female'</span>), subtitle: Text(<span class="string">'this is female radio'</span>),),</span><br><span class="line">                  Container(</span><br><span class="line">                    height: <span class="number">50.0</span>,</span><br><span class="line">                    width: <span class="number">150.0</span>,</span><br><span class="line">                    child: RaisedButton(</span><br><span class="line">                      shape: RoundedRectangleBorder(</span><br><span class="line">                        borderRadius: BorderRadius.circular(<span class="number">50.0</span>),</span><br><span class="line">                      ),</span><br><span class="line">                      color: Colors.blue,</span><br><span class="line">                      onPressed: () &#123;</span><br><span class="line">                        <span class="keyword">if</span> (_usernameController.text == <span class="string">'francisqiang'</span> &amp;&amp;</span><br><span class="line">                            _passwordController.text == <span class="string">'123456'</span> &amp;&amp;</span><br><span class="line">                            _informationController.text != <span class="string">''</span>) &#123;</span><br><span class="line">                          <span class="built_in">print</span>(<span class="string">'success'</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          <span class="built_in">print</span>(<span class="string">'fail'</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      child: Text(</span><br><span class="line">                        <span class="string">'Sign In'</span>,</span><br><span class="line">                        textScaleFactor: <span class="number">2.0</span>,</span><br><span class="line">                        style: TextStyle(</span><br><span class="line">                            color: Colors.cyanAccent,</span><br><span class="line">                            fontWeight: FontWeight.bold),</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            )),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TextField&quot;&gt;&lt;a href=&quot;#TextField&quot; class=&quot;headerlink&quot; title=&quot;TextField&quot;&gt;&lt;/a&gt;TextField&lt;/h2&gt;&lt;p&gt;  在Flutter中TextField是最重要的一个表单组件，它是定义输入框，密码
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——侧边栏Drawer</title>
    <link href="https://francisqiang.github.io/2019/06/17/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94%E4%BE%A7%E8%BE%B9%E6%A0%8FDrawer/"/>
    <id>https://francisqiang.github.io/2019/06/17/Flutter组件——侧边栏Drawer/</id>
    <published>2019-06-17T13:40:23.000Z</published>
    <updated>2019-06-17T14:12:52.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Drawer"><a href="#Drawer" class="headerlink" title="Drawer"></a>Drawer</h2><p>  在Flutter中的Scaffold中有一个drawe属性，这个属性是定义页面的左边滑动抽屉的。如果我们没有在AppBar中设置自己的leading属性(控制左边的按钮)，Flutter会默认给我配置它自己的按钮。</p><p>  我们可以首先查看一下Drawer中的构造函数源代码。</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Drawer(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.elevation = <span class="number">16.0</span>,</span><br><span class="line">  <span class="keyword">this</span>.child,</span><br><span class="line">  <span class="keyword">this</span>.semanticLabel,</span><br><span class="line">&#125;) : <span class="keyword">assert</span>(elevation != <span class="keyword">null</span> &amp;&amp; elevation &gt;= <span class="number">0.0</span>),</span><br><span class="line">     <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><ul><li><p>elevation</p><p>控制z轴阴影效果，接受一个double。</p></li><li><p>child</p><p>子元素，里面通常存放一个Container再嵌套一个ListView。</p></li><li><p>semanticLabel</p><p>语意标签，目前还不知道做什么的。</p></li></ul><h2 id="DrawerHearder"><a href="#DrawerHearder" class="headerlink" title="DrawerHearder"></a>DrawerHearder</h2><p>源代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DrawerHeader(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.decoration,</span><br><span class="line">    <span class="keyword">this</span>.margin = <span class="keyword">const</span> EdgeInsets.only(bottom: <span class="number">8.0</span>),</span><br><span class="line">    <span class="keyword">this</span>.padding = <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">16.0</span>, <span class="number">16.0</span>, <span class="number">16.0</span>, <span class="number">8.0</span>),</span><br><span class="line">    <span class="keyword">this</span>.duration = <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">250</span>),</span><br><span class="line">    <span class="keyword">this</span>.curve = Curves.fastOutSlowIn,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><p>其中decoration用来设置容器的样式装饰，比如形状，颜色等。margin和padding是用来设置边距的，后面的duration和curve是动画内容，现在我还弄清楚怎么用。</p><h2 id="UserAccountsDrawerHeader"><a href="#UserAccountsDrawerHeader" class="headerlink" title="UserAccountsDrawerHeader"></a>UserAccountsDrawerHeader</h2><p>  如果我们想快速构建个人信息页面的话我们可以直接使用UserAccountDrawerHeader，这个类替我们封装了DrawerHeader，我们可以查看它的源代码。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserAccountsDrawerHeader(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.decoration,</span><br><span class="line">    <span class="keyword">this</span>.margin = <span class="keyword">const</span> EdgeInsets.only(bottom: <span class="number">8.0</span>),</span><br><span class="line">    <span class="keyword">this</span>.currentAccountPicture,</span><br><span class="line">    <span class="keyword">this</span>.otherAccountsPictures,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.accountName,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.accountEmail,</span><br><span class="line">    <span class="keyword">this</span>.onDetailsPressed,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><p>我们查看它的build方法就可以知道其中它使用了Drawer</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">assert</span>(debugCheckHasMaterial(context));</span><br><span class="line">  <span class="keyword">assert</span>(debugCheckHasMaterialLocalizations(context));</span><br><span class="line">  <span class="keyword">return</span> Semantics(</span><br><span class="line">    container: <span class="keyword">true</span>,</span><br><span class="line">    label: MaterialLocalizations.of(context).signedInLabel,</span><br><span class="line">    child: DrawerHeader(</span><br><span class="line">      decoration: widget.decoration ?? BoxDecoration(</span><br><span class="line">        color: Theme.of(context).primaryColor,</span><br><span class="line">      ),</span><br><span class="line">      margin: widget.margin,</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsetsDirectional.only(top: <span class="number">16.0</span>, start: <span class="number">16.0</span>),</span><br><span class="line">      child: SafeArea(</span><br><span class="line">        bottom: <span class="keyword">false</span>,</span><br><span class="line">        child: Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Expanded(</span><br><span class="line">              child: Padding(</span><br><span class="line">                padding: <span class="keyword">const</span> EdgeInsetsDirectional.only(end: <span class="number">16.0</span>),</span><br><span class="line">                child: _AccountPictures(</span><br><span class="line">                  currentAccountPicture: widget.currentAccountPicture,</span><br><span class="line">                  otherAccountsPictures: widget.otherAccountsPictures,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            _AccountDetails(</span><br><span class="line">              accountName: widget.accountName,</span><br><span class="line">              accountEmail: widget.accountEmail,</span><br><span class="line">              isOpen: _isOpen,</span><br><span class="line">              onTap: widget.onDetailsPressed == <span class="keyword">null</span> ? <span class="keyword">null</span> : _handleDetailsPressed,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先来看一下UserAccountDrawer中的属性</p><ul><li><p>decoration</p><p>盒子装饰属性</p></li><li><p>margin</p><p>边距</p></li><li><p>currentAccountPricture</p><p>当前用户的头像</p></li><li><p>otherAccountPicture</p><p>其他用户的头像，放在当前头像的右边。</p></li><li><p>accountName，accountEmail</p><p>用户的名字和邮箱。</p></li></ul><h2 id="Drawer的代码示例"><a href="#Drawer的代码示例" class="headerlink" title="Drawer的代码示例"></a>Drawer的代码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Drawer(</span><br><span class="line">          elevation: <span class="number">200.0</span>,</span><br><span class="line">          child: Container(</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              child: ListView(</span><br><span class="line">                padding: EdgeInsets.zero,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  UserAccountsDrawerHeader(</span><br><span class="line">                    accountName: Text(<span class="string">'FrancisQiang'</span>, style: TextStyle(fontWeight: FontWeight.bold, fontSize: <span class="number">30.0</span>),),</span><br><span class="line">                    accountEmail: Text(<span class="string">'2487049041@qq.com'</span>),</span><br><span class="line">                    currentAccountPicture: CircleAvatar(</span><br><span class="line">                      backgroundImage: NetworkImage(<span class="string">'https://francisqiang.github.io/images/avatar.gif'</span>),</span><br><span class="line">                    ),</span><br><span class="line">                    decoration: BoxDecoration(</span><br><span class="line">                      image: DecorationImage(</span><br><span class="line">                          image: NetworkImage(<span class="string">'https://francisqiang.github.io/2019/06/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94Trie/10.jpg'</span>),</span><br><span class="line">                          fit: BoxFit.cover,</span><br><span class="line">                          colorFilter: ColorFilter.mode(</span><br><span class="line">                              Colors.purple.withOpacity(<span class="number">0.3</span>),</span><br><span class="line">                              BlendMode.srcOver</span><br><span class="line">                          )</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  ListTile(</span><br><span class="line">                    title: Text(<span class="string">'Message'</span>, textAlign: TextAlign.right,),</span><br><span class="line">                    trailing: Icon(Icons.message, color: Colors.blueAccent, size: <span class="number">25.0</span>,),</span><br><span class="line">                  ),</span><br><span class="line">                  ListTile(</span><br><span class="line">                    title: Text(<span class="string">'Favorite'</span>, textAlign: TextAlign.right,),</span><br><span class="line">                    trailing: Icon(Icons.favorite, color: Colors.red, size: <span class="number">25.0</span>,),</span><br><span class="line">                  ),</span><br><span class="line">                  ListTile(</span><br><span class="line">                    title: Text(<span class="string">'Setting'</span>, textAlign: TextAlign.right,),</span><br><span class="line">                    trailing: Icon(Icons.settings,color: Colors.black87, size: <span class="number">25.0</span>,),</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              )</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Drawer&quot;&gt;&lt;a href=&quot;#Drawer&quot; class=&quot;headerlink&quot; title=&quot;Drawer&quot;&gt;&lt;/a&gt;Drawer&lt;/h2&gt;&lt;p&gt;  在Flutter中的Scaffold中有一个drawe属性，这个属性是定义页面的左边滑动抽屉的。如果我们
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter中的底部导航和顶部导航</title>
    <link href="https://francisqiang.github.io/2019/06/14/Flutter%E4%B8%AD%E7%9A%84%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E5%92%8C%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA/"/>
    <id>https://francisqiang.github.io/2019/06/14/Flutter中的底部导航和顶部导航/</id>
    <published>2019-06-14T12:51:55.000Z</published>
    <updated>2019-06-14T14:00:04.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BottomNavigatorBar"><a href="#BottomNavigatorBar" class="headerlink" title="BottomNavigatorBar"></a>BottomNavigatorBar</h2><p>  Flutter中实现底部导航需要在Scaffold脚手架中赋值bottomNavigationBar参数，这个参数接受一个Widget，一般我们直接赋值BottomNavigationBar对象。</p><p>  其中有几个参数比较重要</p><ul><li><p>currentIndex</p><p>当前item元素的索引</p></li><li><p>onTap</p><p>当点击的时候触发的函数</p></li><li><p>items</p><p>存放路由导航的的按钮(小部件)。</p><p>需要注意的是整个脚手架需要放置在动态组件中。</p></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScaffold</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyScaffoldState createState() =&gt; _MyScaffoldState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyScaffoldState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyScaffold</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _currentIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义导航切换的路由</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _tabsWidget = [TabControllerPage(), MyMessage(), MySetting()];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> DefaultTabController(</span><br><span class="line">      length: <span class="number">2</span>,</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          centerTitle: <span class="keyword">true</span>,</span><br><span class="line">          title: Text(<span class="string">'Tab Demo'</span>),</span><br><span class="line">          leading: IconButton(icon: Icon(Icons.favorite), onPressed: () &#123;&#125;),</span><br><span class="line">        ),</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          currentIndex: <span class="keyword">this</span>._currentIndex,</span><br><span class="line">          <span class="comment">// 触发重构页面</span></span><br><span class="line">          onTap: (index) =&gt; setState(() =&gt; <span class="keyword">this</span>._currentIndex = index),</span><br><span class="line">          items: [</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(Icons.home), title: Text(<span class="string">'home'</span>)),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(Icons.message), title: Text(<span class="string">'message'</span>)),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(Icons.settings), title: Text(<span class="string">'settings'</span>))</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        body: _tabsWidget[<span class="keyword">this</span>._currentIndex],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TabBar"><a href="#TabBar" class="headerlink" title="TabBar"></a>TabBar</h2><p>  TabBar是用来实现顶部滑动导航的。我们可以放置在脚手架中appBar中的bottom中。</p><p>  但最需要注意的是我们需要在脚手架外层嵌套一个DefaultTabController，我们必须要定义这个组件中的length属性，这是用来定义导航条的数目的。然后我们再bottom中定义一个TabBar，里面的tabs属性接受一个Widget数组，数组中存放导航条，然后我们可以在Scaffold中的body里面添加TabBarView，TabBarView里面有children属性，是用来存放导航的主页面的，所以我们这里DefaultTabController中的length属性和bottom中tabs中数组的长度还有这个children数组的长度，三者必须一样。</p><p>  其实这里就是在你想要实现顶部导航页面外层嵌套DefaultTabController并且定义长度，然后再里面定义TabBar和TabBarView，这个DefaultTabController用来对TabBar和TabBarView进行”连接”和监听。</p><h3 id="常规顶部导航代码示例"><a href="#常规顶部导航代码示例" class="headerlink" title="常规顶部导航代码示例"></a>常规顶部导航代码示例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScaffold</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyScaffoldState createState() =&gt; _MyScaffoldState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyScaffoldState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyScaffold</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> DefaultTabController(</span><br><span class="line">      length: <span class="number">2</span>,</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          centerTitle: <span class="keyword">true</span>,</span><br><span class="line">          title: Text(<span class="string">'Tab Demo'</span>),</span><br><span class="line">          leading: IconButton(icon: Icon(Icons.favorite), onPressed: () &#123;&#125;),</span><br><span class="line">          bottom: TabBar(</span><br><span class="line">            isScrollable: <span class="keyword">true</span>,</span><br><span class="line">            tabs: &lt;Widget&gt;[</span><br><span class="line">              Tab(</span><br><span class="line">                text: <span class="string">'hot'</span>,</span><br><span class="line">              ),</span><br><span class="line">              Tab(</span><br><span class="line">                text: <span class="string">'recommend'</span>,</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        body: TabBarView(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            ListView(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'111111'</span>),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'222222'</span>),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'333333'</span>),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">            ListView(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'111111'</span>),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'222222'</span>),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'333333'</span>),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  如果我们页面里面已经有底层导航了，这时候我们就不同在appBar中的bottom属性中存放导航条了。</p><p>  比如你现在有三个底部导航路由，然后你在总的Scaffold中的appBar中添加顶部导航栏，这样就会使你的底部三个页面都存在这个顶部导航栏。</p><p>  如果你在另一个页面再次使用Scaffold构建子页面 你可以做在appBar的title中定义TabBar，appBar的title属性接受一个Widget，你可以将TabBar赋值给它。或者你可以在新建的脚手架中不使用appBar属性。</p><h2 id="自定义TabBar"><a href="#自定义TabBar" class="headerlink" title="自定义TabBar"></a>自定义TabBar</h2><p>  我们需要在一个动态组件中创建一个TabController 然后这个组件需要with(类似多继承)一个SingleTickerProviderStateMixin(用来设置TabController中的vsync垂直同步属性的)。然后我们这时候不需要使用DefaultTabController来嵌套组件了，我们只需要在TabBar和TabBarView组件中定义他们的Controller属性为我们的controller，当然我们需要在init组件的时候创建controller。</p><p>  使用自定义的好处就是我们可以监听controller的状态从而定制一些个性化的操作。</p><h3 id="自定义TabController代码"><a href="#自定义TabController代码" class="headerlink" title="自定义TabController代码"></a>自定义TabController代码</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppBardemoPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  AppBardemoPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  _AppBardemoPageState createState() =&gt; _AppBardemoPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AppBardemoPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AppBardemoPage</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  TabController _tabController;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _tabController.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _tabController = <span class="keyword">new</span> TabController(vsync: <span class="keyword">this</span>, length: <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 我们这时候可以添加监听器来实现自定义</span></span><br><span class="line">    _tabController.addLinstener(()&#123;</span><br><span class="line">        <span class="comment">// 获取控制器的一些值来改变一些UI组件</span></span><br><span class="line">        <span class="built_in">print</span>(_tabController.index);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'顶部 tab 切换'</span>), bottom: <span class="keyword">new</span> TabBar(</span><br><span class="line">        tabs: &lt;Widget&gt;[</span><br><span class="line">          <span class="keyword">new</span> Tab(</span><br><span class="line">            icon: <span class="keyword">new</span> Icon(Icons.directions_bike),), <span class="keyword">new</span> Tab(</span><br><span class="line">            icon: <span class="keyword">new</span> Icon(Icons.directions_boat),), <span class="keyword">new</span> Tab(</span><br><span class="line">            icon: <span class="keyword">new</span> Icon(Icons.directions_bus),),</span><br><span class="line">        ], controller: _tabController,),), body: <span class="keyword">new</span> TabBarView(</span><br><span class="line">      controller: _tabController, children: &lt;Widget&gt;[</span><br><span class="line">      <span class="keyword">new</span> Center(child: <span class="keyword">new</span> Text(<span class="string">'自行车'</span>)),</span><br><span class="line">      <span class="keyword">new</span> Center(child: <span class="keyword">new</span> Text(<span class="string">'船'</span>)),</span><br><span class="line">      <span class="keyword">new</span> Center(child: <span class="keyword">new</span> Text(<span class="string">'巴士'</span>)),</span><br><span class="line">    ],),);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BottomNavigatorBar&quot;&gt;&lt;a href=&quot;#BottomNavigatorBar&quot; class=&quot;headerlink&quot; title=&quot;BottomNavigatorBar&quot;&gt;&lt;/a&gt;BottomNavigatorBar&lt;/h2&gt;&lt;p&gt;  Flut
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter路由和路由传值</title>
    <link href="https://francisqiang.github.io/2019/06/12/Flutter%E8%B7%AF%E7%94%B1%E5%92%8C%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%80%BC/"/>
    <id>https://francisqiang.github.io/2019/06/12/Flutter路由和路由传值/</id>
    <published>2019-06-12T02:27:47.000Z</published>
    <updated>2019-06-12T04:12:47.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h2><p>  在Flutter中路由跳转是通过Navigator这个类进行操作的，它是一种堆栈的结构，主要有两个操作一个是push就是入栈操作，他会把当前页面放入栈顶并显示。还有一个就是pop，它会把当前页面进行出栈操作，并显示操作之后最上层的页面。</p><p>  使用的时候我们需要先将需要跳转的页面文件进行导入，然后使用Navigator.push(context,MaterialPageRoute()),进行跳转。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">RaisedButton(</span><br><span class="line"> child: Text(<span class="string">"跳转到搜索页面"</span>),</span><br><span class="line"></span><br><span class="line"> onPressed: ()&#123;</span><br><span class="line">  Navigator.of(context).push(MaterialPageRoute(</span><br><span class="line">      builder: (BuildContext  context)&#123;</span><br><span class="line">        <span class="keyword">return</span> SearchPage();</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;,</span><br><span class="line">color: Theme.of(context).accentColor,</span><br><span class="line">textTheme: ButtonTextTheme.primary</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>  当pop的时候</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RaisedButton(</span><br><span class="line"> child: Text(<span class="string">"跳转到搜索页面"</span>),</span><br><span class="line"></span><br><span class="line"> onPressed: ()&#123;</span><br><span class="line">  Navigator.of(context).pop();</span><br><span class="line">&#125;,</span><br><span class="line">color: Theme.of(context).accentColor,</span><br><span class="line">textTheme: ButtonTextTheme.primary</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>  当然Navigator.of(context).push(xxx),Navigator.of(context).pop(xxx)也可以直接使用Navigator.push(context,xxx)或者Navigator.pop(context),其实原理都差不多只是后者封装了前者。</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@optionalTypeArgs</span></span><br><span class="line"><span class="keyword">static</span> Future&lt;T&gt; push&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt;(BuildContext context, Route&lt;T&gt; route) &#123;</span><br><span class="line">  <span class="keyword">return</span> Navigator.of(context).push(route);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本路由传参"><a href="#基本路由传参" class="headerlink" title="基本路由传参"></a>基本路由传参</h2><p>  基本路由传参其实就是在需要传参的页面中的构造器加入需要传参的字段，然后通过构造器中的相应参数去传参。</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Navigator.push(context, MaterialPageRoute(builder: (context)&#123;</span><br><span class="line">  <span class="keyword">return</span> MyParam(title: <span class="string">'哈哈哈哈'</span>,);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>  构造器</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParam</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">MyParam(&#123;Key key, <span class="keyword">this</span>.title&#125;):<span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(<span class="string">'Test'</span>),</span><br><span class="line">    ),</span><br><span class="line">    body: Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        height: <span class="number">300.0</span>,</span><br><span class="line">        width: <span class="number">200.0</span>,</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">            color: Colors.amber</span><br><span class="line">        ),</span><br><span class="line">        child: Column(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(<span class="string">'<span class="subst">$title<span class="string">'),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            RaisedButton(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">              child: Text('</span></span>返回'</span>),</span><br><span class="line">              onPressed: ()&#123;</span><br><span class="line">                Navigator.pop(context);</span><br><span class="line">               &#125;,</span><br><span class="line">             )</span><br><span class="line">           ],</span><br><span class="line">         )</span><br><span class="line">       ),</span><br><span class="line">     ),</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  当我们需要返回数据的时候(pop操作)</p><p>  我们可以使用pop里面的result参数</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@optionalTypeArgs</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">bool</span> pop&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt;(BuildContext context, [ T result ]) &#123;</span><br><span class="line">  <span class="keyword">return</span> Navigator.of(context).pop&lt;T&gt;(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  注意我们push方法返回的是一个Future，我们可以直接使用.then方法接受参数</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Navigator.push&lt;<span class="built_in">String</span>&gt;(context, <span class="keyword">new</span> MaterialPageRoute(builder: (BuildContext context)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ThirdPage(title:<span class="string">"请输入昵称"</span>);</span><br><span class="line"></span><br><span class="line">&#125;)).then( (<span class="built_in">String</span> result)&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//处理代码</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>  命名路由有点类似于Vue中的路由，我们需要将使用到的路由注册到MaterialApp中的routes参数中，这个routes参数是一个map</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line"><span class="keyword">return</span> MaterialApp(</span><br><span class="line"> <span class="comment">// home:Tabs(),</span></span><br><span class="line"> initialRoute: <span class="string">'/'</span>, routes: &#123;</span><br><span class="line"> <span class="string">'/'</span>:(contxt)=&gt;Tabs(),</span><br><span class="line"> <span class="string">'/search'</span>:(contxt) =&gt;SearchPage(),</span><br><span class="line"> <span class="string">'/form'</span>: (context) =&gt; FormPage(),  </span><br><span class="line"> &#125;,</span><br><span class="line">  );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  initalRoute就是初始路由。</p><p>  然后我们就可以使用Navigator.pushNamed(context,routeName)这个方法进行跳转页面了。</p><h2 id="命名路由传参"><a href="#命名路由传参" class="headerlink" title="命名路由传参"></a>命名路由传参</h2><p>  命名路由传参主要借助于MaterialApp的onGeneratorRoute属性，这里面接受一个RouteFactory，其实返回的就是Route。</p><p>  我们首先要删除routes属性(必须要，不然无法使用)。然后我们自己定义一个route的map。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们需要在routes里面做些小变动，(context)需要变成(context,&#123;arguments&#125;)</span></span><br><span class="line">  <span class="comment">// 然后通过构造方法进行传参</span></span><br><span class="line">  <span class="keyword">final</span> routes=&#123;</span><br><span class="line">    <span class="string">'/'</span>:(context)=&gt;Tabs(),</span><br><span class="line">    <span class="string">'/form'</span>:(context)=&gt;FormPage(),</span><br><span class="line">    <span class="string">'/product'</span>:(context)=&gt;ProductPage(),</span><br><span class="line">    <span class="string">'/productinfo'</span>:(context,&#123;arguments&#125;)=&gt;ProductInfoPage(arguments:arguments),</span><br><span class="line">    <span class="string">'/search'</span>:(context,&#123;arguments&#125;)=&gt;SearchPage(arguments:arguments),</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      <span class="comment">// home:Tabs(),</span></span><br><span class="line">      initialRoute: <span class="string">'/'</span>, <span class="comment">//初始化的时候加载的路由</span></span><br><span class="line">      onGenerateRoute: (RouteSettings settings) &#123;</span><br><span class="line">        <span class="comment">// 统一处理</span></span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">String</span> name = settings.name;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">Function</span> pageContentBuilder = routes[name];</span><br><span class="line">        <span class="keyword">if</span> (pageContentBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (settings.arguments != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Route route = MaterialPageRoute(</span><br><span class="line">                builder: (context) =&gt;</span><br><span class="line">                    pageContentBuilder(context, arguments: settings.arguments));</span><br><span class="line">            <span class="keyword">return</span> route;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Route route = MaterialPageRoute(</span><br><span class="line">                builder: (context) =&gt;</span><br><span class="line">                    pageContentBuilder(context));</span><br><span class="line">            <span class="keyword">return</span> route;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  当然，我们的Navigator也需要变动</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由跳转</span></span><br><span class="line">Navigator.pushNamed(context, <span class="string">'/search'</span>,arguments: &#123;</span><br><span class="line">  <span class="string">"id"</span>:<span class="number">123</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>  这里我们需要增加argument参数(这是原本方法自带的参数)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本路由&quot;&gt;&lt;a href=&quot;#基本路由&quot; class=&quot;headerlink&quot; title=&quot;基本路由&quot;&gt;&lt;/a&gt;基本路由&lt;/h2&gt;&lt;p&gt;  在Flutter中路由跳转是通过Navigator这个类进行操作的，它是一种堆栈的结构，主要有两个操作一个是push就是
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——Stack，Card</title>
    <link href="https://francisqiang.github.io/2019/06/10/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Stack%EF%BC%8CCard/"/>
    <id>https://francisqiang.github.io/2019/06/10/Flutter组件——Stack，Card/</id>
    <published>2019-06-10T02:02:21.000Z</published>
    <updated>2019-06-10T02:40:10.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>  Stack也是一个布局组件，它用于有子组件堆叠的场景，而且当我们使用Positioned组进行辅助的时候我们可以是层叠效果变得非常灵活。</p><ul><li><h2 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h2><p>它接受一个AlignmentDirectional对象，它用于控制non-positioned组件在Stack组件中的位置。默认为topStart(左上角)</p></li><li><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>它接受一个Overflow对象，用于控制溢出部分的显示效果</p></li><li><h2 id="textDirection"><a href="#textDirection" class="headerlink" title="textDirection"></a>textDirection</h2><p>用于控制子组件排列方向，接受一个TextDirection对象有ltr，rtl这些值。</p></li><li><h2 id="fit"><a href="#fit" class="headerlink" title="fit"></a>fit</h2><p>用于控制如何设置non-positioned节点尺寸，默认为loose。接受一个StackFit对象，里面有loose，expand，passthrough三个枚举常量。</p></li><li><h2 id="children"><a href="#children" class="headerlink" title="children"></a>children</h2><p>放置子元素组件。其中可以放置positioned组件Positioned组件中有left，right，top，bottom，width，height等属性，上下左右用来控制在Stack的位置的，这个组件不受alignment属性的影响。</p></li><li><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Stack(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.alignment = AlignmentDirectional.topStart,</span><br><span class="line">  <span class="keyword">this</span>.textDirection,</span><br><span class="line">  <span class="keyword">this</span>.fit = StackFit.loose,</span><br><span class="line">  <span class="keyword">this</span>.overflow = Overflow.clip,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;) : <span class="keyword">super</span>(key: key, children: children);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Positioned(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.left,</span><br><span class="line">  <span class="keyword">this</span>.top,</span><br><span class="line">  <span class="keyword">this</span>.right,</span><br><span class="line">  <span class="keyword">this</span>.bottom,</span><br><span class="line">  <span class="keyword">this</span>.width,</span><br><span class="line">  <span class="keyword">this</span>.height,</span><br><span class="line">  <span class="meta">@required</span> Widget child,</span><br><span class="line">&#125;) : <span class="keyword">assert</span>(left == <span class="keyword">null</span> || right == <span class="keyword">null</span> || width == <span class="keyword">null</span>),</span><br><span class="line">     <span class="keyword">assert</span>(top == <span class="keyword">null</span> || bottom == <span class="keyword">null</span> || height == <span class="keyword">null</span>),</span><br><span class="line">     <span class="keyword">super</span>(key: key, child: child);</span><br></pre></td></tr></table></figure><h2 id="Card"><a href="#Card" class="headerlink" title="Card"></a>Card</h2><p>  这是一个容器组件，就是卡片的样子</p><ul><li><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Card(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.color,</span><br><span class="line">    <span class="keyword">this</span>.elevation,</span><br><span class="line">    <span class="keyword">this</span>.shape,</span><br><span class="line">    <span class="keyword">this</span>.borderOnForeground = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.margin,</span><br><span class="line">    <span class="keyword">this</span>.clipBehavior,</span><br><span class="line">    <span class="keyword">this</span>.child,</span><br><span class="line">    <span class="keyword">this</span>.semanticContainer = <span class="keyword">true</span>,</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(elevation == <span class="keyword">null</span> || elevation &gt;= <span class="number">0.0</span>),</span><br><span class="line">       <span class="keyword">assert</span>(borderOnForeground != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><ul><li><h2 id="color"><a href="#color" class="headerlink" title="color"></a>color</h2><p>接受一个Color对象，用来设置卡片的颜色。</p></li><li><h2 id="elevation"><a href="#elevation" class="headerlink" title="elevation"></a>elevation</h2><p>控制z轴的高度，就是阴影效果，接受一个double值。</p></li><li><h2 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h2><p>控制卡片的形状，接受一个shapeBorder对象，我们可以将RoundedRectangleBorder对象赋值给它，这是事项圆角卡片的对象。</p></li><li><h2 id="borderOnForeground"><a href="#borderOnForeground" class="headerlink" title="borderOnForeground"></a>borderOnForeground</h2><p>接受一个布尔值，默认为true，当设置为true的时候，边框渲染会在子元素前面，false就相反。</p></li><li><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p>用于控制外边距，接受一个EdgeInsetsGeometry对象。</p></li><li><h2 id="semanticContainer"><a href="#semanticContainer" class="headerlink" title="semanticContainer"></a>semanticContainer</h2><p>接受一个bool，将此标志设置为true将尝试将所有子语义合并到此节点中。将此标志设置为false会强制所有子语义节点显式。这是文档里面的解释，我不太理解，但是官方说当你子元素是多种类型的时候最好设置为false，其默认也是false。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Stack&quot;&gt;&lt;a href=&quot;#Stack&quot; class=&quot;headerlink&quot; title=&quot;Stack&quot;&gt;&lt;/a&gt;Stack&lt;/h2&gt;&lt;p&gt;  Stack也是一个布局组件，它用于有子组件堆叠的场景，而且当我们使用Positioned组进行辅助的时候我们可以
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——Row，Column</title>
    <link href="https://francisqiang.github.io/2019/06/09/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Row%EF%BC%8CColumn/"/>
    <id>https://francisqiang.github.io/2019/06/09/Flutter组件——Row，Column/</id>
    <published>2019-06-09T12:04:48.000Z</published>
    <updated>2019-06-09T12:42:03.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h2><p>  Row组件是一种很常见的布局组件，顾名思义就是水平一行的组件。它将里面的子组件排成一行，如果其子组件超出一行的范围，那么会报错。</p><ul><li><h2 id="mainAxisAlignment"><a href="#mainAxisAlignment" class="headerlink" title="mainAxisAlignment"></a>mainAxisAlignment</h2><p>Row组件分为两个方向，分别是主轴和副轴。mainAxisAlignment是控制子组件在主轴方向上的排列方式的。它接受一个MainAxisAlignment对象。</p><ul><li><p>center  设置主轴中心</p></li><li><p>end  放在主轴末尾</p></li><li><p>spaceAround  将主轴方向上的空白区域均分，使children之间的空白区域相等，但是首尾child的空白区域为1/2</p></li><li><p>spaceBetween  和spaceAround差不多，但是首尾children没有空隙</p></li><li><p>spaceEvenly  是children空白区域相等包括首尾部分。</p></li></ul></li><li><h2 id="mainAxisSize"><a href="#mainAxisSize" class="headerlink" title="mainAxisSize"></a>mainAxisSize</h2><p>它接受一个MainAxisAlignment对象，它决定了主轴方向上占有空间的值，默认是max。max是最大化主轴方向的可用空间，min则相反。</p></li><li><h2 id="crossAxisAlignment"><a href="#crossAxisAlignment" class="headerlink" title="crossAxisAlignment"></a>crossAxisAlignment</h2><p>它接受一个CrossAxisAlignment对象，控制的是在副轴上子元素排列的方式，其中有end，start，center等。</p></li><li><h2 id="verticalDirection"><a href="#verticalDirection" class="headerlink" title="verticalDirection"></a>verticalDirection</h2><p>它接受一个VerticalDirection对象，定义了children的摆放顺序(我也不是很了解)。</p><p>Row的构造函数源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  Row(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,</span><br><span class="line">  MainAxisSize mainAxisSize = MainAxisSize.max,</span><br><span class="line">  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,</span><br><span class="line">  TextDirection textDirection,</span><br><span class="line">  VerticalDirection verticalDirection = VerticalDirection.down,</span><br><span class="line">  TextBaseline textBaseline,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;) : <span class="keyword">super</span>(</span><br><span class="line">  children: children,</span><br><span class="line">  key: key,</span><br><span class="line">  direction: Axis.horizontal,</span><br><span class="line">  mainAxisAlignment: mainAxisAlignment,</span><br><span class="line">  mainAxisSize: mainAxisSize,</span><br><span class="line">  crossAxisAlignment: crossAxisAlignment,</span><br><span class="line">  textDirection: textDirection,</span><br><span class="line">  verticalDirection: verticalDirection,</span><br><span class="line">  textBaseline: textBaseline,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h2><p>  了解了Row组件之后Column组件就非常简单了，字面理解Column组件就是控制纵向的布局组件，其属性和Row非常类似，我们可以直接看构造方法的源代码</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  Column(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,</span><br><span class="line">  MainAxisSize mainAxisSize = MainAxisSize.max,</span><br><span class="line">  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,</span><br><span class="line">  TextDirection textDirection,</span><br><span class="line">  VerticalDirection verticalDirection = VerticalDirection.down,</span><br><span class="line">  TextBaseline textBaseline,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;) : <span class="keyword">super</span>(</span><br><span class="line">  children: children,</span><br><span class="line">  key: key,</span><br><span class="line">  direction: Axis.vertical,</span><br><span class="line">  mainAxisAlignment: mainAxisAlignment,</span><br><span class="line">  mainAxisSize: mainAxisSize,</span><br><span class="line">  crossAxisAlignment: crossAxisAlignment,</span><br><span class="line">  textDirection: textDirection,</span><br><span class="line">  verticalDirection: verticalDirection,</span><br><span class="line">  textBaseline: textBaseline,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Row&quot;&gt;&lt;a href=&quot;#Row&quot; class=&quot;headerlink&quot; title=&quot;Row&quot;&gt;&lt;/a&gt;Row&lt;/h2&gt;&lt;p&gt;  Row组件是一种很常见的布局组件，顾名思义就是水平一行的组件。它将里面的子组件排成一行，如果其子组件超出一行的范围，那么会报错。
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——ListView和GridView</title>
    <link href="https://francisqiang.github.io/2019/06/08/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94ListView%E5%92%8CGridView/"/>
    <id>https://francisqiang.github.io/2019/06/08/Flutter组件——ListView和GridView/</id>
    <published>2019-06-08T10:45:34.000Z</published>
    <updated>2019-06-08T11:48:03.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ListView组件"><a href="#ListView组件" class="headerlink" title="ListView组件"></a>ListView组件</h2><p>  ListView是可滚动的列表组件，使用的范围非常广。</p><ul><li><h2 id="静态构建ListView"><a href="#静态构建ListView" class="headerlink" title="静态构建ListView"></a>静态构建ListView</h2><p>我们直接使用ListView标准构造函数就可以构建了(只适合列表元素已经确定并且数目比较少的时候)。里面最重要的一个属性就是children，里面接受一个Widget数组，我们可以将需要的放置的组件放入数组里面。</p></li><li><h2 id="动态构造ListView"><a href="#动态构造ListView" class="headerlink" title="动态构造ListView"></a>动态构造ListView</h2><p>ListView的标准构造函数会将所有item一次性创建，而ListView.builder会创建滚动到屏幕上显示的item。</p><p>ListView.builder其实是dart里面的一种可命名构造函数(直接理解为一种构造函数就好了)。还有这两种ListView.separated<br>ListView.custom。</p><p>我们直接来看builder命名构造函数的属性</p><p>首先我们看一下源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  ListView.builder(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  Axis scrollDirection = Axis.vertical,</span><br><span class="line">  <span class="built_in">bool</span> reverse = <span class="keyword">false</span>,</span><br><span class="line">  ScrollController controller,</span><br><span class="line">  <span class="built_in">bool</span> primary,</span><br><span class="line">  ScrollPhysics physics,</span><br><span class="line">  <span class="built_in">bool</span> shrinkWrap = <span class="keyword">false</span>,</span><br><span class="line">  EdgeInsetsGeometry padding,</span><br><span class="line">  <span class="keyword">this</span>.itemExtent,</span><br><span class="line">  <span class="meta">@required</span> IndexedWidgetBuilder itemBuilder,</span><br><span class="line">  <span class="built_in">int</span> itemCount,</span><br><span class="line">  <span class="built_in">bool</span> addAutomaticKeepAlives = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> addRepaintBoundaries = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> addSemanticIndexes = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">double</span> cacheExtent,</span><br><span class="line">  <span class="built_in">int</span> semanticChildCount,</span><br><span class="line">  DragStartBehavior dragStartBehavior = DragStartBehavior.start,</span><br><span class="line">&#125;) : childrenDelegate = SliverChildBuilderDelegate(</span><br><span class="line">       itemBuilder,</span><br><span class="line">       childCount: itemCount,</span><br><span class="line">       addAutomaticKeepAlives: addAutomaticKeepAlives,</span><br><span class="line">       addRepaintBoundaries: addRepaintBoundaries,</span><br><span class="line">       addSemanticIndexes: addSemanticIndexes,</span><br><span class="line">     ),</span><br><span class="line">     <span class="keyword">super</span>(</span><br><span class="line">       key: key,</span><br><span class="line">       scrollDirection: scrollDirection,</span><br><span class="line">       reverse: reverse,</span><br><span class="line">       controller: controller,</span><br><span class="line">       primary: primary,</span><br><span class="line">       physics: physics,</span><br><span class="line">       shrinkWrap: shrinkWrap,</span><br><span class="line">       padding: padding,</span><br><span class="line">       cacheExtent: cacheExtent,</span><br><span class="line">       semanticChildCount: semanticChildCount ?? itemCount,</span><br><span class="line">       dragStartBehavior: dragStartBehavior,</span><br><span class="line">     );</span><br></pre></td></tr></table></figure><p>构造函数后面的childrenDelegate和super是初始化列表，先只作了解。</p><ul><li><p>itemBuilder </p><p>这个属性是required的，他需要一个IndexedWidgetBuilder对象,我们查看源码发现他是一个方法，参数是上下文对象BuildContext和index。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> IndexedWidgetBuilder = Widget <span class="built_in">Function</span>(BuildContext context, <span class="built_in">int</span> index);</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>所以这里面我们可以直接传进去一个方法，参数是上下文和index，需要返回一个Widget，我们这里直接可以使用匿名函数加上胖箭头表达式。</code></pre><ul><li><p>itemCount</p><p>这个属性是指定item(元素)的个数</p></li><li><p>scrollDirection</p><p>指定能滑动方向，接受一个Axis，其中可以设置horizontal或者vertical，默认为vertical(垂直方向)。</p></li><li><p>itemExtent</p><p>接受double类型参数，指定每个元素在滑动方向所占的高度值。</p></li><li><p>padding</p><p>设置内边距</p></li></ul><h2 id="GridView组件"><a href="#GridView组件" class="headerlink" title="GridView组件"></a>GridView组件</h2><p>  我们首先看一下GridView常用的count命名构造函数</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  GridView.count(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  Axis scrollDirection = Axis.vertical,</span><br><span class="line">  <span class="built_in">bool</span> reverse = <span class="keyword">false</span>,</span><br><span class="line">  ScrollController controller,</span><br><span class="line">  <span class="built_in">bool</span> primary,</span><br><span class="line">  ScrollPhysics physics,</span><br><span class="line">  <span class="built_in">bool</span> shrinkWrap = <span class="keyword">false</span>,</span><br><span class="line">  EdgeInsetsGeometry padding,</span><br><span class="line">  <span class="meta">@required</span> <span class="built_in">int</span> crossAxisCount,</span><br><span class="line">  <span class="built_in">double</span> mainAxisSpacing = <span class="number">0.0</span>,</span><br><span class="line">  <span class="built_in">double</span> crossAxisSpacing = <span class="number">0.0</span>,</span><br><span class="line">  <span class="built_in">double</span> childAspectRatio = <span class="number">1.0</span>,</span><br><span class="line">  <span class="built_in">bool</span> addAutomaticKeepAlives = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> addRepaintBoundaries = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> addSemanticIndexes = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">double</span> cacheExtent,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">  <span class="built_in">int</span> semanticChildCount,</span><br><span class="line">  DragStartBehavior dragStartBehavior = DragStartBehavior.start,</span><br><span class="line">&#125;) : gridDelegate = SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">       crossAxisCount: crossAxisCount,</span><br><span class="line">       mainAxisSpacing: mainAxisSpacing,</span><br><span class="line">       crossAxisSpacing: crossAxisSpacing,</span><br><span class="line">       childAspectRatio: childAspectRatio,</span><br><span class="line">     ),</span><br><span class="line">     childrenDelegate = SliverChildListDelegate(</span><br><span class="line">       children,</span><br><span class="line">       addAutomaticKeepAlives: addAutomaticKeepAlives,</span><br><span class="line">       addRepaintBoundaries: addRepaintBoundaries,</span><br><span class="line">       addSemanticIndexes: addSemanticIndexes,</span><br><span class="line">     ),</span><br><span class="line">     <span class="keyword">super</span>(</span><br><span class="line">       key: key,</span><br><span class="line">       scrollDirection: scrollDirection,</span><br><span class="line">       reverse: reverse,</span><br><span class="line">       controller: controller,</span><br><span class="line">       primary: primary,</span><br><span class="line">       physics: physics,</span><br><span class="line">       shrinkWrap: shrinkWrap,</span><br><span class="line">       padding: padding,</span><br><span class="line">       cacheExtent: cacheExtent,</span><br><span class="line">       semanticChildCount: semanticChildCount ?? children.length,</span><br><span class="line">       dragStartBehavior: dragStartBehavior,</span><br><span class="line">     );</span><br></pre></td></tr></table></figure><p>  其中有很多属性是和ListView的一样的</p><ul><li><p>reverse</p><p>接受bool，是否沿反方向滚动</p></li><li><p>controller</p><p>控制child滚动时候的位置</p></li><li><p>shrinkWrap</p><p>滚动方向的滚动视图内容是否应该由正在查看的内容所决定。</p></li><li><p>primary</p><p>是否是与父节点的PrimaryScrollController所关联的主滚动视图。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ListView组件&quot;&gt;&lt;a href=&quot;#ListView组件&quot; class=&quot;headerlink&quot; title=&quot;ListView组件&quot;&gt;&lt;/a&gt;ListView组件&lt;/h2&gt;&lt;p&gt;  ListView是可滚动的列表组件，使用的范围非常广。&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——Image</title>
    <link href="https://francisqiang.github.io/2019/06/06/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Image/"/>
    <id>https://francisqiang.github.io/2019/06/06/Flutter组件——Image/</id>
    <published>2019-06-06T08:51:45.000Z</published>
    <updated>2019-06-06T09:10:47.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>  Image就是图片组件，其中分为很多中，比如说network(url<br>  获取图片)，asset(本地获取图片)，还有File，Memory。这里我学习了network和asset的。</p><ul><li><h2 id="必须属性"><a href="#必须属性" class="headerlink" title="必须属性"></a>必须属性</h2><p>这里必须属性和Text组件的字符串内容差不多，我们需要加入图片地址，asset需要放入本地地址，network需要放入网络地址。不过在new Image.asset之前，我们需要在yaml文件中注册asset资源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line"><span class="attr">  assets:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">images/avatar.gif</span></span><br></pre></td></tr></table></figure></li><li><h2 id="width-height"><a href="#width-height" class="headerlink" title="width,height"></a>width,height</h2><p>宽高设置，需要double</p></li><li><h2 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h2><p>排列位置，接受Alignment对象。控制的是图片在图片组件中的位置。</p></li><li><h2 id="fit"><a href="#fit" class="headerlink" title="fit"></a>fit</h2><p>图片充满格式，接受BoxFit对象，可以使用其中已经预定义了一些常量fill(充满)，cover(覆盖)等。</p></li><li><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><p>重复，接受ImageRepeat对象，控制的是如果图片没有占满图片组件，那么就重复。</p></li><li><h2 id="color"><a href="#color" class="headerlink" title="color"></a>color</h2><p>与混合模式一起使用，在图片上增加一个颜色层，然后使用混合模式混合，如果不加混合模式，图片就会被颜色给覆盖掉。</p></li><li><h2 id="ColorBlendMode"><a href="#ColorBlendMode" class="headerlink" title="ColorBlendMode"></a>ColorBlendMode</h2><p>接受一个BlendMode，图片混合模式，该对象已经定义好几种混合类型，BlendMode.darken,BlendMode.clear等。</p></li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Image.asset(<span class="string">"images/avatar.gif"</span>,</span><br><span class="line">              width: <span class="number">200.0</span>,</span><br><span class="line">              height: <span class="number">400.0</span>,</span><br><span class="line">              color: Colors.pink,</span><br><span class="line">              colorBlendMode: BlendMode.colorBurn,</span><br><span class="line">              fit: BoxFit.scaleDown,</span><br><span class="line">              alignment: Alignment.bottomCenter,</span><br><span class="line">              repeat: ImageRepeat.repeat,</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Image&quot;&gt;&lt;a href=&quot;#Image&quot; class=&quot;headerlink&quot; title=&quot;Image&quot;&gt;&lt;/a&gt;Image&lt;/h2&gt;&lt;p&gt;  Image就是图片组件，其中分为很多中，比如说network(url&lt;br&gt;  获取图片)，asset(本地获取
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——Container</title>
    <link href="https://francisqiang.github.io/2019/06/06/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Container/"/>
    <id>https://francisqiang.github.io/2019/06/06/Flutter组件——Container/</id>
    <published>2019-06-06T05:30:45.000Z</published>
    <updated>2019-06-06T05:49:35.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Container组件"><a href="#Container组件" class="headerlink" title="Container组件"></a>Container组件</h2><p>  Container组件是一个非常重要的组件有点类似于html中的div。</p><ul><li><h2 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h2><p>这个是设置子组件的布局的，注意是子组件，它接受一个Alignment对象，我们可以使用Alignment(x, y)来构造它，或者我们也可以使用它已经定义好的几个常量来构造它</p><p><img src="/2019/06/06/Flutter组件——Container/1.jpg" alt="Alignment常量定义"></p></li><li><h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><p>这个是设置内边距的，接受一个EdgeInsetsGeometry, 我们可以将它的子类EdgeInsets对象赋值给它，我们可以使用const EdgeInsets.all(double value)，const EdgeInsets.only等方式声明</p></li><li><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p>它是设置Container的外边距，接受参数和padding一样</p></li><li><h2 id="height，width"><a href="#height，width" class="headerlink" title="height，width"></a>height，width</h2><p>它们是设置宽和高的，里面接受一个double</p></li><li><h2 id="decoration"><a href="#decoration" class="headerlink" title="decoration"></a>decoration</h2><p>绘制在child后面的装饰，设置了decoration的话，就不能设置color属性，否则会报错，此时应该在decoration中进行颜色的设置。</p><p>其中它接受一个Decoration，我们可以使用它的子类BoxDecoration来赋值给它。</p><p>在BoxDecoration中也有许多参数</p><ul><li><p>color  设置颜色的</p></li><li><p>image  设置背景图片，可以添加一个DecorationImage对象</p></li><li><p>border 设置边，接受一个BoxBorder，我们可以使用Border.all(width: 1.5, style: BorderStyle.solid, color: Colors.deepPurple),这样的发情时来构造它。</p></li><li><p>borderRadius  设置边角的，可以增加弧度，接受一个BorderRadius对象，我们可以使用BorderRadius.all来构造</p></li><li><p>gradient  设置颜色渐变效果，接受一个Gradient对象</p></li></ul></li><li><h2 id="child"><a href="#child" class="headerlink" title="child"></a>child</h2><p>接受一个孩子，孩子里面可以放置子组件</p></li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">            alignment: Alignment.bottomCenter,</span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">            margin: <span class="keyword">const</span> EdgeInsets.all(<span class="number">100.0</span>),</span><br><span class="line">            height: <span class="number">500.0</span>,</span><br><span class="line">            width: <span class="number">200.0</span>,</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">              border: Border.all(width: <span class="number">1.5</span>, style: BorderStyle.solid, color: Colors.deepPurple),</span><br><span class="line">              borderRadius: BorderRadius.circular(<span class="number">1.0</span>),</span><br><span class="line">              gradient: LinearGradient(colors: [</span><br><span class="line">                Colors.deepPurple,</span><br><span class="line">                Colors.deepOrange,</span><br><span class="line">                Colors.pink,</span><br><span class="line">                Colors.greenAccent</span><br><span class="line">              ])</span><br><span class="line">            ),</span><br><span class="line">            child: Image.network(<span class="string">'https://francisqiang.github.io/images/avatar.gif'</span>,</span><br><span class="line">              fit: BoxFit.fitWidth,</span><br><span class="line">              color: Colors.deepOrangeAccent,</span><br><span class="line">              colorBlendMode: BlendMode.darken,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Container组件&quot;&gt;&lt;a href=&quot;#Container组件&quot; class=&quot;headerlink&quot; title=&quot;Container组件&quot;&gt;&lt;/a&gt;Container组件&lt;/h2&gt;&lt;p&gt;  Container组件是一个非常重要的组件有点类似于html中的
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——Text</title>
    <link href="https://francisqiang.github.io/2019/06/06/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Text/"/>
    <id>https://francisqiang.github.io/2019/06/06/Flutter组件——Text/</id>
    <published>2019-06-06T05:22:33.000Z</published>
    <updated>2019-06-06T05:24:51.272Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h2 id="默认属性"><a href="#默认属性" class="headerlink" title="默认属性"></a>默认属性</h2><p>Text中有个默认必须的属性就是字符串了，你需要在一开始设置字符串的内容</p></li><li><h2 id="textAlign"><a href="#textAlign" class="headerlink" title="textAlign"></a>textAlign</h2><p>这个属性主要就是设置字符串的对齐方式的，他接受一个TextAlign对象，这个对象里面有几个常见的枚举比如说left，center，start等。</p></li><li><h2 id="maxLines"><a href="#maxLines" class="headerlink" title="maxLines"></a>maxLines</h2><p>maxLines指的是Text的最大行数，如果超过剩余字符串内容则会被隐藏</p></li><li><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>overflow定义了超出字符串部分内容的显示样式(不太精确，先这么理解)，其中它接受TextOverFlow对象，这个对象设置了几个枚举类型，其中有clip，fade，ellipsis，visible效果，其中ellipsis是用的比较多的</p></li><li><h2 id="textScaleFactor"><a href="#textScaleFactor" class="headerlink" title="textScaleFactor"></a>textScaleFactor</h2><p>这个属性是设置字体大小的，它是根据比例设置，接受的是一个double，如果你设置2.0就是两倍大小，当你设置这个属性的时候就不要设置fontSize了，会有冲突</p></li><li><h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><p>Text中最重要的就是style属性了，style属性主要设置字体的样式，它接受一个TextStyle对象并且这个对象中还有很多属性，下面是几个常见属性。</p><ul><li><p>color属性</p><p>主要是字体的颜色，里面接受一个Color对象，我们可以使用Colors.dark的形式，因为Colors里面已经内置了很多Color常量，或者使用Color.fromARGB(a, r, g, b)</p></li><li><p>fontSize属性</p><p>字体大小不用多说，接受一个double</p></li><li><p>fontWeight属性</p><p>字体粗度，里面接受一个FontWeight对象，比如FontWeight.w800等</p></li><li><p>decoration属性</p><p>用于下划线类型的装饰，接受一个TextDecoration对象，里面有下划线，上划线等等样式，你还可以设置combine里面接受一个数组，可以把样式都添加进去。</p></li><li><p>decorationStyle属性</p><p>装饰的样式，比如将下划线变成波浪线等等。接受一个TextDecorationStyle对象，里面有solid，double，dashed，wavy，dotted类型的。</p></li><li><p>decorationColor属性</p><p>装饰的颜色，可以设置下划线的颜色，接受一个Color对象</p></li><li><p>backgroundColor属性</p><p>这个属性就是设置字体的背景的颜色，接受一个Color对象</p></li></ul></li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyText</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(<span class="string">'This is my first page'</span>,</span><br><span class="line">      textAlign: TextAlign.justify,</span><br><span class="line">      maxLines: <span class="number">1</span>,</span><br><span class="line">      overflow: TextOverflow.ellipsis,</span><br><span class="line">      textScaleFactor: <span class="number">1.5</span>,</span><br><span class="line">      style: TextStyle(</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          fontSize: <span class="number">30.0</span>,</span><br><span class="line">          fontWeight: FontWeight.w800,</span><br><span class="line">          decoration: TextDecoration.combine([</span><br><span class="line">            TextDecoration.lineThrough,</span><br><span class="line">            TextDecoration.underline</span><br><span class="line">          ]),</span><br><span class="line">          decorationStyle: TextDecorationStyle.wavy,</span><br><span class="line">          decorationColor: Colors.lightGreenAccent,</span><br><span class="line">        backgroundColor: Colors.red</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;默认属性&quot;&gt;&lt;a href=&quot;#默认属性&quot; class=&quot;headerlink&quot; title=&quot;默认属性&quot;&gt;&lt;/a&gt;默认属性&lt;/h2&gt;&lt;p&gt;Text中有个默认必须的属性就是字符串了，你需要在一开始设置字符串的内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Java8新特性——lambda范围和内置功能接口</title>
    <link href="https://francisqiang.github.io/2019/06/05/Java8%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94lambda%E8%8C%83%E5%9B%B4%E5%92%8C%E5%86%85%E7%BD%AE%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%8F%A3/"/>
    <id>https://francisqiang.github.io/2019/06/05/Java8新特性——lambda范围和内置功能接口/</id>
    <published>2019-06-05T00:07:50.000Z</published>
    <updated>2019-06-05T07:16:15.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lambda-scopes"><a href="#lambda-scopes" class="headerlink" title="lambda scopes"></a>lambda scopes</h2><p>  在lambda表达式中我们可以访问外部变量，这个功能和匿名内部类一样，但是对于匿名内部类，我们只能访问final变量，lambda表达式中都可以访问，但是它只是隐式地将变量变成了final</p><p>  首先我们能通过lambda表达式来访问外部变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    Converter&lt;Integer, String&gt; converter = (from -&gt; String.valueOf(from + num));</span><br><span class="line">    System.out.println(converter.convert(<span class="number">2</span>)); <span class="comment">// 输出3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  但是我们不能再改变lambda表达式中调用的外部变量了，因为一旦被lambda表达式调用，这个变量就被隐式地声明成了final变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    Converter&lt;Integer, String&gt; converter = (from -&gt; String.valueOf(from + num));</span><br><span class="line">    System.out.println(converter.convert(<span class="number">2</span>));</span><br><span class="line">    num = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这个时候就会报错 从lambda 表达式引用的本地变量必须是最终变量或实际上的最终变量。</p><p>  还有一个容易混淆的点就是这样的写法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">  Converter&lt;Integer, String&gt; converter = String::valueOf;</span><br><span class="line">  System.out.println(converter.convert(<span class="number">2</span> + num));</span><br><span class="line">  num = <span class="number">2</span>;</span><br><span class="line">  System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  即使是对象也是一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">"123"</span>);</span><br><span class="line">    Converter&lt;StringBuilder, String&gt; converter = (stringBuilder1) -&gt; stringBuilder1.toString();</span><br><span class="line">    System.out.println(converter.convert(stringBuilder));</span><br><span class="line">    stringBuilder.append(<span class="string">"234"</span>);</span><br><span class="line">    System.out.println(stringBuilder);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这个时候其实我们只是将num作为函数参数传进去了，在lambda表达式中并没有显示声明调用这个变量。</p><p>  在lambda表达式中我们还可以访问静态和类中的字段</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lambda4</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> outerStaticNum;</span><br><span class="line">  <span class="keyword">int</span> outerNum;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">testScopes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; &#123;</span><br><span class="line">          outerNum = <span class="number">23</span>;</span><br><span class="line">          <span class="keyword">return</span> String.valueOf(from);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; &#123;</span><br><span class="line">          outerStaticNum = <span class="number">72</span>;</span><br><span class="line">          <span class="keyword">return</span> String.valueOf(from);</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  还记得上次声明的Formula接口么，其中定义了一个sqrt的默认方法，在lambda中我们是不能调用默认方法的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Formula formula = (a) -&gt; sqrt(a * <span class="number">100</span>); <span class="comment">//这样编译不通过</span></span><br></pre></td></tr></table></figure><h2 id="Built-in-Functional-Interfaces"><a href="#Built-in-Functional-Interfaces" class="headerlink" title="Built-in Functional Interfaces"></a>Built-in Functional Interfaces</h2><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>  这是断言，判断的意思。先上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">predicate.test(<span class="string">"foo"</span>);              <span class="comment">// true</span></span><br><span class="line">predicate.negate().test(<span class="string">"foo"</span>);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">Predicate&lt;Boolean&gt; nonNull = Objects::nonNull;</span><br><span class="line">Predicate&lt;Boolean&gt; isNull = Objects::isNull;</span><br><span class="line"></span><br><span class="line">Predicate&lt;String&gt; isEmpty = String::isEmpty;</span><br><span class="line">Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();</span><br></pre></td></tr></table></figure><p>  其中test方法就是Predicate接口中的唯一抽象方法，我们lambda表达式中就是实现了它。</p><p>  negate方法是取反的意思，其中还有and(), or()这两个默认方法对应语，或。</p><p>  可以直接看源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluates this predicate on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the input argument matches the predicate,</span></span><br><span class="line"><span class="comment">     * otherwise &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed predicate that represents a short-circuiting logical</span></span><br><span class="line"><span class="comment">     * AND of this predicate and another.  When evaluating the composed</span></span><br><span class="line"><span class="comment">     * predicate, if this predicate is &#123;<span class="doctag">@code</span> false&#125;, then the &#123;<span class="doctag">@code</span> other&#125;</span></span><br><span class="line"><span class="comment">     * predicate is not evaluated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed</span></span><br><span class="line"><span class="comment">     * to the caller; if evaluation of this predicate throws an exception, the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> other&#125; predicate will not be evaluated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> other a predicate that will be logically-ANDed with this</span></span><br><span class="line"><span class="comment">     *              predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed predicate that represents the short-circuiting logical</span></span><br><span class="line"><span class="comment">     * AND of this predicate and the &#123;<span class="doctag">@code</span> other&#125; predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if other is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a predicate that represents the logical negation of this</span></span><br><span class="line"><span class="comment">     * predicate.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a predicate that represents the logical negation of this</span></span><br><span class="line"><span class="comment">     * predicate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed predicate that represents a short-circuiting logical</span></span><br><span class="line"><span class="comment">     * OR of this predicate and another.  When evaluating the composed</span></span><br><span class="line"><span class="comment">     * predicate, if this predicate is &#123;<span class="doctag">@code</span> true&#125;, then the &#123;<span class="doctag">@code</span> other&#125;</span></span><br><span class="line"><span class="comment">     * predicate is not evaluated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed</span></span><br><span class="line"><span class="comment">     * to the caller; if evaluation of this predicate throws an exception, the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> other&#125; predicate will not be evaluated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> other a predicate that will be logically-ORed with this</span></span><br><span class="line"><span class="comment">     *              predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed predicate that represents the short-circuiting logical</span></span><br><span class="line"><span class="comment">     * OR of this predicate and the &#123;<span class="doctag">@code</span> other&#125; predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if other is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a predicate that tests if two arguments are equal according</span></span><br><span class="line"><span class="comment">     * to &#123;<span class="doctag">@link</span> Objects#equals(Object, Object)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of arguments to the predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetRef the object reference with which to compare for equality,</span></span><br><span class="line"><span class="comment">     *               which may be &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a predicate that tests if two arguments are equal according</span></span><br><span class="line"><span class="comment">     * to &#123;<span class="doctag">@link</span> Objects#equals(Object, Object)&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</span><br><span class="line">                ? Objects::isNull</span><br><span class="line">                : object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>  Function从字面理解就是函数的意思，这也是Java支持函数式编程的一个很重要的函数式接口。我们先看源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this function to the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the function argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the function result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed function that first applies the &#123;<span class="doctag">@code</span> before&#125;</span></span><br><span class="line"><span class="comment">     * function to its input, and then applies this function to the result.</span></span><br><span class="line"><span class="comment">     * If evaluation of either function throws an exception, it is relayed to</span></span><br><span class="line"><span class="comment">     * the caller of the composed function.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; the type of input to the &#123;<span class="doctag">@code</span> before&#125; function, and to the</span></span><br><span class="line"><span class="comment">     *           composed function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> before the function to apply before this function is applied</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed function that first applies the &#123;<span class="doctag">@code</span> before&#125;</span></span><br><span class="line"><span class="comment">     * function and then applies this function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if before is null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #andThen(Function)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed function that first applies this function to</span></span><br><span class="line"><span class="comment">     * its input, and then applies the &#123;<span class="doctag">@code</span> after&#125; function to the result.</span></span><br><span class="line"><span class="comment">     * If evaluation of either function throws an exception, it is relayed to</span></span><br><span class="line"><span class="comment">     * the caller of the composed function.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; the type of output of the &#123;<span class="doctag">@code</span> after&#125; function, and of the</span></span><br><span class="line"><span class="comment">     *           composed function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> after the function to apply after this function is applied</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed function that first applies this function and then</span></span><br><span class="line"><span class="comment">     * applies the &#123;<span class="doctag">@code</span> after&#125; function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if after is null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #compose(Function)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a function that always returns its input argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of the input and output objects to the function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a function that always returns its input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  其中apply()是我们需要实现的一个函数，为什么这里说是函数不是方法呢？我们现在用函数式的思想去思考这个问题，其实这个方法就是我们给定一个参数然后我们返回一个结果，具体这个函数是怎么实现我们先不管。这就是函数式思想(先考虑参数和结果，然后再去考虑实现行为)。</p><p>  这是作者给的实例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是实现apply方法</span></span><br><span class="line">Function&lt;String, Integer&gt; toInteger = Integer::valueOf;</span><br><span class="line">Function&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf);</span><br><span class="line"></span><br><span class="line">backToString.apply(<span class="string">"123"</span>);     <span class="comment">// "123"</span></span><br></pre></td></tr></table></figure><p>  这里多出来了个andThen方法，我们来具体看一看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//判空</span></span><br><span class="line">  Objects.requireNonNull(after);</span><br><span class="line">  <span class="comment">// 我们传入的是一个Function</span></span><br><span class="line">  <span class="comment">// 该语句是先调用当前Function的apply方法</span></span><br><span class="line">  <span class="comment">// 然后将该方法的返回值作为after(传入的Function)的apply方法中的参数</span></span><br><span class="line">  <span class="comment">// 最终返回的是after的apply方法的返回值</span></span><br><span class="line">  <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  里面还有一个compose方法,其实和andThen方法正好相反</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">  Objects.requireNonNull(before);</span><br><span class="line">  <span class="comment">// 先调用传入的befor的apply方法，然后将返回值作为当前Function的apply的参数</span></span><br><span class="line">  <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><p>  这个函数很简单，就相当于无参函数，我们不需要设置给定参数，只关注结果</p><p>  具体源码也很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets a result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Person&gt; personSupplier = Person::<span class="keyword">new</span>;</span><br><span class="line">personSupplier.get();   <span class="comment">// new Person</span></span><br></pre></td></tr></table></figure><h3 id="Comsumer"><a href="#Comsumer" class="headerlink" title="Comsumer"></a>Comsumer</h3><p>  我们先来看一下源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs this operation on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed &#123;<span class="doctag">@code</span> Consumer&#125; that performs, in sequence, this</span></span><br><span class="line"><span class="comment">     * operation followed by the &#123;<span class="doctag">@code</span> after&#125; operation. If performing either</span></span><br><span class="line"><span class="comment">     * operation throws an exception, it is relayed to the caller of the</span></span><br><span class="line"><span class="comment">     * composed operation.  If performing this operation throws an exception,</span></span><br><span class="line"><span class="comment">     * the &#123;<span class="doctag">@code</span> after&#125; operation will not be performed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> after the operation to perform after this operation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed &#123;<span class="doctag">@code</span> Consumer&#125; that performs in sequence this</span></span><br><span class="line"><span class="comment">     * operation followed by the &#123;<span class="doctag">@code</span> after&#125; operation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> after&#125; is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上面有一个accept()是我们需要实现的抽象方法，其实就是我们给定一个参数但是我们没有返回值，然后这个andThen()就是传入一个Consumer先调用原来的Consumer的accept方法然后再调用传入的accept()</p><h3 id="Comparators"><a href="#Comparators" class="headerlink" title="Comparators"></a>Comparators</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是实现了compare方法</span></span><br><span class="line">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);</span><br><span class="line"></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Doe"</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"Alice"</span>, <span class="string">"Wonderland"</span>);</span><br><span class="line"></span><br><span class="line">comparator.compare(p1, p2);             <span class="comment">// &gt; 0</span></span><br><span class="line"><span class="comment">// reversed方法是默认方法</span></span><br><span class="line">comparator.reversed().compare(p1, p2);  <span class="comment">// &lt; 0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;lambda-scopes&quot;&gt;&lt;a href=&quot;#lambda-scopes&quot; class=&quot;headerlink&quot; title=&quot;lambda scopes&quot;&gt;&lt;/a&gt;lambda scopes&lt;/h2&gt;&lt;p&gt;  在lambda表达式中我们可以访问外部变量，这个
      
    
    </summary>
    
      <category term="Java SE" scheme="https://francisqiang.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>Java8新特性——接口中的static，default方法</title>
    <link href="https://francisqiang.github.io/2019/06/04/Java8%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84static%EF%BC%8Cdefault%E6%96%B9%E6%B3%95/"/>
    <id>https://francisqiang.github.io/2019/06/04/Java8新特性——接口中的static，default方法/</id>
    <published>2019-06-04T05:57:09.000Z</published>
    <updated>2019-06-04T06:40:40.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="default方法"><a href="#default方法" class="headerlink" title="default方法"></a>default方法</h2><p> 这些天在看ES6的语法，包括我以前学了一段时间的dart，这两门语言中都涉及到函数式编程，想想我对Java中的函数式编程还是不太了解，最近开始学习Java8的一些新特性，反正语言都差不多，一起学习好了。</p><p> 在java8中新增了default方法，这个方法可以定义在接口中，其实就是在接口中定义了默认方法，这些默认方法可以在接口中就已经实现。</p><p> 我看的是github上的<a href="https://github.com/winterbe/java8-tutorial" target="_blank" rel="noopener">Java8——tutorial</a>,原文是英文的，其实理解起来不难。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Formula</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">default</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Math.sqrt(a);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Formula formula = <span class="keyword">new</span> Formula() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> a;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   System.out.println(formula.calculate(<span class="number">5</span>));</span><br><span class="line">   <span class="comment">// 未实现也可以直接使用</span></span><br><span class="line">   System.out.println(formula.sqrt(<span class="number">5</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="static方法"><a href="#static方法" class="headerlink" title="static方法"></a>static方法</h2><p>  上面就已经定义了静态方法在接口中，在以往版本是不可以的。我们可以直接通过接口(不需要实现)来调用静态方法，但注意的是实现接口的类或者子接口(是继承不是实现)不会继承接口中的静态方法。</p><h2 id="Lambda-expressions"><a href="#Lambda-expressions" class="headerlink" title="Lambda expressions"></a>Lambda expressions</h2><p>  因为是跟着教程走的，涉及到的知识和教程的差不多，你们可以直接去原网站看。</p><p>  我们可以使用lambda表达式改造上面的静态方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Formula formula = (a) -&gt; a;</span><br><span class="line">  System.out.println(formula.calculate(<span class="number">5</span>));</span><br><span class="line">  System.out.println(formula.sqrt(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  能使用lambda表达式来实现的接口必须只能有一个抽象方法，然后我们写的那个lambda表达式会和原来类型中的抽象方法进行匹配。</p><p>  这是原文(大概意思就是上面的话):</p><p>  How does lambda expressions fit into Java’s type system? Each lambda corresponds to a given type, specified by an interface. A so called functional interface must contain exactly one abstract method declaration. Each lambda expression of that type will be matched to this abstract method. Since default methods are not abstract you’re free to add default methods to your functional interface.</p><p>  然后我们可以在只有一个抽象方法的接口上面声明一个注解@FunctionalInterface来指明这个接口是一个函数接口，当我们尝试添加第二个抽象方法的时候编译器会报错。</p><p>  We can use arbitrary interfaces as lambda expressions as long as the interface only contains one abstract method. To ensure that your interface meet the requirements, you should add the @FunctionalInterface annotation. The compiler is aware of this annotation and throws a compiler error as soon as you try to add a second abstract method declaration to the interface.</p><p>  <img src="/2019/06/04/Java8新特性——接口中的static，default方法/1.jpg" alt="@FunctionalInterface"></p><h2 id="Method-and-Constructor-References"><a href="#Method-and-Constructor-References" class="headerlink" title="Method and Constructor References"></a>Method and Constructor References</h2><p>  方法和构造方法引用，Java 8允许您通过::关键字传递方法或构造函数的引用。</p><p>  例子：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);Integer converted = converter.convert(<span class="string">"123"</span>);</span><br><span class="line">System.out.println(converted);    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>  我们可以使用::来化简代码</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Converter&lt;String, Integer&gt; converter = Integer::valueof</span><br><span class="line"><span class="comment">// 可以这么理解本来我们可以将这个实现写成一个lambda表达式，这个表达式其实就是一个函数，我们现在只是要一个函数，然后我们通过方法引用吧方法赋值给它。这个方法必须参数返回值要相同</span></span><br></pre></td></tr></table></figure><p>  当然我们还可以使用某个实例化的对象的方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">startsWith</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> String.valueOf(s.charAt(<span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Something something = <span class="keyword">new</span> Something();</span><br><span class="line">Converter&lt;String, String&gt; converter = something::startsWith;</span><br></pre></td></tr></table></figure><p>  通过::引用构造器</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  String firstName;</span><br><span class="line">  String lastName;</span><br><span class="line"></span><br><span class="line">  Person() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  Person(String firstName, String lastName) &#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonFactory</span>&lt;<span class="title">P</span> <span class="keyword">extends</span> <span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">P <span class="title">create</span><span class="params">(String firstName, String lastName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们通过构造器引用实现接口</span></span><br><span class="line">PersonFactory&lt;Person&gt; pf = Person::<span class="keyword">new</span>;</span><br><span class="line">Person person  = PersonFactory.create(<span class="string">"11"</span>, <span class="string">"22"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;default方法&quot;&gt;&lt;a href=&quot;#default方法&quot; class=&quot;headerlink&quot; title=&quot;default方法&quot;&gt;&lt;/a&gt;default方法&lt;/h2&gt;&lt;p&gt; 这些天在看ES6的语法，包括我以前学了一段时间的dart，这两门语言中都涉及到函数
      
    
    </summary>
    
      <category term="Java SE" scheme="https://francisqiang.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
</feed>
