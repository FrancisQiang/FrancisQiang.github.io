<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Francis的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://francisqiang.github.io/"/>
  <updated>2019-06-24T16:37:25.703Z</updated>
  <id>https://francisqiang.github.io/</id>
  
  <author>
    <name>Francis Qiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter中的动画(一)</title>
    <link href="https://francisqiang.github.io/2019/06/24/Flutter%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB-%E4%B8%80/"/>
    <id>https://francisqiang.github.io/2019/06/24/Flutter中的动画-一/</id>
    <published>2019-06-24T15:19:39.000Z</published>
    <updated>2019-06-24T16:37:25.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画概述"><a href="#动画概述" class="headerlink" title="动画概述"></a>动画概述</h2><p>  对于任何UI框架，实现动画的原理都是一样的，通过画面在短时间内的变化形成动画，基本上人眼对30帧以上的动画的感受就是极限了，即在30帧以上人眼是基本区别不了的，在Flutter中，动画的平均帧率是可以达到60FPS的，这和原生基本持平，也是Flutter的一个特点。</p><h2 id="主要涉及到的类"><a href="#主要涉及到的类" class="headerlink" title="主要涉及到的类"></a>主要涉及到的类</h2><p>  在Flutter中，实现动画主要涉及到四个类，分别是Animation,Curved,Tween,Controller。</p><p>  其中Animation类是用来保存动画的插值和状态的</p><p>  Curved是用来实现动态的变化方式，比如说一般变化是线性的，你可以通过设置不同Curved来实现不同的函数变化方式。</p><p>  Tween，在默认情况下，AnimationController对象的值范围是在0.0到1.0之间，我们可以通过设置Tween来设置动画的值的变化范围以达到我们想要的效果。</p><p>  Controller，用来控制动画的控制器。</p><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><p>  Animation对象本身和UI渲染没有关系，它是用来保存动画插值和状态的对象，我们可以查看Animation源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animation</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Listenable</span> <span class="keyword">implements</span> <span class="title">ValueListenable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Animation();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> addListener(VoidCallback listener);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> removeListener(VoidCallback listener);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> addStatusListener(AnimationStatusListener listener);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> removeStatusListener(AnimationStatusListener listener);</span><br><span class="line"></span><br><span class="line">  AnimationStatus <span class="keyword">get</span> status;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  T <span class="keyword">get</span> value;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isDismissed =&gt; status == AnimationStatus.dismissed;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isCompleted =&gt; status == AnimationStatus.completed;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@optionalTypeArgs</span></span><br><span class="line">  Animation&lt;U&gt; drive&lt;U&gt;(Animatable&lt;U&gt; child) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(<span class="keyword">this</span> <span class="keyword">is</span> Animation&lt;<span class="built_in">double</span>&gt;);</span><br><span class="line">    <span class="keyword">return</span> child.animate(<span class="keyword">this</span> <span class="keyword">as</span> <span class="keyword">dynamic</span>); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'<span class="subst">$&#123;describeIdentity(<span class="keyword">this</span>)&#125;</span>(<span class="subst">$&#123;toStringDetails()&#125;</span>)'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">String</span> toStringDetails() &#123;</span><br><span class="line">    <span class="keyword">assert</span>(status != <span class="keyword">null</span>);</span><br><span class="line">    <span class="built_in">String</span> icon;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.forward:</span><br><span class="line">        icon = <span class="string">'\u25B6'</span>; <span class="comment">// &gt;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.reverse:</span><br><span class="line">        icon = <span class="string">'\u25C0'</span>; <span class="comment">// &lt;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.completed:</span><br><span class="line">        icon = <span class="string">'\u23ED'</span>; <span class="comment">// &gt;&gt;|</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.dismissed:</span><br><span class="line">        icon = <span class="string">'\u23EE'</span>; <span class="comment">// |&lt;&lt;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">assert</span>(icon != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'<span class="subst">$icon<span class="string">';</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br></pre></td></tr></table></figure><p>  Animation对象是一个在一段时间内一次生成一个区间(Tween)之间值的类，这种输出可以是线性的，曲线的(我们可以通过Curved来设置)，这个类中还为我们定义了一些监听器和状态监听器，我们可以通过设置监听器来监听动画发生的一些变化，然后做出一些改变。</p><ol><li>addListener()可以给Animation添加帧监听器，在每一帧都会被调用。帧监听器中最常见的行为是改变状态后调用setState()来触发UI重建。</li><li>addStatusListener()可以给Animation添加“动画状态改变”监听器；动画开始、结束、正向或反向（见AnimationStatus定义）时会调用StatusListener。</li></ol><h2 id="Tween"><a href="#Tween" class="headerlink" title="Tween"></a>Tween</h2><p>  刚刚提到了Animation是用来生成在Tween之间的值的对象。</p><p>  我们先来查看一下源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tween</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">dynamic</span>&gt; <span class="keyword">extends</span> <span class="title">Animatable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tween的构造函数，接受一个开始的泛型和结束的泛型</span></span><br><span class="line">  <span class="comment">// 正如我们先前提到的Tween是一个范围</span></span><br><span class="line">  <span class="comment">// 这里的范围可以是数值也可以使某种对象例如Color等</span></span><br><span class="line">  Tween(&#123; <span class="keyword">this</span>.begin, <span class="keyword">this</span>.end &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 泛型的开始</span></span><br><span class="line">  T begin;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 泛型的结束</span></span><br><span class="line">  T end;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们需要传入一个进度百分比</span></span><br><span class="line">  <span class="comment">// 这个函数就能直接返还给我们当前进度的插值</span></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  T lerp(<span class="built_in">double</span> t) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(begin != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">assert</span>(end != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> begin + (end - begin) * t;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 该transform封装了lerp函数</span></span><br><span class="line">  <span class="comment">// 就是传入的值为0直接返回begin，为1返回end，如果不是那就返回lerp函数返回的值</span></span><br><span class="line">  <span class="comment">// 所以要实现自定义lerp，我们需要重写lerp函数而不是transform</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  T transform(<span class="built_in">double</span> t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0.0</span>)</span><br><span class="line">      <span class="keyword">return</span> begin;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">1.0</span>)</span><br><span class="line">      <span class="keyword">return</span> end;</span><br><span class="line">    <span class="keyword">return</span> lerp(t);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() =&gt; <span class="string">'<span class="subst">$runtimeType</span>(<span class="subst">$begin</span> \u2192 <span class="subst">$end</span>)'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  因为Tween继承Animatable这个抽象类，这个抽象类中有一个方法animate方法，它用来返回一个Animation对象，所以对于Tween类我们通常设置完begin和end之后会调用原本继承于Animatable抽象类的animate方法设置一个Animation对象并赋值给一个Animation对象。</p><h2 id="Curve"><a href="#Curve" class="headerlink" title="Curve"></a>Curve</h2><p>  Curve这个类是用来设置动画的变化曲线的，默认情况下是线性变化的。</p><p>  我们一般使用CurveAnimation这个对象来自定义设置动画曲线，我们可以查看一下它的源码。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurvedAnimation</span> <span class="keyword">extends</span> <span class="title">Animation</span>&lt;<span class="title">double</span>&gt; <span class="title">with</span> <span class="title">AnimationWithParentMixin</span>&lt;<span class="title">double</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  CurvedAnimation(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.parent,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.curve,</span><br><span class="line">    <span class="keyword">this</span>.reverseCurve,</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(parent != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(curve != <span class="keyword">null</span>) &#123;</span><br><span class="line">    _updateCurveDirection(parent.status);</span><br><span class="line">    parent.addStatusListener(_updateCurveDirection);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来设置父控制器，这里一般传入AnimationController</span></span><br><span class="line">  <span class="comment">// 用来将自己的curve添加到这个控制器中去。</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">final</span> Animation&lt;<span class="built_in">double</span>&gt; parent;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置自己的curve</span></span><br><span class="line">  Curve curve;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来设置动画的反转时的曲线，不设置就和原来相等，</span></span><br><span class="line">  <span class="comment">// 为了保持动画在结束和反转开始的时候动画的连续性</span></span><br><span class="line">  <span class="comment">// flutter会为我们将反转曲线的值和结束设置在同一点。</span></span><br><span class="line">  Curve reverseCurve;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来设置曲线的方向</span></span><br><span class="line">  <span class="comment">// 只有动画结束或者开始的时候我们才能设置</span></span><br><span class="line">  <span class="comment">// 以免造成动画的不连续性</span></span><br><span class="line">  AnimationStatus _curveDirection;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新curveDirection</span></span><br><span class="line">  <span class="keyword">void</span> _updateCurveDirection(AnimationStatus status) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.dismissed:</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.completed:</span><br><span class="line">        _curveDirection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.forward:</span><br><span class="line">        _curveDirection ??= AnimationStatus.forward;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.reverse:</span><br><span class="line">        _curveDirection ??= AnimationStatus.reverse;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> _useForwardCurve &#123;</span><br><span class="line">    <span class="keyword">return</span> reverseCurve == <span class="keyword">null</span> || (_curveDirection ?? parent.status) != AnimationStatus.reverse;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">double</span> <span class="keyword">get</span> value &#123;</span><br><span class="line">    <span class="keyword">final</span> Curve activeCurve = _useForwardCurve ? curve : reverseCurve;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> t = parent.value;</span><br><span class="line">    <span class="keyword">if</span> (activeCurve == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0.0</span> || t == <span class="number">1.0</span>) &#123;</span><br><span class="line">      <span class="keyword">assert</span>(() &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">double</span> transformedValue = activeCurve.transform(t);</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">double</span> roundedTransformedValue = transformedValue.round().toDouble();</span><br><span class="line">        <span class="keyword">if</span> (roundedTransformedValue != t) &#123;</span><br><span class="line">          <span class="keyword">throw</span> FlutterError(</span><br><span class="line">            <span class="string">'Invalid curve endpoint at <span class="subst">$t</span>.\n'</span></span><br><span class="line">            <span class="string">'Curves must map 0.0 to near zero and 1.0 to near one but '</span></span><br><span class="line">            <span class="string">'<span class="subst">$&#123;activeCurve.runtimeType&#125;</span> mapped <span class="subst">$t</span> to <span class="subst">$transformedValue</span>, which '</span></span><br><span class="line">            <span class="string">'is near <span class="subst">$roundedTransformedValue</span>.'</span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;());</span><br><span class="line">      <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> activeCurve.transform(t);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (reverseCurve == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'<span class="subst">$parent</span>\u27A9<span class="subst">$curve<span class="string">';</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    if (_useForwardCurve)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      return '</span></span><span class="subst">$parent</span>\u27A9<span class="subst">$curve</span>\u2092\u2099/<span class="subst">$reverseCurve<span class="string">';</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    return '</span></span><span class="subst">$parent</span>\u27A9<span class="subst">$curve</span>/<span class="subst">$reverseCurve</span>\u2092\u2099'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  对于CurveAnimation我们可以直接使用构造方法来指定父controller和想要实现的curve</p><h2 id="AnimationController"><a href="#AnimationController" class="headerlink" title="AnimationController"></a>AnimationController</h2><p>  用来实现动画的控制器，它包含动画的启动forward()、停止stop() 、反向播放 reverse()等方法。AnimationController会在动画的每一帧，就会生成一个新的值。默认情况下，AnimationController在给定的时间段内线性的生成从0.0到1.0（默认区间）的数字。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">AnimationController(&#123;</span><br><span class="line">  <span class="built_in">double</span> value,</span><br><span class="line">  <span class="comment">// 接受一个Duration对象，可以设置持续时间</span></span><br><span class="line">  <span class="keyword">this</span>.duration,</span><br><span class="line">  <span class="keyword">this</span>.debugLabel,</span><br><span class="line">  <span class="comment">// 设置动画值最低</span></span><br><span class="line">  <span class="keyword">this</span>.lowerBound = <span class="number">0.0</span>,</span><br><span class="line">  <span class="comment">// 设置最高</span></span><br><span class="line">  <span class="keyword">this</span>.upperBound = <span class="number">1.0</span>,</span><br><span class="line">  <span class="keyword">this</span>.animationBehavior = AnimationBehavior.normal,</span><br><span class="line">  <span class="meta">@required</span> TickerProvider vsync,</span><br><span class="line">&#125;) : <span class="keyword">assert</span>(lowerBound != <span class="keyword">null</span>),</span><br><span class="line">     <span class="keyword">assert</span>(upperBound != <span class="keyword">null</span>),</span><br><span class="line">     <span class="keyword">assert</span>(upperBound &gt;= lowerBound),</span><br><span class="line">     <span class="keyword">assert</span>(vsync != <span class="keyword">null</span>),</span><br><span class="line">     _direction = _AnimationDirection.forward &#123;</span><br><span class="line">  _ticker = vsync.createTicker(_tick);</span><br><span class="line">  _internalSetValue(value ?? lowerBound);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ticker"><a href="#Ticker" class="headerlink" title="Ticker"></a>Ticker</h2><p>  当创建一个AnimationController时，需要传递一个vsync参数，它接收一个TickerProvider类型的对象，它的主要职责是创建Ticker，定义如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TickerProvider</span> </span>&#123;</span><br><span class="line">  <span class="comment">//通过一个回调创建一个Ticker</span></span><br><span class="line">  Ticker createTicker(TickerCallback onTick);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  Flutter应用在启动时都会绑定一个SchedulerBinding，通过SchedulerBinding可以给每一次屏幕刷新添加回调，而Ticker就是通过SchedulerBinding来添加屏幕刷新回调，这样一来，每次屏幕刷新都会调用TickerCallback。使用Ticker(而不是Timer)来驱动动画会防止屏幕外动画（动画的UI不在当前屏幕时，如锁屏时）消耗不必要的资源，因为Flutter中屏幕刷新时会通知到绑定的SchedulerBinding，而Ticker是受SchedulerBinding驱动的，由于锁屏后屏幕会停止刷新，所以Ticker就不会再触发。</p><p>  通过将SingleTickerProviderStateMixin添加到State的定义中，然后将State对象作为vsync的值，这在后面的例子中可以见到。</p><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><p>  这里我们实现一个Icon通过动画的值来变化大小和颜色的动画</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimateLove</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimateLoveState createState() =&gt; _AnimateLoveState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimateLoveState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimateLove</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来保存动画的插值</span></span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _animation;</span><br><span class="line">  <span class="comment">// 动画的控制器</span></span><br><span class="line">  AnimationController _animationController;</span><br><span class="line">  <span class="comment">// 动画实现曲线效果</span></span><br><span class="line">  CurvedAnimation _curvedAnimation;</span><br><span class="line">  <span class="comment">// 用来保存动画的值(这里则是Color)</span></span><br><span class="line">  Animation&lt;Color&gt; _colorTween;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 首先初始化动画控制器</span></span><br><span class="line">    <span class="comment">// 这个类需要with一个TickerProviderStateMixin</span></span><br><span class="line">    <span class="comment">// 这个类提供一个this实现动画的垂直同步</span></span><br><span class="line">    _animationController = AnimationController(</span><br><span class="line">      <span class="comment">// 接受一个Duration，可以设置动画的持续时间</span></span><br><span class="line">      duration: <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      <span class="comment">// 设置垂直同步</span></span><br><span class="line">      vsync: <span class="keyword">this</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 初始化一个动画曲线</span></span><br><span class="line">    <span class="comment">// 接受一个parent参数，这个是指定需要实现这个curve曲线的相应的动画控制器</span></span><br><span class="line">    <span class="comment">// 接受的curve参数是具体实现了什么curve</span></span><br><span class="line">    _curvedAnimation = CurvedAnimation(parent: _animationController, curve: Curves.fastLinearToSlowEaseIn);</span><br><span class="line">    <span class="comment">// Tween用来设置动画的插值</span></span><br><span class="line">    <span class="comment">// 并且使用animate方法(参数是用来接受这个范围值的父Animation，通常为CurveAnimation)用来将范围值保存到一个Animation对象中</span></span><br><span class="line">    _colorTween = ColorTween(begin: Colors.red[<span class="number">200</span>], end: Colors.red[<span class="number">800</span>]).animate(_curvedAnimation);</span><br><span class="line">    <span class="comment">// 这里也是设置一个动画保存值，这里是double</span></span><br><span class="line">    _animation = Tween(begin: <span class="number">0.0</span>, end: <span class="number">100.0</span>).animate(_curvedAnimation)</span><br><span class="line">    <span class="comment">// 添加监听器，变化的时候重新设置UI渲染</span></span><br><span class="line">    ..addListener(()&#123;</span><br><span class="line">      setState(() &#123;&#125;);</span><br><span class="line">    <span class="comment">// 增加状态监听器，这里接受一个带status状态参数的一个方法</span></span><br><span class="line">    &#125;)..addStatusListener((status)&#123;</span><br><span class="line">      <span class="comment">// 这里实现的主要功能就是判断动画是否结束，结束就方向播放动画</span></span><br><span class="line">      <span class="keyword">if</span>(status == AnimationStatus.completed) &#123;</span><br><span class="line">        _animationController.reverse();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == AnimationStatus.dismissed) &#123;</span><br><span class="line">        _animationController.forward();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化设置动画向前开始</span></span><br><span class="line">    _animationController.forward();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">// 销毁 减少资源浪费</span></span><br><span class="line">    _animationController.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Icon(</span><br><span class="line">        Icons.favorite,</span><br><span class="line">        <span class="comment">// 将数值赋给size</span></span><br><span class="line">        size: _animation.value,</span><br><span class="line">        <span class="comment">// 将color赋值给color</span></span><br><span class="line">        color: _colorTween.value,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;动画概述&quot;&gt;&lt;a href=&quot;#动画概述&quot; class=&quot;headerlink&quot; title=&quot;动画概述&quot;&gt;&lt;/a&gt;动画概述&lt;/h2&gt;&lt;p&gt;  对于任何UI框架，实现动画的原理都是一样的，通过画面在短时间内的变化形成动画，基本上人眼对30帧以上的动画的感受就是极限
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——表单组件</title>
    <link href="https://francisqiang.github.io/2019/06/19/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/"/>
    <id>https://francisqiang.github.io/2019/06/19/Flutter组件——表单组件/</id>
    <published>2019-06-19T13:14:52.000Z</published>
    <updated>2019-06-19T13:37:19.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h2><p>  在Flutter中TextField是最重要的一个表单组件，它是定义输入框，密码框以及textarea。</p><p>  其中有几个重要的属性</p><ul><li><p>maxLines</p><p>最大行数接受一个int，当这个设置为1时，就是我们平常的文本框了，你可以把它设置成更大，然后让它变成一个textarea。</p></li><li><p>onChanged</p><p>接受一个函数，函数中传入一个当前文本框值的参数，通过这个我们可以在文本框值改变的时候设置我们的值。</p></li><li><p>decoration</p><p>设置文本框的样式，接受一个InputDecoration对象，这个对象中的属性用来设置当前文本框的样式属性，比如说hintText类似于html的placeholder，labelText设置标签的文本，labelStyle设置标签文本文字样式(跟TextStyle用法一样), border设置文本框边框，我们可以传入一个OutlineInputBorder等。</p></li><li><p>obscureText</p><p>是否设置为密码框，默认为false，设置为true的时候就是密码框。</p></li><li><p>controller</p><p>接受一个TextEditController，我们可以在组件初始化的时候创建一个关于当前文本框的TextEditController，然后我们通过addListener函数来监听当前文本框的变化，它的作用比onChanged还要大。</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TextField(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.controller,</span><br><span class="line">    <span class="keyword">this</span>.focusNode,</span><br><span class="line">    <span class="keyword">this</span>.decoration = <span class="keyword">const</span> InputDecoration(),</span><br><span class="line">    TextInputType keyboardType,</span><br><span class="line">    <span class="keyword">this</span>.textInputAction,</span><br><span class="line">    <span class="keyword">this</span>.textCapitalization = TextCapitalization.none,</span><br><span class="line">    <span class="keyword">this</span>.style,</span><br><span class="line">    <span class="keyword">this</span>.strutStyle,</span><br><span class="line">    <span class="keyword">this</span>.textAlign = TextAlign.start,</span><br><span class="line">    <span class="keyword">this</span>.textDirection,</span><br><span class="line">    <span class="keyword">this</span>.autofocus = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.obscureText = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.autocorrect = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.maxLines = <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">this</span>.minLines,</span><br><span class="line">    <span class="keyword">this</span>.expands = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.maxLength,</span><br><span class="line">    <span class="keyword">this</span>.maxLengthEnforced = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.onChanged,</span><br><span class="line">    <span class="keyword">this</span>.onEditingComplete,</span><br><span class="line">    <span class="keyword">this</span>.onSubmitted,</span><br><span class="line">    <span class="keyword">this</span>.inputFormatters,</span><br><span class="line">    <span class="keyword">this</span>.enabled,</span><br><span class="line">    <span class="keyword">this</span>.cursorWidth = <span class="number">2.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.cursorRadius,</span><br><span class="line">    <span class="keyword">this</span>.cursorColor,</span><br><span class="line">    <span class="keyword">this</span>.keyboardAppearance,</span><br><span class="line">    <span class="keyword">this</span>.scrollPadding = <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">    <span class="keyword">this</span>.dragStartBehavior = DragStartBehavior.start,</span><br><span class="line">    <span class="keyword">this</span>.enableInteractiveSelection,</span><br><span class="line">    <span class="keyword">this</span>.onTap,</span><br><span class="line">    <span class="keyword">this</span>.buildCounter,</span><br><span class="line">    <span class="keyword">this</span>.scrollPhysics,</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(textAlign != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(autofocus != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(obscureText != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(autocorrect != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(maxLengthEnforced != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(scrollPadding != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(dragStartBehavior != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(maxLines == <span class="keyword">null</span> || maxLines &gt; <span class="number">0</span>),</span><br><span class="line">       <span class="keyword">assert</span>(minLines == <span class="keyword">null</span> || minLines &gt; <span class="number">0</span>),</span><br><span class="line">       <span class="keyword">assert</span>(</span><br><span class="line">         (maxLines == <span class="keyword">null</span>) || (minLines == <span class="keyword">null</span>) || (maxLines &gt;= minLines),</span><br><span class="line">         <span class="string">'minLines can\'t be greater than maxLines'</span>,</span><br><span class="line">       ),</span><br><span class="line">       <span class="keyword">assert</span>(expands != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(</span><br><span class="line">         !expands || (maxLines == <span class="keyword">null</span> &amp;&amp; minLines == <span class="keyword">null</span>),</span><br><span class="line">         <span class="string">'minLines and maxLines must be null when expands is true.'</span>,</span><br><span class="line">       ),</span><br><span class="line">       <span class="keyword">assert</span>(maxLength == <span class="keyword">null</span> || maxLength == TextField.noMaxLength || maxLength &gt; <span class="number">0</span>),</span><br><span class="line">       keyboardType = keyboardType ?? (maxLines == <span class="number">1</span> ? TextInputType.text : TextInputType.multiline),</span><br><span class="line">       <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><h2 id="Checkbox-CheckboxListTile多选框组件"><a href="#Checkbox-CheckboxListTile多选框组件" class="headerlink" title="Checkbox,CheckboxListTile多选框组件"></a>Checkbox,CheckboxListTile多选框组件</h2><h3 id="Checkbox常见属性"><a href="#Checkbox常见属性" class="headerlink" title="Checkbox常见属性"></a>Checkbox常见属性</h3><ul><li><p>value</p><p>当前多选框的值，设置成true或者false。</p></li><li><p>onChanged</p><p>在多选框的值被改变的时候调用的函数</p></li><li><p>activeColor</p><p>选中的背景颜色</p></li><li><p>checkColor</p><p>选中的√的颜色</p></li></ul><h3 id="CheckboxListTile"><a href="#CheckboxListTile" class="headerlink" title="CheckboxListTile"></a>CheckboxListTile</h3><p>  checkboxListTile是类似于ListTile的多选框，其中也可以像ListTile中定义title，subtitle等。</p><ul><li><p>value</p><p>当前多选框的值，设置成true或者false</p></li><li><p>onChanged</p><p>改变的时候接受的函数</p></li><li><p>title， subtitle</p><p>标题</p></li><li><p>secondary</p><p>在前面设置图片或者图片</p></li><li><p>selected</p><p>选中的时候是否文字颜色跟着改变</p></li></ul><h2 id="Radio，RadioListTile"><a href="#Radio，RadioListTile" class="headerlink" title="Radio，RadioListTile"></a>Radio，RadioListTile</h2><p>  Radio和checkbox差不多，主要就是一个groupValue。</p><p>  radio中有一个value是定义当前单选按钮的value，还有一个是groupValue是定义当前单选按钮对应的组的值。其他属性和checkbox差不多，同理RadioListTile也和checkboxListTile也差不多。</p><h2 id="Demo代码示例"><a href="#Demo代码示例" class="headerlink" title="Demo代码示例"></a>Demo代码示例</h2><p><img src="/2019/06/19/Flutter组件——表单组件/1.jpg" alt="demo样式"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Form App'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      theme: ThemeData(primarySwatch: Colors.green),</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        resizeToAvoidBottomPadding: <span class="keyword">false</span>,</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'Form'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: MyForm(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyFormState createState() =&gt; _MyFormState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyFormState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyForm</span>&gt; </span>&#123;</span><br><span class="line">  TextEditingController _usernameController = TextEditingController();</span><br><span class="line">  TextEditingController _passwordController = TextEditingController();</span><br><span class="line">  TextEditingController _informationController = TextEditingController();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> _checkBool = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> _switchBool = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> _groupValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _usernameController.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_usernameController.text);</span><br><span class="line">    &#125;);</span><br><span class="line">    _passwordController.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_usernameController.text);</span><br><span class="line">    &#125;);</span><br><span class="line">    _informationController.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_usernameController.text);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        margin:</span><br><span class="line">            EdgeInsets.only(left: <span class="number">20.0</span>, right: <span class="number">20.0</span>),</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">        height: <span class="number">750.0</span>,</span><br><span class="line">        width: <span class="number">550.0</span>,</span><br><span class="line">        child: Card(</span><br><span class="line">            color: Colors.green[<span class="number">200</span>],</span><br><span class="line">            shape: RoundedRectangleBorder(</span><br><span class="line">              borderRadius: BorderRadius.circular(<span class="number">50.0</span>),</span><br><span class="line">            ),</span><br><span class="line">            child: Padding(</span><br><span class="line">              padding: EdgeInsets.only(left: <span class="number">20.0</span>, right: <span class="number">20.0</span>),</span><br><span class="line">              child: Column(</span><br><span class="line">                mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    height: <span class="number">20.0</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  Container(</span><br><span class="line">                    child: Text(<span class="string">'Login'</span>,</span><br><span class="line">                        textScaleFactor: <span class="number">2.5</span>, textAlign: TextAlign.center),</span><br><span class="line">                  ),</span><br><span class="line">                  TextField(</span><br><span class="line">                    controller: <span class="keyword">this</span>._usernameController,</span><br><span class="line">                    maxLines: <span class="number">1</span>,</span><br><span class="line">                    onChanged: (username) &#123;</span><br><span class="line">                      <span class="built_in">print</span>(username);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    decoration: InputDecoration(</span><br><span class="line">                        hintText: <span class="string">'username'</span>,</span><br><span class="line">                        labelText: <span class="string">'username'</span>,</span><br><span class="line">                        icon: Icon(Icons.person)),</span><br><span class="line">                  ),</span><br><span class="line">                  TextField(</span><br><span class="line">                    controller: <span class="keyword">this</span>._passwordController,</span><br><span class="line">                    maxLines: <span class="number">1</span>,</span><br><span class="line">                    onChanged: (password) =&gt; debugPrint(password),</span><br><span class="line">                    decoration: InputDecoration(</span><br><span class="line">                      hintText: <span class="string">'code'</span>,</span><br><span class="line">                      labelText: <span class="string">'code'</span>,</span><br><span class="line">                      icon: Icon(Icons.message),</span><br><span class="line">                    ),</span><br><span class="line">                    obscureText: <span class="keyword">true</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    height: <span class="number">30.0</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  TextField(</span><br><span class="line">                    controller: <span class="keyword">this</span>._informationController,</span><br><span class="line">                    maxLines: <span class="number">1</span>,</span><br><span class="line">                    onChanged: (content) &#123;</span><br><span class="line">                      debugPrint(content);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    decoration: InputDecoration(</span><br><span class="line">                        hintText: <span class="string">'please input your information here'</span>,</span><br><span class="line">                        border: OutlineInputBorder(</span><br><span class="line">                            borderSide: BorderSide(</span><br><span class="line">                                color: Colors.purple,</span><br><span class="line">                                width: <span class="number">1.5</span>,</span><br><span class="line">                                style: BorderStyle.solid))),</span><br><span class="line">                  ),</span><br><span class="line">                  Row(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      Text(<span class="string">'remember'</span>),</span><br><span class="line">                      Checkbox(value: <span class="keyword">this</span>._checkBool, onChanged: (value) &#123;</span><br><span class="line">                        setState(() &#123;</span><br><span class="line">                          <span class="keyword">this</span>._checkBool = value;</span><br><span class="line">                          <span class="built_in">print</span>(value);</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;, checkColor: Colors.indigo,),</span><br><span class="line">                      Text(<span class="string">'remember'</span>),</span><br><span class="line">                      Expanded(</span><br><span class="line">                        child: Switch(value: <span class="keyword">this</span>._switchBool, onChanged: (value)&#123;</span><br><span class="line">                          setState(() &#123;</span><br><span class="line">                            <span class="keyword">this</span>._switchBool = value;</span><br><span class="line">                          &#125;);</span><br><span class="line">                        &#125;,activeColor: Colors.indigo,),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                  CheckboxListTile(</span><br><span class="line">                    title: Text(<span class="string">'checktile'</span>),</span><br><span class="line">                    subtitle: Text(<span class="string">'this is CheckBoxListTile'</span>),</span><br><span class="line">                    secondary: Icon(Icons.album),</span><br><span class="line">                    value: <span class="keyword">this</span>._checkBool,</span><br><span class="line">                    onChanged: ((value)&#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        <span class="keyword">this</span>._checkBool = value;</span><br><span class="line">                      &#125;);</span><br><span class="line">                    &#125;),</span><br><span class="line">                    selected: <span class="keyword">true</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  Row(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      Text(<span class="string">'male'</span>),</span><br><span class="line">                      Radio(value: <span class="number">0</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                        setState(() &#123;</span><br><span class="line">                          <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;, activeColor: Colors.red,),</span><br><span class="line">                      Text(<span class="string">'female'</span>),</span><br><span class="line">                      Radio(value: <span class="number">1</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                        setState(() &#123;</span><br><span class="line">                          <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;)</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                  RadioListTile(value: <span class="number">0</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;, title: Text(<span class="string">'female'</span>), subtitle: Text(<span class="string">'this is female radio'</span>)),</span><br><span class="line">                  RadioListTile(value: <span class="number">1</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;, title: Text(<span class="string">'female'</span>), subtitle: Text(<span class="string">'this is female radio'</span>),),</span><br><span class="line">                  Container(</span><br><span class="line">                    height: <span class="number">50.0</span>,</span><br><span class="line">                    width: <span class="number">150.0</span>,</span><br><span class="line">                    child: RaisedButton(</span><br><span class="line">                      shape: RoundedRectangleBorder(</span><br><span class="line">                        borderRadius: BorderRadius.circular(<span class="number">50.0</span>),</span><br><span class="line">                      ),</span><br><span class="line">                      color: Colors.blue,</span><br><span class="line">                      onPressed: () &#123;</span><br><span class="line">                        <span class="keyword">if</span> (_usernameController.text == <span class="string">'francisqiang'</span> &amp;&amp;</span><br><span class="line">                            _passwordController.text == <span class="string">'123456'</span> &amp;&amp;</span><br><span class="line">                            _informationController.text != <span class="string">''</span>) &#123;</span><br><span class="line">                          <span class="built_in">print</span>(<span class="string">'success'</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          <span class="built_in">print</span>(<span class="string">'fail'</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      child: Text(</span><br><span class="line">                        <span class="string">'Sign In'</span>,</span><br><span class="line">                        textScaleFactor: <span class="number">2.0</span>,</span><br><span class="line">                        style: TextStyle(</span><br><span class="line">                            color: Colors.cyanAccent,</span><br><span class="line">                            fontWeight: FontWeight.bold),</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            )),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TextField&quot;&gt;&lt;a href=&quot;#TextField&quot; class=&quot;headerlink&quot; title=&quot;TextField&quot;&gt;&lt;/a&gt;TextField&lt;/h2&gt;&lt;p&gt;  在Flutter中TextField是最重要的一个表单组件，它是定义输入框，密码
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——侧边栏Drawer</title>
    <link href="https://francisqiang.github.io/2019/06/17/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94%E4%BE%A7%E8%BE%B9%E6%A0%8FDrawer/"/>
    <id>https://francisqiang.github.io/2019/06/17/Flutter组件——侧边栏Drawer/</id>
    <published>2019-06-17T13:40:23.000Z</published>
    <updated>2019-06-17T14:12:52.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Drawer"><a href="#Drawer" class="headerlink" title="Drawer"></a>Drawer</h2><p>  在Flutter中的Scaffold中有一个drawe属性，这个属性是定义页面的左边滑动抽屉的。如果我们没有在AppBar中设置自己的leading属性(控制左边的按钮)，Flutter会默认给我配置它自己的按钮。</p><p>  我们可以首先查看一下Drawer中的构造函数源代码。</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Drawer(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.elevation = <span class="number">16.0</span>,</span><br><span class="line">  <span class="keyword">this</span>.child,</span><br><span class="line">  <span class="keyword">this</span>.semanticLabel,</span><br><span class="line">&#125;) : <span class="keyword">assert</span>(elevation != <span class="keyword">null</span> &amp;&amp; elevation &gt;= <span class="number">0.0</span>),</span><br><span class="line">     <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><ul><li><p>elevation</p><p>控制z轴阴影效果，接受一个double。</p></li><li><p>child</p><p>子元素，里面通常存放一个Container再嵌套一个ListView。</p></li><li><p>semanticLabel</p><p>语意标签，目前还不知道做什么的。</p></li></ul><h2 id="DrawerHearder"><a href="#DrawerHearder" class="headerlink" title="DrawerHearder"></a>DrawerHearder</h2><p>源代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DrawerHeader(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.decoration,</span><br><span class="line">    <span class="keyword">this</span>.margin = <span class="keyword">const</span> EdgeInsets.only(bottom: <span class="number">8.0</span>),</span><br><span class="line">    <span class="keyword">this</span>.padding = <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">16.0</span>, <span class="number">16.0</span>, <span class="number">16.0</span>, <span class="number">8.0</span>),</span><br><span class="line">    <span class="keyword">this</span>.duration = <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">250</span>),</span><br><span class="line">    <span class="keyword">this</span>.curve = Curves.fastOutSlowIn,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><p>其中decoration用来设置容器的样式装饰，比如形状，颜色等。margin和padding是用来设置边距的，后面的duration和curve是动画内容，现在我还弄清楚怎么用。</p><h2 id="UserAccountsDrawerHeader"><a href="#UserAccountsDrawerHeader" class="headerlink" title="UserAccountsDrawerHeader"></a>UserAccountsDrawerHeader</h2><p>  如果我们想快速构建个人信息页面的话我们可以直接使用UserAccountDrawerHeader，这个类替我们封装了DrawerHeader，我们可以查看它的源代码。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserAccountsDrawerHeader(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.decoration,</span><br><span class="line">    <span class="keyword">this</span>.margin = <span class="keyword">const</span> EdgeInsets.only(bottom: <span class="number">8.0</span>),</span><br><span class="line">    <span class="keyword">this</span>.currentAccountPicture,</span><br><span class="line">    <span class="keyword">this</span>.otherAccountsPictures,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.accountName,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.accountEmail,</span><br><span class="line">    <span class="keyword">this</span>.onDetailsPressed,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><p>我们查看它的build方法就可以知道其中它使用了Drawer</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">assert</span>(debugCheckHasMaterial(context));</span><br><span class="line">  <span class="keyword">assert</span>(debugCheckHasMaterialLocalizations(context));</span><br><span class="line">  <span class="keyword">return</span> Semantics(</span><br><span class="line">    container: <span class="keyword">true</span>,</span><br><span class="line">    label: MaterialLocalizations.of(context).signedInLabel,</span><br><span class="line">    child: DrawerHeader(</span><br><span class="line">      decoration: widget.decoration ?? BoxDecoration(</span><br><span class="line">        color: Theme.of(context).primaryColor,</span><br><span class="line">      ),</span><br><span class="line">      margin: widget.margin,</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsetsDirectional.only(top: <span class="number">16.0</span>, start: <span class="number">16.0</span>),</span><br><span class="line">      child: SafeArea(</span><br><span class="line">        bottom: <span class="keyword">false</span>,</span><br><span class="line">        child: Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Expanded(</span><br><span class="line">              child: Padding(</span><br><span class="line">                padding: <span class="keyword">const</span> EdgeInsetsDirectional.only(end: <span class="number">16.0</span>),</span><br><span class="line">                child: _AccountPictures(</span><br><span class="line">                  currentAccountPicture: widget.currentAccountPicture,</span><br><span class="line">                  otherAccountsPictures: widget.otherAccountsPictures,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            _AccountDetails(</span><br><span class="line">              accountName: widget.accountName,</span><br><span class="line">              accountEmail: widget.accountEmail,</span><br><span class="line">              isOpen: _isOpen,</span><br><span class="line">              onTap: widget.onDetailsPressed == <span class="keyword">null</span> ? <span class="keyword">null</span> : _handleDetailsPressed,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先来看一下UserAccountDrawer中的属性</p><ul><li><p>decoration</p><p>盒子装饰属性</p></li><li><p>margin</p><p>边距</p></li><li><p>currentAccountPricture</p><p>当前用户的头像</p></li><li><p>otherAccountPicture</p><p>其他用户的头像，放在当前头像的右边。</p></li><li><p>accountName，accountEmail</p><p>用户的名字和邮箱。</p></li></ul><h2 id="Drawer的代码示例"><a href="#Drawer的代码示例" class="headerlink" title="Drawer的代码示例"></a>Drawer的代码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Drawer(</span><br><span class="line">          elevation: <span class="number">200.0</span>,</span><br><span class="line">          child: Container(</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              child: ListView(</span><br><span class="line">                padding: EdgeInsets.zero,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  UserAccountsDrawerHeader(</span><br><span class="line">                    accountName: Text(<span class="string">'FrancisQiang'</span>, style: TextStyle(fontWeight: FontWeight.bold, fontSize: <span class="number">30.0</span>),),</span><br><span class="line">                    accountEmail: Text(<span class="string">'2487049041@qq.com'</span>),</span><br><span class="line">                    currentAccountPicture: CircleAvatar(</span><br><span class="line">                      backgroundImage: NetworkImage(<span class="string">'https://francisqiang.github.io/images/avatar.gif'</span>),</span><br><span class="line">                    ),</span><br><span class="line">                    decoration: BoxDecoration(</span><br><span class="line">                      image: DecorationImage(</span><br><span class="line">                          image: NetworkImage(<span class="string">'https://francisqiang.github.io/2019/06/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94Trie/10.jpg'</span>),</span><br><span class="line">                          fit: BoxFit.cover,</span><br><span class="line">                          colorFilter: ColorFilter.mode(</span><br><span class="line">                              Colors.purple.withOpacity(<span class="number">0.3</span>),</span><br><span class="line">                              BlendMode.srcOver</span><br><span class="line">                          )</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  ListTile(</span><br><span class="line">                    title: Text(<span class="string">'Message'</span>, textAlign: TextAlign.right,),</span><br><span class="line">                    trailing: Icon(Icons.message, color: Colors.blueAccent, size: <span class="number">25.0</span>,),</span><br><span class="line">                  ),</span><br><span class="line">                  ListTile(</span><br><span class="line">                    title: Text(<span class="string">'Favorite'</span>, textAlign: TextAlign.right,),</span><br><span class="line">                    trailing: Icon(Icons.favorite, color: Colors.red, size: <span class="number">25.0</span>,),</span><br><span class="line">                  ),</span><br><span class="line">                  ListTile(</span><br><span class="line">                    title: Text(<span class="string">'Setting'</span>, textAlign: TextAlign.right,),</span><br><span class="line">                    trailing: Icon(Icons.settings,color: Colors.black87, size: <span class="number">25.0</span>,),</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              )</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Drawer&quot;&gt;&lt;a href=&quot;#Drawer&quot; class=&quot;headerlink&quot; title=&quot;Drawer&quot;&gt;&lt;/a&gt;Drawer&lt;/h2&gt;&lt;p&gt;  在Flutter中的Scaffold中有一个drawe属性，这个属性是定义页面的左边滑动抽屉的。如果我们
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter中的底部导航和顶部导航</title>
    <link href="https://francisqiang.github.io/2019/06/14/Flutter%E4%B8%AD%E7%9A%84%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E5%92%8C%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA/"/>
    <id>https://francisqiang.github.io/2019/06/14/Flutter中的底部导航和顶部导航/</id>
    <published>2019-06-14T12:51:55.000Z</published>
    <updated>2019-06-14T14:00:04.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BottomNavigatorBar"><a href="#BottomNavigatorBar" class="headerlink" title="BottomNavigatorBar"></a>BottomNavigatorBar</h2><p>  Flutter中实现底部导航需要在Scaffold脚手架中赋值bottomNavigationBar参数，这个参数接受一个Widget，一般我们直接赋值BottomNavigationBar对象。</p><p>  其中有几个参数比较重要</p><ul><li><p>currentIndex</p><p>当前item元素的索引</p></li><li><p>onTap</p><p>当点击的时候触发的函数</p></li><li><p>items</p><p>存放路由导航的的按钮(小部件)。</p><p>需要注意的是整个脚手架需要放置在动态组件中。</p></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScaffold</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyScaffoldState createState() =&gt; _MyScaffoldState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyScaffoldState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyScaffold</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _currentIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义导航切换的路由</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _tabsWidget = [TabControllerPage(), MyMessage(), MySetting()];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> DefaultTabController(</span><br><span class="line">      length: <span class="number">2</span>,</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          centerTitle: <span class="keyword">true</span>,</span><br><span class="line">          title: Text(<span class="string">'Tab Demo'</span>),</span><br><span class="line">          leading: IconButton(icon: Icon(Icons.favorite), onPressed: () &#123;&#125;),</span><br><span class="line">        ),</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          currentIndex: <span class="keyword">this</span>._currentIndex,</span><br><span class="line">          <span class="comment">// 触发重构页面</span></span><br><span class="line">          onTap: (index) =&gt; setState(() =&gt; <span class="keyword">this</span>._currentIndex = index),</span><br><span class="line">          items: [</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(Icons.home), title: Text(<span class="string">'home'</span>)),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(Icons.message), title: Text(<span class="string">'message'</span>)),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(Icons.settings), title: Text(<span class="string">'settings'</span>))</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        body: _tabsWidget[<span class="keyword">this</span>._currentIndex],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TabBar"><a href="#TabBar" class="headerlink" title="TabBar"></a>TabBar</h2><p>  TabBar是用来实现顶部滑动导航的。我们可以放置在脚手架中appBar中的bottom中。</p><p>  但最需要注意的是我们需要在脚手架外层嵌套一个DefaultTabController，我们必须要定义这个组件中的length属性，这是用来定义导航条的数目的。然后我们再bottom中定义一个TabBar，里面的tabs属性接受一个Widget数组，数组中存放导航条，然后我们可以在Scaffold中的body里面添加TabBarView，TabBarView里面有children属性，是用来存放导航的主页面的，所以我们这里DefaultTabController中的length属性和bottom中tabs中数组的长度还有这个children数组的长度，三者必须一样。</p><p>  其实这里就是在你想要实现顶部导航页面外层嵌套DefaultTabController并且定义长度，然后再里面定义TabBar和TabBarView，这个DefaultTabController用来对TabBar和TabBarView进行”连接”和监听。</p><h3 id="常规顶部导航代码示例"><a href="#常规顶部导航代码示例" class="headerlink" title="常规顶部导航代码示例"></a>常规顶部导航代码示例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScaffold</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyScaffoldState createState() =&gt; _MyScaffoldState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyScaffoldState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyScaffold</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> DefaultTabController(</span><br><span class="line">      length: <span class="number">2</span>,</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          centerTitle: <span class="keyword">true</span>,</span><br><span class="line">          title: Text(<span class="string">'Tab Demo'</span>),</span><br><span class="line">          leading: IconButton(icon: Icon(Icons.favorite), onPressed: () &#123;&#125;),</span><br><span class="line">          bottom: TabBar(</span><br><span class="line">            isScrollable: <span class="keyword">true</span>,</span><br><span class="line">            tabs: &lt;Widget&gt;[</span><br><span class="line">              Tab(</span><br><span class="line">                text: <span class="string">'hot'</span>,</span><br><span class="line">              ),</span><br><span class="line">              Tab(</span><br><span class="line">                text: <span class="string">'recommend'</span>,</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        body: TabBarView(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            ListView(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'111111'</span>),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'222222'</span>),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'333333'</span>),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">            ListView(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'111111'</span>),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'222222'</span>),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(<span class="string">'333333'</span>),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  如果我们页面里面已经有底层导航了，这时候我们就不同在appBar中的bottom属性中存放导航条了。</p><p>  比如你现在有三个底部导航路由，然后你在总的Scaffold中的appBar中添加顶部导航栏，这样就会使你的底部三个页面都存在这个顶部导航栏。</p><p>  如果你在另一个页面再次使用Scaffold构建子页面 你可以做在appBar的title中定义TabBar，appBar的title属性接受一个Widget，你可以将TabBar赋值给它。或者你可以在新建的脚手架中不使用appBar属性。</p><h2 id="自定义TabBar"><a href="#自定义TabBar" class="headerlink" title="自定义TabBar"></a>自定义TabBar</h2><p>  我们需要在一个动态组件中创建一个TabController 然后这个组件需要with(类似多继承)一个SingleTickerProviderStateMixin(用来设置TabController中的vsync垂直同步属性的)。然后我们这时候不需要使用DefaultTabController来嵌套组件了，我们只需要在TabBar和TabBarView组件中定义他们的Controller属性为我们的controller，当然我们需要在init组件的时候创建controller。</p><p>  使用自定义的好处就是我们可以监听controller的状态从而定制一些个性化的操作。</p><h3 id="自定义TabController代码"><a href="#自定义TabController代码" class="headerlink" title="自定义TabController代码"></a>自定义TabController代码</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppBardemoPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  AppBardemoPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  _AppBardemoPageState createState() =&gt; _AppBardemoPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AppBardemoPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AppBardemoPage</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  TabController _tabController;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _tabController.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _tabController = <span class="keyword">new</span> TabController(vsync: <span class="keyword">this</span>, length: <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 我们这时候可以添加监听器来实现自定义</span></span><br><span class="line">    _tabController.addLinstener(()&#123;</span><br><span class="line">        <span class="comment">// 获取控制器的一些值来改变一些UI组件</span></span><br><span class="line">        <span class="built_in">print</span>(_tabController.index);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'顶部 tab 切换'</span>), bottom: <span class="keyword">new</span> TabBar(</span><br><span class="line">        tabs: &lt;Widget&gt;[</span><br><span class="line">          <span class="keyword">new</span> Tab(</span><br><span class="line">            icon: <span class="keyword">new</span> Icon(Icons.directions_bike),), <span class="keyword">new</span> Tab(</span><br><span class="line">            icon: <span class="keyword">new</span> Icon(Icons.directions_boat),), <span class="keyword">new</span> Tab(</span><br><span class="line">            icon: <span class="keyword">new</span> Icon(Icons.directions_bus),),</span><br><span class="line">        ], controller: _tabController,),), body: <span class="keyword">new</span> TabBarView(</span><br><span class="line">      controller: _tabController, children: &lt;Widget&gt;[</span><br><span class="line">      <span class="keyword">new</span> Center(child: <span class="keyword">new</span> Text(<span class="string">'自行车'</span>)),</span><br><span class="line">      <span class="keyword">new</span> Center(child: <span class="keyword">new</span> Text(<span class="string">'船'</span>)),</span><br><span class="line">      <span class="keyword">new</span> Center(child: <span class="keyword">new</span> Text(<span class="string">'巴士'</span>)),</span><br><span class="line">    ],),);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BottomNavigatorBar&quot;&gt;&lt;a href=&quot;#BottomNavigatorBar&quot; class=&quot;headerlink&quot; title=&quot;BottomNavigatorBar&quot;&gt;&lt;/a&gt;BottomNavigatorBar&lt;/h2&gt;&lt;p&gt;  Flut
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter路由和路由传值</title>
    <link href="https://francisqiang.github.io/2019/06/12/Flutter%E8%B7%AF%E7%94%B1%E5%92%8C%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%80%BC/"/>
    <id>https://francisqiang.github.io/2019/06/12/Flutter路由和路由传值/</id>
    <published>2019-06-12T02:27:47.000Z</published>
    <updated>2019-06-12T04:12:47.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h2><p>  在Flutter中路由跳转是通过Navigator这个类进行操作的，它是一种堆栈的结构，主要有两个操作一个是push就是入栈操作，他会把当前页面放入栈顶并显示。还有一个就是pop，它会把当前页面进行出栈操作，并显示操作之后最上层的页面。</p><p>  使用的时候我们需要先将需要跳转的页面文件进行导入，然后使用Navigator.push(context,MaterialPageRoute()),进行跳转。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">RaisedButton(</span><br><span class="line"> child: Text(<span class="string">"跳转到搜索页面"</span>),</span><br><span class="line"></span><br><span class="line"> onPressed: ()&#123;</span><br><span class="line">  Navigator.of(context).push(MaterialPageRoute(</span><br><span class="line">      builder: (BuildContext  context)&#123;</span><br><span class="line">        <span class="keyword">return</span> SearchPage();</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;,</span><br><span class="line">color: Theme.of(context).accentColor,</span><br><span class="line">textTheme: ButtonTextTheme.primary</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>  当pop的时候</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RaisedButton(</span><br><span class="line"> child: Text(<span class="string">"跳转到搜索页面"</span>),</span><br><span class="line"></span><br><span class="line"> onPressed: ()&#123;</span><br><span class="line">  Navigator.of(context).pop();</span><br><span class="line">&#125;,</span><br><span class="line">color: Theme.of(context).accentColor,</span><br><span class="line">textTheme: ButtonTextTheme.primary</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>  当然Navigator.of(context).push(xxx),Navigator.of(context).pop(xxx)也可以直接使用Navigator.push(context,xxx)或者Navigator.pop(context),其实原理都差不多只是后者封装了前者。</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@optionalTypeArgs</span></span><br><span class="line"><span class="keyword">static</span> Future&lt;T&gt; push&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt;(BuildContext context, Route&lt;T&gt; route) &#123;</span><br><span class="line">  <span class="keyword">return</span> Navigator.of(context).push(route);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本路由传参"><a href="#基本路由传参" class="headerlink" title="基本路由传参"></a>基本路由传参</h2><p>  基本路由传参其实就是在需要传参的页面中的构造器加入需要传参的字段，然后通过构造器中的相应参数去传参。</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Navigator.push(context, MaterialPageRoute(builder: (context)&#123;</span><br><span class="line">  <span class="keyword">return</span> MyParam(title: <span class="string">'哈哈哈哈'</span>,);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>  构造器</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParam</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">MyParam(&#123;Key key, <span class="keyword">this</span>.title&#125;):<span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(<span class="string">'Test'</span>),</span><br><span class="line">    ),</span><br><span class="line">    body: Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        height: <span class="number">300.0</span>,</span><br><span class="line">        width: <span class="number">200.0</span>,</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">            color: Colors.amber</span><br><span class="line">        ),</span><br><span class="line">        child: Column(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(<span class="string">'<span class="subst">$title<span class="string">'),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            RaisedButton(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">              child: Text('</span></span>返回'</span>),</span><br><span class="line">              onPressed: ()&#123;</span><br><span class="line">                Navigator.pop(context);</span><br><span class="line">               &#125;,</span><br><span class="line">             )</span><br><span class="line">           ],</span><br><span class="line">         )</span><br><span class="line">       ),</span><br><span class="line">     ),</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  当我们需要返回数据的时候(pop操作)</p><p>  我们可以使用pop里面的result参数</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@optionalTypeArgs</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">bool</span> pop&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt;(BuildContext context, [ T result ]) &#123;</span><br><span class="line">  <span class="keyword">return</span> Navigator.of(context).pop&lt;T&gt;(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  注意我们push方法返回的是一个Future，我们可以直接使用.then方法接受参数</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Navigator.push&lt;<span class="built_in">String</span>&gt;(context, <span class="keyword">new</span> MaterialPageRoute(builder: (BuildContext context)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ThirdPage(title:<span class="string">"请输入昵称"</span>);</span><br><span class="line"></span><br><span class="line">&#125;)).then( (<span class="built_in">String</span> result)&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//处理代码</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>  命名路由有点类似于Vue中的路由，我们需要将使用到的路由注册到MaterialApp中的routes参数中，这个routes参数是一个map</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line"><span class="keyword">return</span> MaterialApp(</span><br><span class="line"> <span class="comment">// home:Tabs(),</span></span><br><span class="line"> initialRoute: <span class="string">'/'</span>, routes: &#123;</span><br><span class="line"> <span class="string">'/'</span>:(contxt)=&gt;Tabs(),</span><br><span class="line"> <span class="string">'/search'</span>:(contxt) =&gt;SearchPage(),</span><br><span class="line"> <span class="string">'/form'</span>: (context) =&gt; FormPage(),  </span><br><span class="line"> &#125;,</span><br><span class="line">  );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  initalRoute就是初始路由。</p><p>  然后我们就可以使用Navigator.pushNamed(context,routeName)这个方法进行跳转页面了。</p><h2 id="命名路由传参"><a href="#命名路由传参" class="headerlink" title="命名路由传参"></a>命名路由传参</h2><p>  命名路由传参主要借助于MaterialApp的onGeneratorRoute属性，这里面接受一个RouteFactory，其实返回的就是Route。</p><p>  我们首先要删除routes属性(必须要，不然无法使用)。然后我们自己定义一个route的map。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们需要在routes里面做些小变动，(context)需要变成(context,&#123;arguments&#125;)</span></span><br><span class="line">  <span class="comment">// 然后通过构造方法进行传参</span></span><br><span class="line">  <span class="keyword">final</span> routes=&#123;</span><br><span class="line">    <span class="string">'/'</span>:(context)=&gt;Tabs(),</span><br><span class="line">    <span class="string">'/form'</span>:(context)=&gt;FormPage(),</span><br><span class="line">    <span class="string">'/product'</span>:(context)=&gt;ProductPage(),</span><br><span class="line">    <span class="string">'/productinfo'</span>:(context,&#123;arguments&#125;)=&gt;ProductInfoPage(arguments:arguments),</span><br><span class="line">    <span class="string">'/search'</span>:(context,&#123;arguments&#125;)=&gt;SearchPage(arguments:arguments),</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      <span class="comment">// home:Tabs(),</span></span><br><span class="line">      initialRoute: <span class="string">'/'</span>, <span class="comment">//初始化的时候加载的路由</span></span><br><span class="line">      onGenerateRoute: (RouteSettings settings) &#123;</span><br><span class="line">        <span class="comment">// 统一处理</span></span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">String</span> name = settings.name;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">Function</span> pageContentBuilder = routes[name];</span><br><span class="line">        <span class="keyword">if</span> (pageContentBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (settings.arguments != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Route route = MaterialPageRoute(</span><br><span class="line">                builder: (context) =&gt;</span><br><span class="line">                    pageContentBuilder(context, arguments: settings.arguments));</span><br><span class="line">            <span class="keyword">return</span> route;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Route route = MaterialPageRoute(</span><br><span class="line">                builder: (context) =&gt;</span><br><span class="line">                    pageContentBuilder(context));</span><br><span class="line">            <span class="keyword">return</span> route;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  当然，我们的Navigator也需要变动</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由跳转</span></span><br><span class="line">Navigator.pushNamed(context, <span class="string">'/search'</span>,arguments: &#123;</span><br><span class="line">  <span class="string">"id"</span>:<span class="number">123</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>  这里我们需要增加argument参数(这是原本方法自带的参数)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本路由&quot;&gt;&lt;a href=&quot;#基本路由&quot; class=&quot;headerlink&quot; title=&quot;基本路由&quot;&gt;&lt;/a&gt;基本路由&lt;/h2&gt;&lt;p&gt;  在Flutter中路由跳转是通过Navigator这个类进行操作的，它是一种堆栈的结构，主要有两个操作一个是push就是
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——Stack，Card</title>
    <link href="https://francisqiang.github.io/2019/06/10/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Stack%EF%BC%8CCard/"/>
    <id>https://francisqiang.github.io/2019/06/10/Flutter组件——Stack，Card/</id>
    <published>2019-06-10T02:02:21.000Z</published>
    <updated>2019-06-10T02:40:10.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>  Stack也是一个布局组件，它用于有子组件堆叠的场景，而且当我们使用Positioned组进行辅助的时候我们可以是层叠效果变得非常灵活。</p><ul><li><h2 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h2><p>它接受一个AlignmentDirectional对象，它用于控制non-positioned组件在Stack组件中的位置。默认为topStart(左上角)</p></li><li><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>它接受一个Overflow对象，用于控制溢出部分的显示效果</p></li><li><h2 id="textDirection"><a href="#textDirection" class="headerlink" title="textDirection"></a>textDirection</h2><p>用于控制子组件排列方向，接受一个TextDirection对象有ltr，rtl这些值。</p></li><li><h2 id="fit"><a href="#fit" class="headerlink" title="fit"></a>fit</h2><p>用于控制如何设置non-positioned节点尺寸，默认为loose。接受一个StackFit对象，里面有loose，expand，passthrough三个枚举常量。</p></li><li><h2 id="children"><a href="#children" class="headerlink" title="children"></a>children</h2><p>放置子元素组件。其中可以放置positioned组件Positioned组件中有left，right，top，bottom，width，height等属性，上下左右用来控制在Stack的位置的，这个组件不受alignment属性的影响。</p></li><li><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Stack(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.alignment = AlignmentDirectional.topStart,</span><br><span class="line">  <span class="keyword">this</span>.textDirection,</span><br><span class="line">  <span class="keyword">this</span>.fit = StackFit.loose,</span><br><span class="line">  <span class="keyword">this</span>.overflow = Overflow.clip,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;) : <span class="keyword">super</span>(key: key, children: children);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Positioned(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.left,</span><br><span class="line">  <span class="keyword">this</span>.top,</span><br><span class="line">  <span class="keyword">this</span>.right,</span><br><span class="line">  <span class="keyword">this</span>.bottom,</span><br><span class="line">  <span class="keyword">this</span>.width,</span><br><span class="line">  <span class="keyword">this</span>.height,</span><br><span class="line">  <span class="meta">@required</span> Widget child,</span><br><span class="line">&#125;) : <span class="keyword">assert</span>(left == <span class="keyword">null</span> || right == <span class="keyword">null</span> || width == <span class="keyword">null</span>),</span><br><span class="line">     <span class="keyword">assert</span>(top == <span class="keyword">null</span> || bottom == <span class="keyword">null</span> || height == <span class="keyword">null</span>),</span><br><span class="line">     <span class="keyword">super</span>(key: key, child: child);</span><br></pre></td></tr></table></figure><h2 id="Card"><a href="#Card" class="headerlink" title="Card"></a>Card</h2><p>  这是一个容器组件，就是卡片的样子</p><ul><li><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Card(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.color,</span><br><span class="line">    <span class="keyword">this</span>.elevation,</span><br><span class="line">    <span class="keyword">this</span>.shape,</span><br><span class="line">    <span class="keyword">this</span>.borderOnForeground = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.margin,</span><br><span class="line">    <span class="keyword">this</span>.clipBehavior,</span><br><span class="line">    <span class="keyword">this</span>.child,</span><br><span class="line">    <span class="keyword">this</span>.semanticContainer = <span class="keyword">true</span>,</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(elevation == <span class="keyword">null</span> || elevation &gt;= <span class="number">0.0</span>),</span><br><span class="line">       <span class="keyword">assert</span>(borderOnForeground != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><ul><li><h2 id="color"><a href="#color" class="headerlink" title="color"></a>color</h2><p>接受一个Color对象，用来设置卡片的颜色。</p></li><li><h2 id="elevation"><a href="#elevation" class="headerlink" title="elevation"></a>elevation</h2><p>控制z轴的高度，就是阴影效果，接受一个double值。</p></li><li><h2 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h2><p>控制卡片的形状，接受一个shapeBorder对象，我们可以将RoundedRectangleBorder对象赋值给它，这是事项圆角卡片的对象。</p></li><li><h2 id="borderOnForeground"><a href="#borderOnForeground" class="headerlink" title="borderOnForeground"></a>borderOnForeground</h2><p>接受一个布尔值，默认为true，当设置为true的时候，边框渲染会在子元素前面，false就相反。</p></li><li><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p>用于控制外边距，接受一个EdgeInsetsGeometry对象。</p></li><li><h2 id="semanticContainer"><a href="#semanticContainer" class="headerlink" title="semanticContainer"></a>semanticContainer</h2><p>接受一个bool，将此标志设置为true将尝试将所有子语义合并到此节点中。将此标志设置为false会强制所有子语义节点显式。这是文档里面的解释，我不太理解，但是官方说当你子元素是多种类型的时候最好设置为false，其默认也是false。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Stack&quot;&gt;&lt;a href=&quot;#Stack&quot; class=&quot;headerlink&quot; title=&quot;Stack&quot;&gt;&lt;/a&gt;Stack&lt;/h2&gt;&lt;p&gt;  Stack也是一个布局组件，它用于有子组件堆叠的场景，而且当我们使用Positioned组进行辅助的时候我们可以
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——Row，Column</title>
    <link href="https://francisqiang.github.io/2019/06/09/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Row%EF%BC%8CColumn/"/>
    <id>https://francisqiang.github.io/2019/06/09/Flutter组件——Row，Column/</id>
    <published>2019-06-09T12:04:48.000Z</published>
    <updated>2019-06-09T12:42:03.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h2><p>  Row组件是一种很常见的布局组件，顾名思义就是水平一行的组件。它将里面的子组件排成一行，如果其子组件超出一行的范围，那么会报错。</p><ul><li><h2 id="mainAxisAlignment"><a href="#mainAxisAlignment" class="headerlink" title="mainAxisAlignment"></a>mainAxisAlignment</h2><p>Row组件分为两个方向，分别是主轴和副轴。mainAxisAlignment是控制子组件在主轴方向上的排列方式的。它接受一个MainAxisAlignment对象。</p><ul><li><p>center  设置主轴中心</p></li><li><p>end  放在主轴末尾</p></li><li><p>spaceAround  将主轴方向上的空白区域均分，使children之间的空白区域相等，但是首尾child的空白区域为1/2</p></li><li><p>spaceBetween  和spaceAround差不多，但是首尾children没有空隙</p></li><li><p>spaceEvenly  是children空白区域相等包括首尾部分。</p></li></ul></li><li><h2 id="mainAxisSize"><a href="#mainAxisSize" class="headerlink" title="mainAxisSize"></a>mainAxisSize</h2><p>它接受一个MainAxisAlignment对象，它决定了主轴方向上占有空间的值，默认是max。max是最大化主轴方向的可用空间，min则相反。</p></li><li><h2 id="crossAxisAlignment"><a href="#crossAxisAlignment" class="headerlink" title="crossAxisAlignment"></a>crossAxisAlignment</h2><p>它接受一个CrossAxisAlignment对象，控制的是在副轴上子元素排列的方式，其中有end，start，center等。</p></li><li><h2 id="verticalDirection"><a href="#verticalDirection" class="headerlink" title="verticalDirection"></a>verticalDirection</h2><p>它接受一个VerticalDirection对象，定义了children的摆放顺序(我也不是很了解)。</p><p>Row的构造函数源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  Row(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,</span><br><span class="line">  MainAxisSize mainAxisSize = MainAxisSize.max,</span><br><span class="line">  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,</span><br><span class="line">  TextDirection textDirection,</span><br><span class="line">  VerticalDirection verticalDirection = VerticalDirection.down,</span><br><span class="line">  TextBaseline textBaseline,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;) : <span class="keyword">super</span>(</span><br><span class="line">  children: children,</span><br><span class="line">  key: key,</span><br><span class="line">  direction: Axis.horizontal,</span><br><span class="line">  mainAxisAlignment: mainAxisAlignment,</span><br><span class="line">  mainAxisSize: mainAxisSize,</span><br><span class="line">  crossAxisAlignment: crossAxisAlignment,</span><br><span class="line">  textDirection: textDirection,</span><br><span class="line">  verticalDirection: verticalDirection,</span><br><span class="line">  textBaseline: textBaseline,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h2><p>  了解了Row组件之后Column组件就非常简单了，字面理解Column组件就是控制纵向的布局组件，其属性和Row非常类似，我们可以直接看构造方法的源代码</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  Column(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,</span><br><span class="line">  MainAxisSize mainAxisSize = MainAxisSize.max,</span><br><span class="line">  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,</span><br><span class="line">  TextDirection textDirection,</span><br><span class="line">  VerticalDirection verticalDirection = VerticalDirection.down,</span><br><span class="line">  TextBaseline textBaseline,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;) : <span class="keyword">super</span>(</span><br><span class="line">  children: children,</span><br><span class="line">  key: key,</span><br><span class="line">  direction: Axis.vertical,</span><br><span class="line">  mainAxisAlignment: mainAxisAlignment,</span><br><span class="line">  mainAxisSize: mainAxisSize,</span><br><span class="line">  crossAxisAlignment: crossAxisAlignment,</span><br><span class="line">  textDirection: textDirection,</span><br><span class="line">  verticalDirection: verticalDirection,</span><br><span class="line">  textBaseline: textBaseline,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Row&quot;&gt;&lt;a href=&quot;#Row&quot; class=&quot;headerlink&quot; title=&quot;Row&quot;&gt;&lt;/a&gt;Row&lt;/h2&gt;&lt;p&gt;  Row组件是一种很常见的布局组件，顾名思义就是水平一行的组件。它将里面的子组件排成一行，如果其子组件超出一行的范围，那么会报错。
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——ListView和GridView</title>
    <link href="https://francisqiang.github.io/2019/06/08/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94ListView%E5%92%8CGridView/"/>
    <id>https://francisqiang.github.io/2019/06/08/Flutter组件——ListView和GridView/</id>
    <published>2019-06-08T10:45:34.000Z</published>
    <updated>2019-06-08T11:48:03.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ListView组件"><a href="#ListView组件" class="headerlink" title="ListView组件"></a>ListView组件</h2><p>  ListView是可滚动的列表组件，使用的范围非常广。</p><ul><li><h2 id="静态构建ListView"><a href="#静态构建ListView" class="headerlink" title="静态构建ListView"></a>静态构建ListView</h2><p>我们直接使用ListView标准构造函数就可以构建了(只适合列表元素已经确定并且数目比较少的时候)。里面最重要的一个属性就是children，里面接受一个Widget数组，我们可以将需要的放置的组件放入数组里面。</p></li><li><h2 id="动态构造ListView"><a href="#动态构造ListView" class="headerlink" title="动态构造ListView"></a>动态构造ListView</h2><p>ListView的标准构造函数会将所有item一次性创建，而ListView.builder会创建滚动到屏幕上显示的item。</p><p>ListView.builder其实是dart里面的一种可命名构造函数(直接理解为一种构造函数就好了)。还有这两种ListView.separated<br>ListView.custom。</p><p>我们直接来看builder命名构造函数的属性</p><p>首先我们看一下源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  ListView.builder(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  Axis scrollDirection = Axis.vertical,</span><br><span class="line">  <span class="built_in">bool</span> reverse = <span class="keyword">false</span>,</span><br><span class="line">  ScrollController controller,</span><br><span class="line">  <span class="built_in">bool</span> primary,</span><br><span class="line">  ScrollPhysics physics,</span><br><span class="line">  <span class="built_in">bool</span> shrinkWrap = <span class="keyword">false</span>,</span><br><span class="line">  EdgeInsetsGeometry padding,</span><br><span class="line">  <span class="keyword">this</span>.itemExtent,</span><br><span class="line">  <span class="meta">@required</span> IndexedWidgetBuilder itemBuilder,</span><br><span class="line">  <span class="built_in">int</span> itemCount,</span><br><span class="line">  <span class="built_in">bool</span> addAutomaticKeepAlives = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> addRepaintBoundaries = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> addSemanticIndexes = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">double</span> cacheExtent,</span><br><span class="line">  <span class="built_in">int</span> semanticChildCount,</span><br><span class="line">  DragStartBehavior dragStartBehavior = DragStartBehavior.start,</span><br><span class="line">&#125;) : childrenDelegate = SliverChildBuilderDelegate(</span><br><span class="line">       itemBuilder,</span><br><span class="line">       childCount: itemCount,</span><br><span class="line">       addAutomaticKeepAlives: addAutomaticKeepAlives,</span><br><span class="line">       addRepaintBoundaries: addRepaintBoundaries,</span><br><span class="line">       addSemanticIndexes: addSemanticIndexes,</span><br><span class="line">     ),</span><br><span class="line">     <span class="keyword">super</span>(</span><br><span class="line">       key: key,</span><br><span class="line">       scrollDirection: scrollDirection,</span><br><span class="line">       reverse: reverse,</span><br><span class="line">       controller: controller,</span><br><span class="line">       primary: primary,</span><br><span class="line">       physics: physics,</span><br><span class="line">       shrinkWrap: shrinkWrap,</span><br><span class="line">       padding: padding,</span><br><span class="line">       cacheExtent: cacheExtent,</span><br><span class="line">       semanticChildCount: semanticChildCount ?? itemCount,</span><br><span class="line">       dragStartBehavior: dragStartBehavior,</span><br><span class="line">     );</span><br></pre></td></tr></table></figure><p>构造函数后面的childrenDelegate和super是初始化列表，先只作了解。</p><ul><li><p>itemBuilder </p><p>这个属性是required的，他需要一个IndexedWidgetBuilder对象,我们查看源码发现他是一个方法，参数是上下文对象BuildContext和index。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> IndexedWidgetBuilder = Widget <span class="built_in">Function</span>(BuildContext context, <span class="built_in">int</span> index);</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>所以这里面我们可以直接传进去一个方法，参数是上下文和index，需要返回一个Widget，我们这里直接可以使用匿名函数加上胖箭头表达式。</code></pre><ul><li><p>itemCount</p><p>这个属性是指定item(元素)的个数</p></li><li><p>scrollDirection</p><p>指定能滑动方向，接受一个Axis，其中可以设置horizontal或者vertical，默认为vertical(垂直方向)。</p></li><li><p>itemExtent</p><p>接受double类型参数，指定每个元素在滑动方向所占的高度值。</p></li><li><p>padding</p><p>设置内边距</p></li></ul><h2 id="GridView组件"><a href="#GridView组件" class="headerlink" title="GridView组件"></a>GridView组件</h2><p>  我们首先看一下GridView常用的count命名构造函数</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  GridView.count(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  Axis scrollDirection = Axis.vertical,</span><br><span class="line">  <span class="built_in">bool</span> reverse = <span class="keyword">false</span>,</span><br><span class="line">  ScrollController controller,</span><br><span class="line">  <span class="built_in">bool</span> primary,</span><br><span class="line">  ScrollPhysics physics,</span><br><span class="line">  <span class="built_in">bool</span> shrinkWrap = <span class="keyword">false</span>,</span><br><span class="line">  EdgeInsetsGeometry padding,</span><br><span class="line">  <span class="meta">@required</span> <span class="built_in">int</span> crossAxisCount,</span><br><span class="line">  <span class="built_in">double</span> mainAxisSpacing = <span class="number">0.0</span>,</span><br><span class="line">  <span class="built_in">double</span> crossAxisSpacing = <span class="number">0.0</span>,</span><br><span class="line">  <span class="built_in">double</span> childAspectRatio = <span class="number">1.0</span>,</span><br><span class="line">  <span class="built_in">bool</span> addAutomaticKeepAlives = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> addRepaintBoundaries = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> addSemanticIndexes = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">double</span> cacheExtent,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">  <span class="built_in">int</span> semanticChildCount,</span><br><span class="line">  DragStartBehavior dragStartBehavior = DragStartBehavior.start,</span><br><span class="line">&#125;) : gridDelegate = SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">       crossAxisCount: crossAxisCount,</span><br><span class="line">       mainAxisSpacing: mainAxisSpacing,</span><br><span class="line">       crossAxisSpacing: crossAxisSpacing,</span><br><span class="line">       childAspectRatio: childAspectRatio,</span><br><span class="line">     ),</span><br><span class="line">     childrenDelegate = SliverChildListDelegate(</span><br><span class="line">       children,</span><br><span class="line">       addAutomaticKeepAlives: addAutomaticKeepAlives,</span><br><span class="line">       addRepaintBoundaries: addRepaintBoundaries,</span><br><span class="line">       addSemanticIndexes: addSemanticIndexes,</span><br><span class="line">     ),</span><br><span class="line">     <span class="keyword">super</span>(</span><br><span class="line">       key: key,</span><br><span class="line">       scrollDirection: scrollDirection,</span><br><span class="line">       reverse: reverse,</span><br><span class="line">       controller: controller,</span><br><span class="line">       primary: primary,</span><br><span class="line">       physics: physics,</span><br><span class="line">       shrinkWrap: shrinkWrap,</span><br><span class="line">       padding: padding,</span><br><span class="line">       cacheExtent: cacheExtent,</span><br><span class="line">       semanticChildCount: semanticChildCount ?? children.length,</span><br><span class="line">       dragStartBehavior: dragStartBehavior,</span><br><span class="line">     );</span><br></pre></td></tr></table></figure><p>  其中有很多属性是和ListView的一样的</p><ul><li><p>reverse</p><p>接受bool，是否沿反方向滚动</p></li><li><p>controller</p><p>控制child滚动时候的位置</p></li><li><p>shrinkWrap</p><p>滚动方向的滚动视图内容是否应该由正在查看的内容所决定。</p></li><li><p>primary</p><p>是否是与父节点的PrimaryScrollController所关联的主滚动视图。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ListView组件&quot;&gt;&lt;a href=&quot;#ListView组件&quot; class=&quot;headerlink&quot; title=&quot;ListView组件&quot;&gt;&lt;/a&gt;ListView组件&lt;/h2&gt;&lt;p&gt;  ListView是可滚动的列表组件，使用的范围非常广。&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——Image</title>
    <link href="https://francisqiang.github.io/2019/06/06/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Image/"/>
    <id>https://francisqiang.github.io/2019/06/06/Flutter组件——Image/</id>
    <published>2019-06-06T08:51:45.000Z</published>
    <updated>2019-06-06T09:10:47.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>  Image就是图片组件，其中分为很多中，比如说network(url<br>  获取图片)，asset(本地获取图片)，还有File，Memory。这里我学习了network和asset的。</p><ul><li><h2 id="必须属性"><a href="#必须属性" class="headerlink" title="必须属性"></a>必须属性</h2><p>这里必须属性和Text组件的字符串内容差不多，我们需要加入图片地址，asset需要放入本地地址，network需要放入网络地址。不过在new Image.asset之前，我们需要在yaml文件中注册asset资源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line"><span class="attr">  assets:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">images/avatar.gif</span></span><br></pre></td></tr></table></figure></li><li><h2 id="width-height"><a href="#width-height" class="headerlink" title="width,height"></a>width,height</h2><p>宽高设置，需要double</p></li><li><h2 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h2><p>排列位置，接受Alignment对象。控制的是图片在图片组件中的位置。</p></li><li><h2 id="fit"><a href="#fit" class="headerlink" title="fit"></a>fit</h2><p>图片充满格式，接受BoxFit对象，可以使用其中已经预定义了一些常量fill(充满)，cover(覆盖)等。</p></li><li><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><p>重复，接受ImageRepeat对象，控制的是如果图片没有占满图片组件，那么就重复。</p></li><li><h2 id="color"><a href="#color" class="headerlink" title="color"></a>color</h2><p>与混合模式一起使用，在图片上增加一个颜色层，然后使用混合模式混合，如果不加混合模式，图片就会被颜色给覆盖掉。</p></li><li><h2 id="ColorBlendMode"><a href="#ColorBlendMode" class="headerlink" title="ColorBlendMode"></a>ColorBlendMode</h2><p>接受一个BlendMode，图片混合模式，该对象已经定义好几种混合类型，BlendMode.darken,BlendMode.clear等。</p></li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Image.asset(<span class="string">"images/avatar.gif"</span>,</span><br><span class="line">              width: <span class="number">200.0</span>,</span><br><span class="line">              height: <span class="number">400.0</span>,</span><br><span class="line">              color: Colors.pink,</span><br><span class="line">              colorBlendMode: BlendMode.colorBurn,</span><br><span class="line">              fit: BoxFit.scaleDown,</span><br><span class="line">              alignment: Alignment.bottomCenter,</span><br><span class="line">              repeat: ImageRepeat.repeat,</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Image&quot;&gt;&lt;a href=&quot;#Image&quot; class=&quot;headerlink&quot; title=&quot;Image&quot;&gt;&lt;/a&gt;Image&lt;/h2&gt;&lt;p&gt;  Image就是图片组件，其中分为很多中，比如说network(url&lt;br&gt;  获取图片)，asset(本地获取
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——Container</title>
    <link href="https://francisqiang.github.io/2019/06/06/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Container/"/>
    <id>https://francisqiang.github.io/2019/06/06/Flutter组件——Container/</id>
    <published>2019-06-06T05:30:45.000Z</published>
    <updated>2019-06-06T05:49:35.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Container组件"><a href="#Container组件" class="headerlink" title="Container组件"></a>Container组件</h2><p>  Container组件是一个非常重要的组件有点类似于html中的div。</p><ul><li><h2 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h2><p>这个是设置子组件的布局的，注意是子组件，它接受一个Alignment对象，我们可以使用Alignment(x, y)来构造它，或者我们也可以使用它已经定义好的几个常量来构造它</p><p><img src="/2019/06/06/Flutter组件——Container/1.jpg" alt="Alignment常量定义"></p></li><li><h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><p>这个是设置内边距的，接受一个EdgeInsetsGeometry, 我们可以将它的子类EdgeInsets对象赋值给它，我们可以使用const EdgeInsets.all(double value)，const EdgeInsets.only等方式声明</p></li><li><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p>它是设置Container的外边距，接受参数和padding一样</p></li><li><h2 id="height，width"><a href="#height，width" class="headerlink" title="height，width"></a>height，width</h2><p>它们是设置宽和高的，里面接受一个double</p></li><li><h2 id="decoration"><a href="#decoration" class="headerlink" title="decoration"></a>decoration</h2><p>绘制在child后面的装饰，设置了decoration的话，就不能设置color属性，否则会报错，此时应该在decoration中进行颜色的设置。</p><p>其中它接受一个Decoration，我们可以使用它的子类BoxDecoration来赋值给它。</p><p>在BoxDecoration中也有许多参数</p><ul><li><p>color  设置颜色的</p></li><li><p>image  设置背景图片，可以添加一个DecorationImage对象</p></li><li><p>border 设置边，接受一个BoxBorder，我们可以使用Border.all(width: 1.5, style: BorderStyle.solid, color: Colors.deepPurple),这样的发情时来构造它。</p></li><li><p>borderRadius  设置边角的，可以增加弧度，接受一个BorderRadius对象，我们可以使用BorderRadius.all来构造</p></li><li><p>gradient  设置颜色渐变效果，接受一个Gradient对象</p></li></ul></li><li><h2 id="child"><a href="#child" class="headerlink" title="child"></a>child</h2><p>接受一个孩子，孩子里面可以放置子组件</p></li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">            alignment: Alignment.bottomCenter,</span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">            margin: <span class="keyword">const</span> EdgeInsets.all(<span class="number">100.0</span>),</span><br><span class="line">            height: <span class="number">500.0</span>,</span><br><span class="line">            width: <span class="number">200.0</span>,</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">              border: Border.all(width: <span class="number">1.5</span>, style: BorderStyle.solid, color: Colors.deepPurple),</span><br><span class="line">              borderRadius: BorderRadius.circular(<span class="number">1.0</span>),</span><br><span class="line">              gradient: LinearGradient(colors: [</span><br><span class="line">                Colors.deepPurple,</span><br><span class="line">                Colors.deepOrange,</span><br><span class="line">                Colors.pink,</span><br><span class="line">                Colors.greenAccent</span><br><span class="line">              ])</span><br><span class="line">            ),</span><br><span class="line">            child: Image.network(<span class="string">'https://francisqiang.github.io/images/avatar.gif'</span>,</span><br><span class="line">              fit: BoxFit.fitWidth,</span><br><span class="line">              color: Colors.deepOrangeAccent,</span><br><span class="line">              colorBlendMode: BlendMode.darken,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Container组件&quot;&gt;&lt;a href=&quot;#Container组件&quot; class=&quot;headerlink&quot; title=&quot;Container组件&quot;&gt;&lt;/a&gt;Container组件&lt;/h2&gt;&lt;p&gt;  Container组件是一个非常重要的组件有点类似于html中的
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——Text</title>
    <link href="https://francisqiang.github.io/2019/06/06/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Text/"/>
    <id>https://francisqiang.github.io/2019/06/06/Flutter组件——Text/</id>
    <published>2019-06-06T05:22:33.000Z</published>
    <updated>2019-06-06T05:24:51.272Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h2 id="默认属性"><a href="#默认属性" class="headerlink" title="默认属性"></a>默认属性</h2><p>Text中有个默认必须的属性就是字符串了，你需要在一开始设置字符串的内容</p></li><li><h2 id="textAlign"><a href="#textAlign" class="headerlink" title="textAlign"></a>textAlign</h2><p>这个属性主要就是设置字符串的对齐方式的，他接受一个TextAlign对象，这个对象里面有几个常见的枚举比如说left，center，start等。</p></li><li><h2 id="maxLines"><a href="#maxLines" class="headerlink" title="maxLines"></a>maxLines</h2><p>maxLines指的是Text的最大行数，如果超过剩余字符串内容则会被隐藏</p></li><li><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>overflow定义了超出字符串部分内容的显示样式(不太精确，先这么理解)，其中它接受TextOverFlow对象，这个对象设置了几个枚举类型，其中有clip，fade，ellipsis，visible效果，其中ellipsis是用的比较多的</p></li><li><h2 id="textScaleFactor"><a href="#textScaleFactor" class="headerlink" title="textScaleFactor"></a>textScaleFactor</h2><p>这个属性是设置字体大小的，它是根据比例设置，接受的是一个double，如果你设置2.0就是两倍大小，当你设置这个属性的时候就不要设置fontSize了，会有冲突</p></li><li><h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><p>Text中最重要的就是style属性了，style属性主要设置字体的样式，它接受一个TextStyle对象并且这个对象中还有很多属性，下面是几个常见属性。</p><ul><li><p>color属性</p><p>主要是字体的颜色，里面接受一个Color对象，我们可以使用Colors.dark的形式，因为Colors里面已经内置了很多Color常量，或者使用Color.fromARGB(a, r, g, b)</p></li><li><p>fontSize属性</p><p>字体大小不用多说，接受一个double</p></li><li><p>fontWeight属性</p><p>字体粗度，里面接受一个FontWeight对象，比如FontWeight.w800等</p></li><li><p>decoration属性</p><p>用于下划线类型的装饰，接受一个TextDecoration对象，里面有下划线，上划线等等样式，你还可以设置combine里面接受一个数组，可以把样式都添加进去。</p></li><li><p>decorationStyle属性</p><p>装饰的样式，比如将下划线变成波浪线等等。接受一个TextDecorationStyle对象，里面有solid，double，dashed，wavy，dotted类型的。</p></li><li><p>decorationColor属性</p><p>装饰的颜色，可以设置下划线的颜色，接受一个Color对象</p></li><li><p>backgroundColor属性</p><p>这个属性就是设置字体的背景的颜色，接受一个Color对象</p></li></ul></li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyText</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(<span class="string">'This is my first page'</span>,</span><br><span class="line">      textAlign: TextAlign.justify,</span><br><span class="line">      maxLines: <span class="number">1</span>,</span><br><span class="line">      overflow: TextOverflow.ellipsis,</span><br><span class="line">      textScaleFactor: <span class="number">1.5</span>,</span><br><span class="line">      style: TextStyle(</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          fontSize: <span class="number">30.0</span>,</span><br><span class="line">          fontWeight: FontWeight.w800,</span><br><span class="line">          decoration: TextDecoration.combine([</span><br><span class="line">            TextDecoration.lineThrough,</span><br><span class="line">            TextDecoration.underline</span><br><span class="line">          ]),</span><br><span class="line">          decorationStyle: TextDecorationStyle.wavy,</span><br><span class="line">          decorationColor: Colors.lightGreenAccent,</span><br><span class="line">        backgroundColor: Colors.red</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;默认属性&quot;&gt;&lt;a href=&quot;#默认属性&quot; class=&quot;headerlink&quot; title=&quot;默认属性&quot;&gt;&lt;/a&gt;默认属性&lt;/h2&gt;&lt;p&gt;Text中有个默认必须的属性就是字符串了，你需要在一开始设置字符串的内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Java8新特性——lambda范围和内置功能接口</title>
    <link href="https://francisqiang.github.io/2019/06/05/Java8%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94lambda%E8%8C%83%E5%9B%B4%E5%92%8C%E5%86%85%E7%BD%AE%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%8F%A3/"/>
    <id>https://francisqiang.github.io/2019/06/05/Java8新特性——lambda范围和内置功能接口/</id>
    <published>2019-06-05T00:07:50.000Z</published>
    <updated>2019-06-05T07:16:15.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lambda-scopes"><a href="#lambda-scopes" class="headerlink" title="lambda scopes"></a>lambda scopes</h2><p>  在lambda表达式中我们可以访问外部变量，这个功能和匿名内部类一样，但是对于匿名内部类，我们只能访问final变量，lambda表达式中都可以访问，但是它只是隐式地将变量变成了final</p><p>  首先我们能通过lambda表达式来访问外部变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    Converter&lt;Integer, String&gt; converter = (from -&gt; String.valueOf(from + num));</span><br><span class="line">    System.out.println(converter.convert(<span class="number">2</span>)); <span class="comment">// 输出3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  但是我们不能再改变lambda表达式中调用的外部变量了，因为一旦被lambda表达式调用，这个变量就被隐式地声明成了final变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    Converter&lt;Integer, String&gt; converter = (from -&gt; String.valueOf(from + num));</span><br><span class="line">    System.out.println(converter.convert(<span class="number">2</span>));</span><br><span class="line">    num = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这个时候就会报错 从lambda 表达式引用的本地变量必须是最终变量或实际上的最终变量。</p><p>  还有一个容易混淆的点就是这样的写法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">  Converter&lt;Integer, String&gt; converter = String::valueOf;</span><br><span class="line">  System.out.println(converter.convert(<span class="number">2</span> + num));</span><br><span class="line">  num = <span class="number">2</span>;</span><br><span class="line">  System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  即使是对象也是一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">"123"</span>);</span><br><span class="line">    Converter&lt;StringBuilder, String&gt; converter = (stringBuilder1) -&gt; stringBuilder1.toString();</span><br><span class="line">    System.out.println(converter.convert(stringBuilder));</span><br><span class="line">    stringBuilder.append(<span class="string">"234"</span>);</span><br><span class="line">    System.out.println(stringBuilder);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这个时候其实我们只是将num作为函数参数传进去了，在lambda表达式中并没有显示声明调用这个变量。</p><p>  在lambda表达式中我们还可以访问静态和类中的字段</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lambda4</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> outerStaticNum;</span><br><span class="line">  <span class="keyword">int</span> outerNum;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">testScopes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; &#123;</span><br><span class="line">          outerNum = <span class="number">23</span>;</span><br><span class="line">          <span class="keyword">return</span> String.valueOf(from);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; &#123;</span><br><span class="line">          outerStaticNum = <span class="number">72</span>;</span><br><span class="line">          <span class="keyword">return</span> String.valueOf(from);</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  还记得上次声明的Formula接口么，其中定义了一个sqrt的默认方法，在lambda中我们是不能调用默认方法的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Formula formula = (a) -&gt; sqrt(a * <span class="number">100</span>); <span class="comment">//这样编译不通过</span></span><br></pre></td></tr></table></figure><h2 id="Built-in-Functional-Interfaces"><a href="#Built-in-Functional-Interfaces" class="headerlink" title="Built-in Functional Interfaces"></a>Built-in Functional Interfaces</h2><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>  这是断言，判断的意思。先上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">predicate.test(<span class="string">"foo"</span>);              <span class="comment">// true</span></span><br><span class="line">predicate.negate().test(<span class="string">"foo"</span>);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">Predicate&lt;Boolean&gt; nonNull = Objects::nonNull;</span><br><span class="line">Predicate&lt;Boolean&gt; isNull = Objects::isNull;</span><br><span class="line"></span><br><span class="line">Predicate&lt;String&gt; isEmpty = String::isEmpty;</span><br><span class="line">Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();</span><br></pre></td></tr></table></figure><p>  其中test方法就是Predicate接口中的唯一抽象方法，我们lambda表达式中就是实现了它。</p><p>  negate方法是取反的意思，其中还有and(), or()这两个默认方法对应语，或。</p><p>  可以直接看源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluates this predicate on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the input argument matches the predicate,</span></span><br><span class="line"><span class="comment">     * otherwise &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed predicate that represents a short-circuiting logical</span></span><br><span class="line"><span class="comment">     * AND of this predicate and another.  When evaluating the composed</span></span><br><span class="line"><span class="comment">     * predicate, if this predicate is &#123;<span class="doctag">@code</span> false&#125;, then the &#123;<span class="doctag">@code</span> other&#125;</span></span><br><span class="line"><span class="comment">     * predicate is not evaluated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed</span></span><br><span class="line"><span class="comment">     * to the caller; if evaluation of this predicate throws an exception, the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> other&#125; predicate will not be evaluated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> other a predicate that will be logically-ANDed with this</span></span><br><span class="line"><span class="comment">     *              predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed predicate that represents the short-circuiting logical</span></span><br><span class="line"><span class="comment">     * AND of this predicate and the &#123;<span class="doctag">@code</span> other&#125; predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if other is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a predicate that represents the logical negation of this</span></span><br><span class="line"><span class="comment">     * predicate.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a predicate that represents the logical negation of this</span></span><br><span class="line"><span class="comment">     * predicate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed predicate that represents a short-circuiting logical</span></span><br><span class="line"><span class="comment">     * OR of this predicate and another.  When evaluating the composed</span></span><br><span class="line"><span class="comment">     * predicate, if this predicate is &#123;<span class="doctag">@code</span> true&#125;, then the &#123;<span class="doctag">@code</span> other&#125;</span></span><br><span class="line"><span class="comment">     * predicate is not evaluated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed</span></span><br><span class="line"><span class="comment">     * to the caller; if evaluation of this predicate throws an exception, the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> other&#125; predicate will not be evaluated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> other a predicate that will be logically-ORed with this</span></span><br><span class="line"><span class="comment">     *              predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed predicate that represents the short-circuiting logical</span></span><br><span class="line"><span class="comment">     * OR of this predicate and the &#123;<span class="doctag">@code</span> other&#125; predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if other is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a predicate that tests if two arguments are equal according</span></span><br><span class="line"><span class="comment">     * to &#123;<span class="doctag">@link</span> Objects#equals(Object, Object)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of arguments to the predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetRef the object reference with which to compare for equality,</span></span><br><span class="line"><span class="comment">     *               which may be &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a predicate that tests if two arguments are equal according</span></span><br><span class="line"><span class="comment">     * to &#123;<span class="doctag">@link</span> Objects#equals(Object, Object)&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</span><br><span class="line">                ? Objects::isNull</span><br><span class="line">                : object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>  Function从字面理解就是函数的意思，这也是Java支持函数式编程的一个很重要的函数式接口。我们先看源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this function to the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the function argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the function result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed function that first applies the &#123;<span class="doctag">@code</span> before&#125;</span></span><br><span class="line"><span class="comment">     * function to its input, and then applies this function to the result.</span></span><br><span class="line"><span class="comment">     * If evaluation of either function throws an exception, it is relayed to</span></span><br><span class="line"><span class="comment">     * the caller of the composed function.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; the type of input to the &#123;<span class="doctag">@code</span> before&#125; function, and to the</span></span><br><span class="line"><span class="comment">     *           composed function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> before the function to apply before this function is applied</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed function that first applies the &#123;<span class="doctag">@code</span> before&#125;</span></span><br><span class="line"><span class="comment">     * function and then applies this function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if before is null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #andThen(Function)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed function that first applies this function to</span></span><br><span class="line"><span class="comment">     * its input, and then applies the &#123;<span class="doctag">@code</span> after&#125; function to the result.</span></span><br><span class="line"><span class="comment">     * If evaluation of either function throws an exception, it is relayed to</span></span><br><span class="line"><span class="comment">     * the caller of the composed function.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; the type of output of the &#123;<span class="doctag">@code</span> after&#125; function, and of the</span></span><br><span class="line"><span class="comment">     *           composed function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> after the function to apply after this function is applied</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed function that first applies this function and then</span></span><br><span class="line"><span class="comment">     * applies the &#123;<span class="doctag">@code</span> after&#125; function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if after is null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #compose(Function)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a function that always returns its input argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of the input and output objects to the function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a function that always returns its input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  其中apply()是我们需要实现的一个函数，为什么这里说是函数不是方法呢？我们现在用函数式的思想去思考这个问题，其实这个方法就是我们给定一个参数然后我们返回一个结果，具体这个函数是怎么实现我们先不管。这就是函数式思想(先考虑参数和结果，然后再去考虑实现行为)。</p><p>  这是作者给的实例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是实现apply方法</span></span><br><span class="line">Function&lt;String, Integer&gt; toInteger = Integer::valueOf;</span><br><span class="line">Function&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf);</span><br><span class="line"></span><br><span class="line">backToString.apply(<span class="string">"123"</span>);     <span class="comment">// "123"</span></span><br></pre></td></tr></table></figure><p>  这里多出来了个andThen方法，我们来具体看一看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//判空</span></span><br><span class="line">  Objects.requireNonNull(after);</span><br><span class="line">  <span class="comment">// 我们传入的是一个Function</span></span><br><span class="line">  <span class="comment">// 该语句是先调用当前Function的apply方法</span></span><br><span class="line">  <span class="comment">// 然后将该方法的返回值作为after(传入的Function)的apply方法中的参数</span></span><br><span class="line">  <span class="comment">// 最终返回的是after的apply方法的返回值</span></span><br><span class="line">  <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  里面还有一个compose方法,其实和andThen方法正好相反</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">  Objects.requireNonNull(before);</span><br><span class="line">  <span class="comment">// 先调用传入的befor的apply方法，然后将返回值作为当前Function的apply的参数</span></span><br><span class="line">  <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><p>  这个函数很简单，就相当于无参函数，我们不需要设置给定参数，只关注结果</p><p>  具体源码也很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets a result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Person&gt; personSupplier = Person::<span class="keyword">new</span>;</span><br><span class="line">personSupplier.get();   <span class="comment">// new Person</span></span><br></pre></td></tr></table></figure><h3 id="Comsumer"><a href="#Comsumer" class="headerlink" title="Comsumer"></a>Comsumer</h3><p>  我们先来看一下源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs this operation on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed &#123;<span class="doctag">@code</span> Consumer&#125; that performs, in sequence, this</span></span><br><span class="line"><span class="comment">     * operation followed by the &#123;<span class="doctag">@code</span> after&#125; operation. If performing either</span></span><br><span class="line"><span class="comment">     * operation throws an exception, it is relayed to the caller of the</span></span><br><span class="line"><span class="comment">     * composed operation.  If performing this operation throws an exception,</span></span><br><span class="line"><span class="comment">     * the &#123;<span class="doctag">@code</span> after&#125; operation will not be performed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> after the operation to perform after this operation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed &#123;<span class="doctag">@code</span> Consumer&#125; that performs in sequence this</span></span><br><span class="line"><span class="comment">     * operation followed by the &#123;<span class="doctag">@code</span> after&#125; operation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> after&#125; is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上面有一个accept()是我们需要实现的抽象方法，其实就是我们给定一个参数但是我们没有返回值，然后这个andThen()就是传入一个Consumer先调用原来的Consumer的accept方法然后再调用传入的accept()</p><h3 id="Comparators"><a href="#Comparators" class="headerlink" title="Comparators"></a>Comparators</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是实现了compare方法</span></span><br><span class="line">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);</span><br><span class="line"></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Doe"</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"Alice"</span>, <span class="string">"Wonderland"</span>);</span><br><span class="line"></span><br><span class="line">comparator.compare(p1, p2);             <span class="comment">// &gt; 0</span></span><br><span class="line"><span class="comment">// reversed方法是默认方法</span></span><br><span class="line">comparator.reversed().compare(p1, p2);  <span class="comment">// &lt; 0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;lambda-scopes&quot;&gt;&lt;a href=&quot;#lambda-scopes&quot; class=&quot;headerlink&quot; title=&quot;lambda scopes&quot;&gt;&lt;/a&gt;lambda scopes&lt;/h2&gt;&lt;p&gt;  在lambda表达式中我们可以访问外部变量，这个
      
    
    </summary>
    
      <category term="Java SE" scheme="https://francisqiang.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>Java8新特性——接口中的static，default方法</title>
    <link href="https://francisqiang.github.io/2019/06/04/Java8%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84static%EF%BC%8Cdefault%E6%96%B9%E6%B3%95/"/>
    <id>https://francisqiang.github.io/2019/06/04/Java8新特性——接口中的static，default方法/</id>
    <published>2019-06-04T05:57:09.000Z</published>
    <updated>2019-06-04T06:40:40.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="default方法"><a href="#default方法" class="headerlink" title="default方法"></a>default方法</h2><p> 这些天在看ES6的语法，包括我以前学了一段时间的dart，这两门语言中都涉及到函数式编程，想想我对Java中的函数式编程还是不太了解，最近开始学习Java8的一些新特性，反正语言都差不多，一起学习好了。</p><p> 在java8中新增了default方法，这个方法可以定义在接口中，其实就是在接口中定义了默认方法，这些默认方法可以在接口中就已经实现。</p><p> 我看的是github上的<a href="https://github.com/winterbe/java8-tutorial" target="_blank" rel="noopener">Java8——tutorial</a>,原文是英文的，其实理解起来不难。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Formula</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">default</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Math.sqrt(a);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Formula formula = <span class="keyword">new</span> Formula() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> a;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   System.out.println(formula.calculate(<span class="number">5</span>));</span><br><span class="line">   <span class="comment">// 未实现也可以直接使用</span></span><br><span class="line">   System.out.println(formula.sqrt(<span class="number">5</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="static方法"><a href="#static方法" class="headerlink" title="static方法"></a>static方法</h2><p>  上面就已经定义了静态方法在接口中，在以往版本是不可以的。我们可以直接通过接口(不需要实现)来调用静态方法，但注意的是实现接口的类或者子接口(是继承不是实现)不会继承接口中的静态方法。</p><h2 id="Lambda-expressions"><a href="#Lambda-expressions" class="headerlink" title="Lambda expressions"></a>Lambda expressions</h2><p>  因为是跟着教程走的，涉及到的知识和教程的差不多，你们可以直接去原网站看。</p><p>  我们可以使用lambda表达式改造上面的静态方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Formula formula = (a) -&gt; a;</span><br><span class="line">  System.out.println(formula.calculate(<span class="number">5</span>));</span><br><span class="line">  System.out.println(formula.sqrt(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  能使用lambda表达式来实现的接口必须只能有一个抽象方法，然后我们写的那个lambda表达式会和原来类型中的抽象方法进行匹配。</p><p>  这是原文(大概意思就是上面的话):</p><p>  How does lambda expressions fit into Java’s type system? Each lambda corresponds to a given type, specified by an interface. A so called functional interface must contain exactly one abstract method declaration. Each lambda expression of that type will be matched to this abstract method. Since default methods are not abstract you’re free to add default methods to your functional interface.</p><p>  然后我们可以在只有一个抽象方法的接口上面声明一个注解@FunctionalInterface来指明这个接口是一个函数接口，当我们尝试添加第二个抽象方法的时候编译器会报错。</p><p>  We can use arbitrary interfaces as lambda expressions as long as the interface only contains one abstract method. To ensure that your interface meet the requirements, you should add the @FunctionalInterface annotation. The compiler is aware of this annotation and throws a compiler error as soon as you try to add a second abstract method declaration to the interface.</p><p>  <img src="/2019/06/04/Java8新特性——接口中的static，default方法/1.jpg" alt="@FunctionalInterface"></p><h2 id="Method-and-Constructor-References"><a href="#Method-and-Constructor-References" class="headerlink" title="Method and Constructor References"></a>Method and Constructor References</h2><p>  方法和构造方法引用，Java 8允许您通过::关键字传递方法或构造函数的引用。</p><p>  例子：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);Integer converted = converter.convert(<span class="string">"123"</span>);</span><br><span class="line">System.out.println(converted);    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>  我们可以使用::来化简代码</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Converter&lt;String, Integer&gt; converter = Integer::valueof</span><br><span class="line"><span class="comment">// 可以这么理解本来我们可以将这个实现写成一个lambda表达式，这个表达式其实就是一个函数，我们现在只是要一个函数，然后我们通过方法引用吧方法赋值给它。这个方法必须参数返回值要相同</span></span><br></pre></td></tr></table></figure><p>  当然我们还可以使用某个实例化的对象的方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">startsWith</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> String.valueOf(s.charAt(<span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Something something = <span class="keyword">new</span> Something();</span><br><span class="line">Converter&lt;String, String&gt; converter = something::startsWith;</span><br></pre></td></tr></table></figure><p>  通过::引用构造器</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  String firstName;</span><br><span class="line">  String lastName;</span><br><span class="line"></span><br><span class="line">  Person() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  Person(String firstName, String lastName) &#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonFactory</span>&lt;<span class="title">P</span> <span class="keyword">extends</span> <span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">P <span class="title">create</span><span class="params">(String firstName, String lastName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们通过构造器引用实现接口</span></span><br><span class="line">PersonFactory&lt;Person&gt; pf = Person::<span class="keyword">new</span>;</span><br><span class="line">Person person  = PersonFactory.create(<span class="string">"11"</span>, <span class="string">"22"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;default方法&quot;&gt;&lt;a href=&quot;#default方法&quot; class=&quot;headerlink&quot; title=&quot;default方法&quot;&gt;&lt;/a&gt;default方法&lt;/h2&gt;&lt;p&gt; 这些天在看ES6的语法，包括我以前学了一段时间的dart，这两门语言中都涉及到函数
      
    
    </summary>
    
      <category term="Java SE" scheme="https://francisqiang.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中的赋值和参数传递</title>
    <link href="https://francisqiang.github.io/2019/06/04/Java%E4%B8%AD%E7%9A%84%E8%B5%8B%E5%80%BC%E5%92%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    <id>https://francisqiang.github.io/2019/06/04/Java中的赋值和参数传递/</id>
    <published>2019-06-04T02:16:02.000Z</published>
    <updated>2019-06-04T02:50:36.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java中的-赋值"><a href="#Java中的-赋值" class="headerlink" title="Java中的=赋值"></a>Java中的=赋值</h2><p>  一直以来我对于这些都有些模糊，今天来写一篇博客总结一下。</p><p>  在Java中，=赋值对于基本类型可以简单理解为就是直接传值</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = a;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line">System.out.println(a); <span class="comment">// 1</span></span><br><span class="line">System.out.println(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>  我们可以看出我们把a赋值给b然后对b进行改变的时候a的值还是不会变。</p><p>  所以在基本数据类型中，我们可以简单理解为=为传值。</p><p>  而在对象中的=就不是赋值那么简单了，对于对象的=其实赋值的是对象的地址而不是内容，比如a = a1 ，假设这两个变量是对象，那么我们是将a1的地址赋值给a，那么a的地址就是a1的地址，即他们两共享同一地址，所以如果我们对a进行了操作，其实就是通过地址同时操作a1。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder s1 = <span class="keyword">new</span> StringBuilder(<span class="string">"123"</span>);</span><br><span class="line">StringBuilder s2 = s1;</span><br><span class="line">s2.append(<span class="string">"456"</span>);</span><br><span class="line">System.out.println(s1); <span class="comment">// 123456</span></span><br><span class="line">System.out.println(s2); <span class="comment">// 123456</span></span><br></pre></td></tr></table></figure><p>  所以我们可以理解对于对象的=赋值的是对象的地址，除非我们再次new一个对象，将这个new的对象的地址重新赋值给s2。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder s1 = <span class="keyword">new</span> StringBuilder(<span class="string">"123"</span>);</span><br><span class="line">StringBuilder s2 = s1;</span><br><span class="line">s2.append(<span class="string">"456"</span>);</span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br><span class="line">s2 = <span class="keyword">new</span> StringBuilder(<span class="string">"123"</span>);</span><br><span class="line">s2.append(<span class="string">"789"</span>);</span><br><span class="line">System.out.println(s1); <span class="comment">// 123456 不变</span></span><br><span class="line">System.out.println(s2); <span class="comment">// 123789</span></span><br></pre></td></tr></table></figure><p>  我们可以看出当我们给s2重新赋值一个地址的时候这个时候的s2就与s1无关了，因为他们已经不是共享同一个地址了。</p><h2 id="Java中的方法参数传递"><a href="#Java中的方法参数传递" class="headerlink" title="Java中的方法参数传递"></a>Java中的方法参数传递</h2><p>  我觉得方法参数传递和=赋值差不多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">(StringBuilder stringBuilder)</span> </span>&#123;</span><br><span class="line">    stringBuilder.append(<span class="string">"我改变了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">(StringBuilder stringBuilder)</span> </span>&#123;</span><br><span class="line">    stringBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">"我重新赋值地址了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">"初始化"</span>);</span><br><span class="line">    System.out.println(stringBuilder); <span class="comment">//初始化</span></span><br><span class="line">    Test.function1(stringBuilder);</span><br><span class="line">    System.out.println(stringBuilder); <span class="comment">//初始化我改变李</span></span><br><span class="line">    Test.function2(stringBuilder);</span><br><span class="line">    System.out.println(stringBuilder); <span class="comment">//初始化我改变了</span></span><br><span class="line">    <span class="comment">//  这里我们看出function2对stringBuilder对象没有任何改变，是因为</span></span><br><span class="line">    <span class="comment">// 我们传入function2的stringBuilder是一个地址，然后我们又重新将</span></span><br><span class="line">    <span class="comment">// 新的地址赋值给stringBuilder，所以指向了不同的地址 自然就不会有关联了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  总之记住一个就是Java中的参数传递就是按值传递，当我们传入的是一个对象的时候我们传入的是地址，我们传入一个基本类型的时候传入的是一个值，我们也可以简单理解为地址就是对象的值。</p><p>  其实也可以这么理解，基本类型的值在栈中，即栈中的的值，然后对象的地址在栈中，这个地址指向堆中的内容，我们可以简单理解为传值就是传入栈中的内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java中的-赋值&quot;&gt;&lt;a href=&quot;#Java中的-赋值&quot; class=&quot;headerlink&quot; title=&quot;Java中的=赋值&quot;&gt;&lt;/a&gt;Java中的=赋值&lt;/h2&gt;&lt;p&gt;  一直以来我对于这些都有些模糊，今天来写一篇博客总结一下。&lt;/p&gt;
&lt;p&gt;  在J
      
    
    </summary>
    
      <category term="Java SE" scheme="https://francisqiang.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构——Trie</title>
    <link href="https://francisqiang.github.io/2019/06/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94Trie/"/>
    <id>https://francisqiang.github.io/2019/06/03/数据结构——Trie/</id>
    <published>2019-06-03T12:56:57.000Z</published>
    <updated>2019-06-03T13:40:48.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Trie"><a href="#什么是Trie" class="headerlink" title="什么是Trie"></a>什么是Trie</h2><p>  Trie是字典树，前缀树。Trie的思想就是使用空间换时间，它是一种专门致力于字符串查询的树，因为它的子节点是所有包含的字符，所以它是一个多叉树(使用空间大)，当我们对一个字符串进行查询的时候它的时间复杂度是O(字符串长度)，所以当个字符串集合非常大的时候是不影响Trie的性能的。</p><p>  这是Trie的基本结构，里面存放了see，dog，pain，pand</p><p>  <img src="/2019/06/03/数据结构——Trie/1.jpg" alt="Trie"></p><h2 id="在Trie中添加单词"><a href="#在Trie中添加单词" class="headerlink" title="在Trie中添加单词"></a>在Trie中添加单词</h2><p>  因为Trie是专门对字符串进行操作的，这里我们选择对Trie中添加一个单词。</p><p>  主要思路就是:我们对需要添加的单词进行for循环取出每个字符，然后我们同时在树中进行遍历，比如我们取出第一个字符是a，那我们就在根节点的next(这里是一个map存放着所有的子节点)中查找是否有a这样的节点，如果没有我们就创建，如果有我们进入这个结点继续后面的操作，比如下一个字符是p。。。</p><p>  java代码</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义每个结点</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> word;</span><br><span class="line">  <span class="comment">//该结点存放子节点的map</span></span><br><span class="line">  <span class="keyword">private</span> TreeMap&lt;Character, Node&gt; next = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">boolean</span> word)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.word = word;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  root = <span class="keyword">new</span> Node();</span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">(String word)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//将根结点作为当前节点</span></span><br><span class="line">  Node currentNode = root;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">    <span class="comment">//获取该位置的字符</span></span><br><span class="line">    <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">    <span class="comment">//判断是否有该字符的节点，没有则创建</span></span><br><span class="line">    <span class="comment">//有则继续遍历</span></span><br><span class="line">    <span class="keyword">if</span> (currentNode.next.get(c) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      currentNode.next.put(c, <span class="keyword">new</span> Node());</span><br><span class="line">    &#125;</span><br><span class="line">    currentNode = currentNode.next.get(c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果遍历到最后不是个单词那么将它标志位单词</span></span><br><span class="line">  <span class="keyword">if</span> (!currentNode.word)&#123;</span><br><span class="line">    currentNode.word = <span class="keyword">true</span>;</span><br><span class="line">    size++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在Trie中查找单词"><a href="#在Trie中查找单词" class="headerlink" title="在Trie中查找单词"></a>在Trie中查找单词</h2><p>  基本思路：</p><p>  对于查找其实就是遍历这个单词字符串然后在Trie中进行遍历，如果符合则继续遍历，不符合就直接return false。如果遍历到最后，我们就查看最后那个节点的单词标志是不是true如果是那么就return true。</p><p>  java代码:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span> <span class="params">(String word)</span> </span>&#123;</span><br><span class="line">  Node currentNode = root;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">    <span class="comment">//如果一个不符合直接false</span></span><br><span class="line">    <span class="keyword">if</span> (currentNode.next.get(c) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//符合继续遍历</span></span><br><span class="line">    currentNode = currentNode.next.get(c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断最后节点是不是单词</span></span><br><span class="line">  <span class="keyword">return</span> currentNode.word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在Trie中进行前缀查询"><a href="#在Trie中进行前缀查询" class="headerlink" title="在Trie中进行前缀查询"></a>在Trie中进行前缀查询</h2><p>  基本思路：</p><p>  对于前缀查询其实跟查找差不多，只是我们不需要判断最后一个节点是不是单词了，因为这里只是判断前缀。</p><p>  java代码</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">prefix</span> <span class="params">(String word)</span> </span>&#123;</span><br><span class="line">  Node currentNode = root;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">    <span class="keyword">if</span> (currentNode.next.get(c) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    currentNode = currentNode.next.get(c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//遍历到最后直接true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在Trie进行模式匹配"><a href="#在Trie进行模式匹配" class="headerlink" title="在Trie进行模式匹配"></a>在Trie进行模式匹配</h2><p>  其实是一个LeetCode题目</p><p>  <img src="/2019/06/03/数据结构——Trie/2.jpg" alt="leetcode"></p><p>  解题思路：</p><p>  主要就是要解决这个.的匹配问题，这里我们使用递归。当我们搜索一个字符串是否存在的时候(包括.的字符串)，我们首先定义一个递归函数，参数为当前查找的node，字符串，当前字符的索引，返回是boolean。</p><p>  我们递归函数的最根本条件就是当index等于这个查询的字符串的长度的时候我们就返回当前节点是否是单词的标志。</p><p>  但我们进行查找的时候我们现在root的node中执行该函数，然后我们字符索引是0，获取到第一个字符，我们首先要判断这个字符是不是等于.,如果不等于，我们判断当前节点的next中是否有当前字符的node如果没有直接返回false，如果有那继续递归到当前节点的next.get(当前字符)的节点，索引是index + 1。</p><p>  如果是. 那么我们就对这个node.next的key进行遍历，并且在遍历中调用递归函数，写法跟上面差不多</p><p>  具体代码实现</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> word;</span><br><span class="line">  <span class="keyword">private</span> TreeMap&lt;Character, Node&gt; next = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">boolean</span> word)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.word = word;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WordDictionary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  root = <span class="keyword">new</span> Node();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a word into the data structure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">  Node currentNode = root;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">    <span class="keyword">if</span> (currentNode.next.get(c) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      currentNode.next.put(c, <span class="keyword">new</span> Node());</span><br><span class="line">    &#125;</span><br><span class="line">    currentNode = currentNode.next.get(c);</span><br><span class="line">  &#125;</span><br><span class="line">  currentNode.word = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns if the word is in the data structure. A word could contain the dot character '.' to</span></span><br><span class="line"><span class="comment"> * represent any one letter.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> match(root, word, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(Node node, String word, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index == word.length()) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.word;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">char</span> c = word.charAt(index);</span><br><span class="line">  <span class="keyword">if</span> (c != <span class="string">'.'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.next.get(c) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> match(node.next.get(c), word, index + <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历key</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> nextChar:node.next.keySet()) &#123;</span><br><span class="line">      <span class="comment">// 每个key都进行递归，匹配上了交给下一个节点</span></span><br><span class="line">      <span class="keyword">if</span> (match(node.next.get(nextChar), word, index + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果整个for循环结束都没有成功那就是都没匹配上 直接false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode中的键值映射题目"><a href="#LeetCode中的键值映射题目" class="headerlink" title="LeetCode中的键值映射题目"></a>LeetCode中的键值映射题目</h2><p>  <img src="/2019/06/03/数据结构——Trie/3.jpg" alt="LeetCode"></p><p>  解题思路：</p><p>  其实前面查找都差不多，主要就是我们对这个进行前缀查找之后到了最后那个节点的时候我们需要对后面所有单词的value进行相加最终返回。</p><p>  我们这里可以使用递归，比如我们已经进行前缀查询并且到了前缀查找字符的最后一个字符，我们书写一个sum递归函数，目的是计算符合这个前缀的单词的value的总和，其实就是获取都前缀最后节点的字数所形成的所有单词的value和。</p><p>  这个递归函数的参数只有一个Node，这个node就是前缀遍历到最后的节点。然后我们的根本条件就是node的next的size为0的时候也就是最后没有字符(结尾)的时候直接返回该结点的value，然后我们定义一个result，每次result都对当前节点的value进行+=操作，然后我们对next的key进行遍历，在遍历中进行递归调用，递归到node为当前node.next.get(遍历到的key)</p><p>  具体代码：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapSum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">  <span class="keyword">private</span> TreeMap&lt;Character, Node&gt; next = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">boolean</span> word)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MapSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  root = <span class="keyword">new</span> Node();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  Node currentNode = root;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; key.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> c = key.charAt(i);</span><br><span class="line">    <span class="keyword">if</span> (currentNode.next.get(c) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      currentNode.next.put(c, <span class="keyword">new</span> Node());</span><br><span class="line">    &#125;</span><br><span class="line">    currentNode = currentNode.next.get(c);</span><br><span class="line">  &#125;</span><br><span class="line">  currentNode.value = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">  Node currentNode = root;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prefix.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> c = prefix.charAt(i);</span><br><span class="line">    <span class="keyword">if</span> (currentNode.next.get(c) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    currentNode = currentNode.next.get(c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum(currentNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node.next.size() == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> result = node.value;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">char</span> c: node.next.keySet()) &#123;</span><br><span class="line">    result += sum(node.next.get(c));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Trie&quot;&gt;&lt;a href=&quot;#什么是Trie&quot; class=&quot;headerlink&quot; title=&quot;什么是Trie&quot;&gt;&lt;/a&gt;什么是Trie&lt;/h2&gt;&lt;p&gt;  Trie是字典树，前缀树。Trie的思想就是使用空间换时间，它是一种专门致力于字符串查询的树，因
      
    
    </summary>
    
      <category term="数据结构" scheme="https://francisqiang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——Prototype模式</title>
    <link href="https://francisqiang.github.io/2019/06/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94Prototype%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/06/03/设计模式——Prototype模式/</id>
    <published>2019-06-03T02:14:45.000Z</published>
    <updated>2019-06-03T03:36:45.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Prototype模式"><a href="#什么是Prototype模式" class="headerlink" title="什么是Prototype模式"></a>什么是Prototype模式</h2><p>  Prototype模式(原型模式)指的就是使用对象去制造新的对象，不像单例模式只制造出一个对象，原型模式制造的对象是多个的。原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。</p><h2 id="实现Prototype模式"><a href="#实现Prototype模式" class="headerlink" title="实现Prototype模式"></a>实现Prototype模式</h2><p>  原型模式主要用于对象的复制，它的核心是就是类图中的原型类Prototype。Prototype类需要具备以下两个条件：</p><ul><li><p>实现Cloneable接口。在java语言有一个Cloneable接口，它的作用只有一个，就是在运行时通知虚拟机可以安全地在实现了此接口的类上使用clone方法。在java虚拟机中，只有实现了这个接口的类才可以被拷贝，否则在运行时会抛出CloneNotSupportedException异常。</p></li><li><p>重写Object类中的clone方法。Java中，所有类的父类都是Object类，Object类中有一个clone方法，作用是返回对象的一个拷贝，但是其作用域protected类型的，一般的类无法调用，因此，Prototype类需要将clone方法的作用域修改为public类型。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"this is Circle"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"this is rectangle"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeMap</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, Shape&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String string, Shape shape)</span></span>&#123;</span><br><span class="line">    map.put(string, shape);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Shape <span class="title">get</span><span class="params">(String string)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    Shape shape = map.get(string);</span><br><span class="line">    <span class="comment">//这里是核心我们获取到这个对象之后使用clone方法</span></span><br><span class="line">    <span class="keyword">return</span> (Shape) shape.clone();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    ShapeMap shapeMap = <span class="keyword">new</span> ShapeMap();</span><br><span class="line">    Shape circle = <span class="keyword">new</span> Circle();</span><br><span class="line">    Shape rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">    shapeMap.register(<span class="string">"circle"</span>, circle);</span><br><span class="line">    shapeMap.register(<span class="string">"rectangle"</span>, rectangle);</span><br><span class="line">    Shape circleClone = shapeMap.get(<span class="string">"circle"</span>);</span><br><span class="line">    Shape rectangleClone = shapeMap.get(<span class="string">"rectangle"</span>);</span><br><span class="line">    circleClone.draw();</span><br><span class="line">    rectangleClone.draw();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  最后输出打印</p><p>  this is Circle</p><p>  this is rectangle</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Prototype模式&quot;&gt;&lt;a href=&quot;#什么是Prototype模式&quot; class=&quot;headerlink&quot; title=&quot;什么是Prototype模式&quot;&gt;&lt;/a&gt;什么是Prototype模式&lt;/h2&gt;&lt;p&gt;  Prototype模式(原型模式)指的就
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6学习——day02</title>
    <link href="https://francisqiang.github.io/2019/06/02/ES6%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94day02/"/>
    <id>https://francisqiang.github.io/2019/06/02/ES6学习——day02/</id>
    <published>2019-06-02T11:24:15.000Z</published>
    <updated>2019-06-02T12:03:38.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h2><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>  这个参数默认值有些像Java里面注解的默认值，跟dart语言中的默认值有着神似之处，要不然怎么说dart和js很像呢。</p><p>  先上代码吧</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x, y = <span class="string">'world'</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    test(<span class="string">'hello'</span>); <span class="comment">//打印出来 hello world,当然也可以对y赋值进行更改</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">'test'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">x, y = x</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    test2(<span class="string">'kill'</span>); <span class="comment">//输出kill kill 可见x的值为kill</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>  rest参数就是… , 应用场景就是在参数数量可变或者不可预知的时候使用的，这时候…后面的形参会被变成数组传进函数，跟java的…差不多，只是java里面是这样的(java8新特性)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>... arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i: arr)&#123;</span><br><span class="line">        <span class="comment">//打印出参数i</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  js代码是这样的</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//rest参数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test3</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//将输入的参数都转为数组</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> arg)&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'rest'</span>,v);<span class="comment">//a b c</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  test3(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将数组转成离散的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]);<span class="comment">//1 2 4</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]);<span class="comment">//a 1 2 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h3><p>  其实就是某个函数的最后一步再调用另一个函数，使用递归函数就经常会有尾递归的情况</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//尾调用：函数的最后一句话是不是函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">tail</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'tail'</span>,x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fx</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> tail(x);</span><br><span class="line">  &#125;</span><br><span class="line">  fx(<span class="number">123</span>);<span class="comment">//tail 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>  一个革命性的新特性，向着函数式编程挺进。在java里面有lambda表达式(-&gt;)，dart中跟js一样是=&gt;，就叫它胖箭头吧。。。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这里的arrow其实就是一个函数</span></span><br><span class="line">    <span class="keyword">let</span> arrow = <span class="function"><span class="params">v</span> =&gt;</span> v * <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(arrow(<span class="number">3</span>));  <span class="comment">// 6</span></span><br><span class="line">    <span class="keyword">let</span> arrow2 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this绑定"><a href="#this绑定" class="headerlink" title="this绑定"></a>this绑定</h3><p>  这是一个概念性的问题，在没有箭头函数的函数里面，this就是代表调用这个函数的对象，所以当一个函数中调用另一个函数的时候this可能会发生变化。但是在箭头函数中，this是代表调用这个(箭头函数的函数)的对象，所以箭头函数会是this不变化，不是绝对的具体看情况。</p><h2 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h2><p>  这里的对象是指Object</p><h3 id="简洁表达式"><a href="#简洁表达式" class="headerlink" title="简洁表达式"></a>简洁表达式</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> o = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">let</span> k = <span class="number">2</span>;</span><br><span class="line"> <span class="keyword">let</span> es5 = &#123;</span><br><span class="line">     o: o,</span><br><span class="line">     K: k</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">let</span> es6 = &#123;</span><br><span class="line">     o,</span><br><span class="line">     k</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> es5_mrthod=&#123;</span><br><span class="line">   hello:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">let</span> es6_method=&#123;</span><br><span class="line">     hello()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="属性表达式"><a href="#属性表达式" class="headerlink" title="属性表达式"></a>属性表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性表达式</span></span><br><span class="line"><span class="keyword">let</span> a=<span class="string">'b'</span>;</span><br><span class="line"><span class="keyword">let</span> es5_obj=&#123;</span><br><span class="line">    a: <span class="string">'c'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> es6_obj=&#123;</span><br><span class="line">    [a]:<span class="string">'c'</span> <span class="comment">//这里的a是变量，即b</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(es5_obj,es6_obj);</span><br></pre></td></tr></table></figure><h3 id="新增API"><a href="#新增API" class="headerlink" title="新增API"></a>新增API</h3><h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'字符串'</span>,<span class="built_in">Object</span>.is(<span class="string">'abc'</span>,<span class="string">'abc'</span>));<span class="comment">//true 相当于===</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'数组'</span>,<span class="built_in">Object</span>.is([],[]),[]===[]);<span class="comment">//false false 引用地址不同</span></span><br></pre></td></tr></table></figure><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><p>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p><p>语法：Object.assign(target, …sources); 返回拷贝后的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> object2 = <span class="built_in">Object</span>.assign(&#123;<span class="attr">c</span>: <span class="number">4</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;, object1);</span><br><span class="line"><span class="built_in">console</span>.log(object2.c, object2.d);</span><br><span class="line"><span class="comment">// expected output: 3 5</span></span><br></pre></td></tr></table></figure><h4 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test=&#123;<span class="attr">k</span>:<span class="number">123</span>,<span class="attr">o</span>:<span class="number">456</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(test))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数扩展&quot;&gt;&lt;a href=&quot;#函数扩展&quot; class=&quot;headerlink&quot; title=&quot;函数扩展&quot;&gt;&lt;/a&gt;函数扩展&lt;/h2&gt;&lt;h3 id=&quot;参数默认值&quot;&gt;&lt;a href=&quot;#参数默认值&quot; class=&quot;headerlink&quot; title=&quot;参数默认值&quot;&gt;
      
    
    </summary>
    
      <category term="ES6" scheme="https://francisqiang.github.io/categories/ES6/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6学习——day01</title>
    <link href="https://francisqiang.github.io/2019/06/01/ES6%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94day01/"/>
    <id>https://francisqiang.github.io/2019/06/01/ES6学习——day01/</id>
    <published>2019-06-01T02:14:53.000Z</published>
    <updated>2019-06-01T03:17:22.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>  前段时间学习的mysql到现在还停留在day1阶段，现在就突然学es6。其实我是这么想的 因为这段时间在帮老师弄前端项目，用的JQuery。我想着这东西比较老，然后想用vue逐渐替换掉(做一次尝试吧)，学完vue发现还需要es6的基础，所以看了一下es6语法，并不是很难而且为我写js提供了更好地方法。那就学吧。。。</p><h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><p>  其实学习es6并不打算一个代码一个代码敲过来，可能眼高手低吧。我先学着反正也要项目中使用es6，那我项目中使用多练练吧。</p><p>  在let 和 const之前我们都使用的是var声明变量。这里无非就是作用域的不同，let的作用域是块作用域简单来说就是大括号括起来的部分，而var是函数作用域，如果在全局声明那就全局的。然后let 不准重复声明，又因为es6强制开启了严格模式，所以变量不准在未声明之前引用，不然会报引用错误。</p><p>  而const就是常量，常量是不准重新赋值且声明时必须赋值。有个特殊一点的就是对象常量，对象常量里面的字段都是可以修改的，也许你认为这违反了常量，其实不是(有点像C++里面的常量指针)，在es6中常量对象意味着这个对象引用的地址是不改变的(因为对象是引用类型，所以值其实是地址)，但是里面的内容是可以改变的。这在我学习vuex全局变量的时候看到别人使用const定义全局的变量就很不解，原来是因为他们定义的是全局对象变量。</p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>  什么是解构赋值，它有很多分类，数组解构赋值(左右都是数组),对象解构赋值(左右都是对象),字符串解构赋值(左数组，右字符串)，布尔解构赋值，函数参数解构赋值(数组解构赋值在函数上的引用)，数值解构赋值</p><p>  数组解构赋值和对象解构赋值使用的比较多。</p><p>  数组解构赋值例子，在要对数组成员进行变量赋值的时候，尽量使用解构赋值</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个打印出来的ab就是1和2</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a,b,rest</span><br><span class="line">  [a, b] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a,b,rest</span><br><span class="line">  [a, b, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, rest);</span><br><span class="line">  <span class="comment">//打印结果ab还是1 2 但是rest是[3, 4, 5]数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//默认值</span></span><br><span class="line">  <span class="keyword">let</span> a,b</span><br><span class="line">  [a, b  = <span class="number">3</span>] = [<span class="number">1</span>]</span><br><span class="line">  <span class="built_in">console</span>.log(a, b)</span><br><span class="line">  <span class="comment">//结果是a为1 b为3  </span></span><br><span class="line">  <span class="comment">//如果b为赋值那么就是undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将两个变量交换</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">  [a, b] = [b, a]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取函数返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> a,b</span><br><span class="line">  [a, b] = f()</span><br><span class="line">  <span class="comment">//ab则为12</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择型获取</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> a,b</span><br><span class="line">  [a, , , b] = f()</span><br><span class="line">  <span class="comment">//这时候 a为1  b为6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  对象解构赋值例子</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//对象解构赋值</span></span><br><span class="line">  <span class="keyword">let</span> a,b</span><br><span class="line">  (&#123;a, b&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(a, b)</span><br><span class="line">  <span class="comment">//a为1b为2</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> o = &#123;<span class="attr">p</span>: <span class="number">42</span>, <span class="attr">q</span>: <span class="literal">true</span>&#125;</span><br><span class="line">  <span class="keyword">let</span> &#123;p, q&#125; = o</span><br><span class="line">  <span class="built_in">console</span>.log(p, q)</span><br><span class="line">  <span class="comment">//这里的p为42 ，q为true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用场景</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">    title: <span class="string">'abc'</span>,</span><br><span class="line">    test: [&#123;</span><br><span class="line">      title: <span class="string">'test'</span>,</span><br><span class="line">      desc: <span class="string">'description'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">title</span>: esTitle, <span class="attr">test</span>: [&#123;<span class="attr">title</span>: testTitle&#125;]&#125; = jsonData</span><br><span class="line">  <span class="built_in">console</span>.log(esTitle, testTitle)</span><br><span class="line">  <span class="comment">//这时候esTitle获取到的就是bc testTitle获取到的就是test</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h2><p>  其实就是对数组的api进行扩展了。</p><ul><li>Array.of()方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'arr'</span>, arr)     <span class="comment">//[3, 4, 5, 5, 3]</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'arr'</span>,<span class="built_in">Array</span>.of())   <span class="comment">//[]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Array.from()方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p=<span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</span><br><span class="line"><span class="keyword">let</span> pArr=<span class="built_in">Array</span>.from(p); <span class="comment">//将上面的集合转义成数组</span></span><br><span class="line">pArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item.textContent);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//map</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>],<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;<span class="keyword">return</span>   item + <span class="number">2</span>;&#125;));<span class="comment">//3 5 7</span></span><br></pre></td></tr></table></figure><ul><li>填充数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'fill-7'</span>,[<span class="number">1</span>,<span class="string">'a'</span>,<span class="literal">undefined</span>].fill(<span class="number">7</span>));<span class="comment">//[7,7,7]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'fill,pos'</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>].fill(<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//["a", 7, 7, "d", "e"] 1和3表示起始和截至位置，不包括位置3</span></span><br></pre></td></tr></table></figure><ul><li>获取索引和值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].keys())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'keys'</span>,index);<span class="comment">//0 1 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].values())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'values'</span>,value);<span class="comment">//1 c ks</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index,value] <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].entries())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//替换</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>));<span class="comment">//[4,2,3,4,5] （从0开始替换，从3开始读取，也就是第一个读取的数是4，4是截至位置，也就是在位置4之前，因此只取4）</span></span><br></pre></td></tr></table></figure><ul><li>查找和判断包含</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].find(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">3</span>;<span class="comment">//4，只找第一个</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">3</span>;<span class="comment">//3</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'number'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="number">1</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'number'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;反思&quot;&gt;&lt;a href=&quot;#反思&quot; class=&quot;headerlink&quot; title=&quot;反思&quot;&gt;&lt;/a&gt;反思&lt;/h2&gt;&lt;p&gt;  前段时间学习的mysql到现在还停留在day1阶段，现在就突然学es6。其实我是这么想的 因为这段时间在帮老师弄前端项目，用的JQuer
      
    
    </summary>
    
      <category term="ES6" scheme="https://francisqiang.github.io/categories/ES6/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——模板方法模式</title>
    <link href="https://francisqiang.github.io/2019/05/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/05/30/设计模式——模板方法模式/</id>
    <published>2019-05-30T15:11:45.000Z</published>
    <updated>2019-05-30T15:36:14.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是模板方法模式"><a href="#什么是模板方法模式" class="headerlink" title="什么是模板方法模式"></a>什么是模板方法模式</h2><p>  Template Method模式，我的理解就是它是一种抽象类实现方法的一种升级版的设计模式。所谓模板就是将某一种工序流程方法抽象成一个统一的模板，比如说我有一个绘画的模板，我们可以选择任何一种画笔，比如我使用红笔画这个模板画出来的就是红色的，我用蜡笔那就蜡笔画出来的画。</p><h2 id="模板方法的实现"><a href="#模板方法的实现" class="headerlink" title="模板方法的实现"></a>模板方法的实现</h2><p>  比如这时候我们有一个流程，流程中需要调用几个工序，这几个工序的顺序是不变的，但是具体的工序是会变化的。这时候我们就可以使用模板方法模式了。</p><p>  首先，我们先定义一个抽象类，这个抽象类里面有具体的模板方法和几个工序方法，工序方法是抽象方法(这个就需要子类去实现具体方法)，模板方法里需要调用这几个方法比如说先是工序1然后是工序2最后是工序4。</p><p>  当我们需要具体实现的时候，我们需要加一个类继承于这个抽象类并且实现它的抽象方法。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>  这里我就直接使用vs在md文件里手敲了，比较简单但最重要的是思想。</p><p>  首先是抽象类AbstractProcess</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProcess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">workOrder1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">workOrder2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">workOrder4</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        workOrder1();</span><br><span class="line">        workOrder2();</span><br><span class="line">        workOrder4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  然后是实现类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakePencilProcess</span> <span class="keyword">extends</span> <span class="title">AbstractProcess</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MakePencilProcess</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">workOrder1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is make pencil first"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">workOrder2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is make pencil second"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">workOrder4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is make pencil third"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  最后是客户端类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//里氏替换原则，更加灵活</span></span><br><span class="line">        AbstractProcess abstractProcess = <span class="keyword">new</span> MakePencilProcess();</span><br><span class="line">        abstractProcess.processTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>  这两天在看vue，突然有好多要学的现在有点不知所措，期末，练车，数据结构，设计模式，Java项目，大创，前端项目，vue，六级考试，操作系统实验。。。感觉自己野心有点太大了，慢慢来吧，不能太急。</p><p>  这几天突然意识到自己缺少了很多生活的记忆，尤其是前几天肝项目的时候，让我回忆那几天生活里干了啥我已经记不清了，我觉得我不能成为那样的呆子，那不是我，那也是我以前不想成为的人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是模板方法模式&quot;&gt;&lt;a href=&quot;#什么是模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;什么是模板方法模式&quot;&gt;&lt;/a&gt;什么是模板方法模式&lt;/h2&gt;&lt;p&gt;  Template Method模式，我的理解就是它是一种抽象类实现方法的一种升级
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——适配器模式</title>
    <link href="https://francisqiang.github.io/2019/05/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/05/29/设计模式——适配器模式/</id>
    <published>2019-05-29T12:31:26.000Z</published>
    <updated>2019-05-29T15:25:57.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是适配器模式"><a href="#什么是适配器模式" class="headerlink" title="什么是适配器模式"></a>什么是适配器模式</h2><p>  简单来说，适配器就是用来填补实际情况和需求两者之间地差异。比如说我们需要5V电压，但是国内只给的是220V电压，那我们现在就需要一个适配器帮我们将电压转换。</p><h2 id="通过继承方式实现适配器模式"><a href="#通过继承方式实现适配器模式" class="headerlink" title="通过继承方式实现适配器模式"></a>通过继承方式实现适配器模式</h2><p>  Adapter模式，比如我们有一个原本的类A，A中有一个a方法，这时候我们有一个B类需要A中的a方法，但是它不能直接调用(因为某个原因不匹配，但是B确实需要a方法)，这时候我们可以通过一个C适配器类来包装A类的a方法，我们需要做的就是让C继承A类拥有A类的a方法，然后我们再让C实现B接口(B是一个接口),B类有一个方法时b方法(b方法可以理解为将来需要将a封装或者使用a方法的方法),这时候C适配器就重写了B接口的b方法，当我们B接口需要使用b方法的时候我们new一个C适配器类就行了(拿C实现B接口)。</p><p>  示例代码：</p><p>  我们有一个Banner类，Banner类中有showWithParen，showWithAster方法，这两个方法分别是在使用括号括住字符串和使用两个*包住字符串。然后我们有一个Print接口，这个接口有weakPrint和strongPrint方法，其实这两个方法需要使用showWithParen，showWithAster方法，所以我们可以添加一个适配器，让这个适配器作为Print的实现类，我们在适配器中继承Banner并调用Banner中的showWithParen，showWithAster方法，然后在封装这两个方法成为Print接口需要使用的方法就行了。</p><p>  Banner类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banner</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String string;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.string = string;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Banner</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Banner</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.string = string;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showWithParen</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"("</span> + string + <span class="string">")"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showWithAster</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"*"</span> + string + <span class="string">"*"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  Print接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">weakPrint</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">strongPrint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PrintBanner适配器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintBanner</span> <span class="keyword">extends</span> <span class="title">Banner</span> <span class="keyword">implements</span> <span class="title">Print</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PrintBanner</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(string);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weakPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    showWithParen();</span><br><span class="line">    System.out.println(<span class="string">"weak"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strongPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    showWithAster();</span><br><span class="line">    System.out.println(<span class="string">"strong"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  客户端类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Print print = <span class="keyword">new</span> PrintBanner(<span class="string">"12345"</span>);</span><br><span class="line">    print.weakPrint();</span><br><span class="line">    print.strongPrint();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用委托方式实现适配器模式"><a href="#使用委托方式实现适配器模式" class="headerlink" title="使用委托方式实现适配器模式"></a>使用委托方式实现适配器模式</h2><p>  其实使用委托的方法就是改动一下适配器类，使适配器不是继承原来的类而是拥有原来的类，将是一个变为有一个在面向对象里会有很多好处。这貌似是Java编程思想里看到的，，，我也忘了。</p><p>  这时候我们需要改动一下适配器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintBanner</span> <span class="keyword">implements</span> <span class="title">Print</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Banner banner;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PrintBanner</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.banner = <span class="keyword">new</span> Banner(string);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weakPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    banner.showWithParen();</span><br><span class="line">    System.out.println(<span class="string">"weak"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strongPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    banner.showWithAster();</span><br><span class="line">    System.out.println(<span class="string">"strong"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是适配器模式&quot;&gt;&lt;a href=&quot;#什么是适配器模式&quot; class=&quot;headerlink&quot; title=&quot;什么是适配器模式&quot;&gt;&lt;/a&gt;什么是适配器模式&lt;/h2&gt;&lt;p&gt;  简单来说，适配器就是用来填补实际情况和需求两者之间地差异。比如说我们需要5V电压，但是国
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
</feed>
