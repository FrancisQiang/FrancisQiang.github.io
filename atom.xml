<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Francis的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://francisqiang.github.io/"/>
  <updated>2019-08-04T13:16:18.838Z</updated>
  <id>https://francisqiang.github.io/</id>
  
  <author>
    <name>Francis Qiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式——备忘录模式</title>
    <link href="https://francisqiang.github.io/2019/08/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/08/04/设计模式——备忘录模式/</id>
    <published>2019-08-04T09:32:16.000Z</published>
    <updated>2019-08-04T13:16:18.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是备忘录模式"><a href="#什么是备忘录模式" class="headerlink" title="什么是备忘录模式"></a>什么是备忘录模式</h2><p>  备忘录是指在不破坏封装性的前提下，捕获一个对象的内部状态，并在对象外部保存状态。而状态保存的地方就是备忘录对象，并且再创建一个备忘录的管理类来管理一系列的状态，在用户操作的时候，用户不与备忘录直接耦合而与备忘录的管理类相耦合。相应的我们就可以做一些操作比如回滚，撤销等。</p><h2 id="备忘录的UML图"><a href="#备忘录的UML图" class="headerlink" title="备忘录的UML图"></a>备忘录的UML图</h2><p>  <img src="/2019/08/04/设计模式——备忘录模式/1.jpg" alt="UML"></p><p>  originator是指需要保存状态的对象，Memento是聚合了状态的备忘录对象，CareTaker是存储了备忘录对象集合的备忘录管理类。</p><p>  在originator中需要有一个方法是将状态保存到备忘录对象中，并且在备忘录管理类中需要有备忘录对象的增加删除方法。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Memento <span class="title">saveToMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Memento(<span class="keyword">this</span>.state);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStateFromMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = memento.getState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"当前状态为:"</span> + <span class="keyword">this</span>.state);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">    mementoList.add(memento);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mementoList.get(index);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line"></span><br><span class="line">    CareTaker careTaker = <span class="keyword">new</span> CareTaker();</span><br><span class="line"></span><br><span class="line">    originator.setState(<span class="string">"状态1"</span>);</span><br><span class="line">    careTaker.addMemento(originator.saveToMemento());</span><br><span class="line"></span><br><span class="line">    originator.display();</span><br><span class="line"></span><br><span class="line">    originator.setState(<span class="string">"状态2"</span>);</span><br><span class="line">    careTaker.addMemento(originator.saveToMemento());</span><br><span class="line"></span><br><span class="line">    originator.display();</span><br><span class="line"></span><br><span class="line">    originator.setState(careTaker.getMemento(<span class="number">0</span>).getState());</span><br><span class="line"></span><br><span class="line">    originator.display();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是备忘录模式&quot;&gt;&lt;a href=&quot;#什么是备忘录模式&quot; class=&quot;headerlink&quot; title=&quot;什么是备忘录模式&quot;&gt;&lt;/a&gt;什么是备忘录模式&lt;/h2&gt;&lt;p&gt;  备忘录是指在不破坏封装性的前提下，捕获一个对象的内部状态，并在对象外部保存状态。而状态保
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——Command模式</title>
    <link href="https://francisqiang.github.io/2019/08/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94Command%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/08/04/设计模式——Command模式/</id>
    <published>2019-08-04T04:46:06.000Z</published>
    <updated>2019-08-04T06:37:00.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Command模式"><a href="#什么是Command模式" class="headerlink" title="什么是Command模式"></a>什么是Command模式</h2><p>  所谓命令模式，必然存在三个角色——命令发起者、命令、命令接收者。即命令这个角色使发起者和接收者实现了解耦。试想一下，如果没有中间层命令，那么命令发起者必须聚合接收者，如果有了命令，那么发起者和接受者则通过命令来实现联系。</p><h2 id="Command的UML图"><a href="#Command的UML图" class="headerlink" title="Command的UML图"></a>Command的UML图</h2><p><img src="/2019/08/04/设计模式——Command模式/1.jpg" alt="UML"></p><p>  Command是一个接口，其中定义了执行和撤销的方法，而ConcreteCommand是实现了Command的具体命令，这个具体命令是Invoker(发起者)和Receiver(接收者)的“桥梁”。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行命令的接收者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"on"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"off"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体的命令角色 拥有命令接受者 并调用接收者的action</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> CommandReceiver commandReceiver;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(CommandReceiver commandReceiver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.commandReceiver = commandReceiver;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    commandReceiver.on();</span><br><span class="line">    System.out.println(<span class="string">"light on"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    commandReceiver.off();</span><br><span class="line">    System.out.println(<span class="string">"light off"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> CommandReceiver commandReceiver;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(CommandReceiver commandReceiver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.commandReceiver = commandReceiver;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    commandReceiver.off();</span><br><span class="line">    System.out.println(<span class="string">"light off"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    commandReceiver.on();</span><br><span class="line">    System.out.println(<span class="string">"light on"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空命令 也是一种设计模式 是我们少做空判断 加强逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令发起者 聚合的是命令的集合或者单个命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Command[] onCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Command[] offCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Command undoCommand = <span class="keyword">new</span> NoCommand();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Command[] getOnCommands() &#123;</span><br><span class="line">    <span class="keyword">return</span> onCommands;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCommands</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    onCommands[<span class="number">0</span>] = <span class="keyword">new</span> LightOnCommand(<span class="keyword">new</span> CommandReceiver());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Command[] getOffCommands() &#123;</span><br><span class="line">    <span class="keyword">return</span> offCommands;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOffCommands</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    offCommands[<span class="number">0</span>] = <span class="keyword">new</span> LightOffCommand(<span class="keyword">new</span> CommandReceiver());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButton</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    undoCommand = <span class="keyword">this</span>.onCommands[n];</span><br><span class="line">    <span class="keyword">this</span>.onCommands[n].execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButton</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    undoCommand = <span class="keyword">this</span>.offCommands[n];</span><br><span class="line">    <span class="keyword">this</span>.offCommands[n].execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    undoCommand.undo();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RemoteControl remoteControl = <span class="keyword">new</span> RemoteControl();</span><br><span class="line">    remoteControl.setOnCommands();</span><br><span class="line">    remoteControl.setOffCommands();</span><br><span class="line"></span><br><span class="line">    remoteControl.onButton(<span class="number">0</span>);</span><br><span class="line">    remoteControl.offButton(<span class="number">0</span>);</span><br><span class="line">    remoteControl.undo();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Command模式的优点和不足"><a href="#Command模式的优点和不足" class="headerlink" title="Command模式的优点和不足"></a>Command模式的优点和不足</h2><p>  实现命令发起者和接受者之间的解耦，命令发起者不需要知道接受者是谁。</p><p>  容易设计一个命令队列，并使用多线程去操作。</p><p>  但是提高了系统的复杂度，可能会导致命令的具体类过多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Command模式&quot;&gt;&lt;a href=&quot;#什么是Command模式&quot; class=&quot;headerlink&quot; title=&quot;什么是Command模式&quot;&gt;&lt;/a&gt;什么是Command模式&lt;/h2&gt;&lt;p&gt;  所谓命令模式，必然存在三个角色——命令发起者、命令、命令
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——JDK动态代理原理</title>
    <link href="https://francisqiang.github.io/2019/08/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86/"/>
    <id>https://francisqiang.github.io/2019/08/02/设计模式——JDK动态代理原理/</id>
    <published>2019-08-02T06:10:57.000Z</published>
    <updated>2019-08-02T13:03:11.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是动态代理"><a href="#什么是动态代理" class="headerlink" title="什么是动态代理"></a>什么是动态代理</h2><p>  动态代理就是在运行时生成动态的代理对象，静态代理是通过接口，封装来实现对特定对象的代理，而动态代理则可以在运行时通过反射或者字节码来动态生成代理对象，而不仅仅只针对于特定对象。</p><p>  动态代理分为两种: JDK动态代理和Cglib动态代理，前者是通过反射实现，后者是通过字节码实现，这篇博客主要讲解JDK动态代理的基本原理。</p><p>  我们知道，在静态代理中，我们的代理类需要实现和被代理对象相同的接口并且聚合该代理对象，在实现重写接口方法的时候调用本身聚合的对象的实现方法从而来解决代理问题。</p><p>  在JDK动态代理中，其实思想和静态代理差不多，最重要的区别只是JDK动态代理通过反射来实现静态代理，是静态模式动态化。</p><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Invoking sayHello"</span>);</span><br><span class="line">    Object result = method.invoke(target, args);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDynamicProxy</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    HelloImpl hello = <span class="keyword">new</span> HelloImpl();</span><br><span class="line">    MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler(hello);</span><br><span class="line"></span><br><span class="line">    Hello proxyHello = (Hello) Proxy.newProxyInstance(HelloImpl.class.getClassLoader(),hello.getClass().getInterfaces(),handler);</span><br><span class="line"></span><br><span class="line">    proxyHello.sayHello();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码浅析"><a href="#源码浅析" class="headerlink" title="源码浅析"></a>源码浅析</h2><p>  我们要阅读源码首先要知道整个流程大概干了什么。</p><p>  我们先从使用中来猜测，我们实现了自己的InvocationHandler，这个Handler中有一个target字段，这个target指的就是被代理对象(即目标类),在被重写的invoke方法中我们通过method和args来调用target的与之对应的方法，并且在整个invoke方法中我们对它做了一些增加(即代理方法)。</p><p>  我们还可以发现，我们的HelloImpl被代理类需要实现一个接口，这也是JDK动态代理的要求，毕竟它是通过接口来实现的。</p><p>  在客户端主方法中我们new了一个HelloImpl对象然后将这个对象传入自己实现的InvocationHandler中，最后通过Proxy类中的newProxyInstance方法来获取代理对象，我们可以发现代理对象也是实现了Hello接口的，这和我们静态代理的实现方法是一样的！</p><p>  我们再来看一下newProxyInstance方法中的三个参数。</p><p>  首先第一个是ClassLoader这个就是指当前加载该类的类加载器，第二个是该类实现的接口，第三个就是handler。</p><p>  最容易理解的就是handler，因为我们具体代理逻辑是写在handler中的，所以肯定要传。而interfaces是因为整个JDK动态代理需要接口的支持，我们暂且不管，这个需要后面有个整体观念。而第一个类加载器是为什么，具体用来做什么？</p><p>  其实JDK动态代理就是通过传入handler和接口来通过反射来编写代理类的.java文件，然后通过编译器进行编译，最后通过类加载器load进内存。这样三个参数的作用就明了了</p><p>  动态代理做主要的就是那个newProxyInstance我们首先来看一下这个类具体做了什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span><span class="keyword">throws</span> IllegalArgumentException</span>&#123;</span><br><span class="line">        Objects.requireNonNull(h);</span><br><span class="line">        <span class="comment">// 获取克隆的接口集</span></span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">        <span class="comment">// 做一些校验</span></span><br><span class="line">        <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成class</span></span><br><span class="line">        <span class="comment">// 其中包括获取生成.java 编译 类加载过程</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 校验</span></span><br><span class="line">            <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">                checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取class的构造器，这里params是InvocationHandler，所以在上面的代码会给我们生成，拥有InvocationHandler对象的代理类，并且有相应的构造方法。</span></span><br><span class="line">            <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">            <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">            <span class="comment">// 判断权限 如果是private 那么更改为public</span></span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">                AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过构造器new出代理对象</span></span><br><span class="line">            <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            Throwable t = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  我们再来看一下getProxyClass0方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个方法传入类加载器和接口</span></span><br><span class="line"><span class="comment">// 注意这里没有InvocationHandler，其实也可以理解，InvocationHandler只是个接口，对于代理对象的handler字段可以写死为InvacationHandler</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class="line">                                           Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 如果接口数量大于多少 抛出异常</span></span><br><span class="line"> <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"interface limit exceeded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里值 先从缓冲中取，如果没有那么从ProxyClassFactory中制造</span></span><br><span class="line">     <span class="comment">// If the proxy class defined by the given loader implementing</span></span><br><span class="line">     <span class="comment">// the given interfaces exists, this will simply return the cached copy;</span></span><br><span class="line">     <span class="comment">// otherwise, it will create the proxy class via the ProxyClassFactory</span></span><br><span class="line">     <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我们来看一下ProxyClassFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClassFactory</span></span></span><br><span class="line">    implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 类的前缀</span></span><br><span class="line">    <span class="comment">// prefix for all proxy class names</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">"$Proxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 唯一的值</span></span><br><span class="line">    <span class="comment">// next number to use for generation of unique proxy class names</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Verify that the class loader resolves the name of this</span></span><br><span class="line"><span class="comment">             * interface to the same Class object.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获取接口class</span></span><br><span class="line">                interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    intf + <span class="string">" is not visible from class loader"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Verify that the Class object actually represents an</span></span><br><span class="line"><span class="comment">             * interface.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">             <span class="comment">// 验证是否是接口</span></span><br><span class="line">            <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    interfaceClass.getName() + <span class="string">" is not an interface"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Verify that this interface is not a duplicate.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"repeated interface: "</span> + interfaceClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接包名逻辑</span></span><br><span class="line">        String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></span><br><span class="line">        <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Record the package of a non-public proxy interface so that the</span></span><br><span class="line"><span class="comment">         * proxy class will be defined in the same package.  Verify that</span></span><br><span class="line"><span class="comment">         * all non-public proxy interfaces are in the same package.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">                accessFlags = Modifier.FINAL;</span><br><span class="line">                String name = intf.getName();</span><br><span class="line">                <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">                String pkg = ((n == -<span class="number">1</span>) ? <span class="string">""</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    proxyPkg = pkg;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"non-public interfaces from different packages"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// if no non-public proxy interfaces, use com.sun.proxy package</span></span><br><span class="line">            proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">"."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Choose a name for the proxy class to generate.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">        String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="comment">// 生成代理类的字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">            proxyName, interfaces, accessFlags);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将字节码加载进JVM</span></span><br><span class="line">            <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                                proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * A ClassFormatError here means that (barring bugs in the</span></span><br><span class="line"><span class="comment">             * proxy class generation code) there was some other</span></span><br><span class="line"><span class="comment">             * invalid aspect of the arguments supplied to the proxy</span></span><br><span class="line"><span class="comment">             * class creation (such as virtual machine limitations</span></span><br><span class="line"><span class="comment">             * exceeded).</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我们来看一下生成的字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、所有JDK动态代理  都是Proxy的子类  且自己是final类</span></span><br><span class="line"><span class="comment">// 2、实现了你所需要代理得接口</span></span><br><span class="line"><span class="comment">// 3、代理类整体看起来都是非常简单的  我们发现不管调用哪个方法，最终都是交给了InvocationHandler.invoke()方法  这也就是为什么需要我们提供这个接口的实现类的原因吧</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Helloworld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反射给Method赋值   这里我们得出结论</span></span><br><span class="line">    <span class="comment">// Object的三个方法equals/toString/hashCode最终都是会被代理的</span></span><br><span class="line">    <span class="comment">// m3是我们HelloService自己的业务方法</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m3 = Class.forName(<span class="string">"com.proxy.Helloworld"</span>).getMethod(<span class="string">"sayHello"</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造函数  </span></span><br><span class="line">    <span class="comment">// 传入了InvocationHandler</span></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用了handler的invoke方法</span></span><br><span class="line">            <span class="comment">// 而具体的代理逻辑都在handler的invoke方法中实现</span></span><br><span class="line">            <span class="comment">// handler中持有被代理对象 并且会在他自己的invoke中实现代理逻辑</span></span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是动态代理&quot;&gt;&lt;a href=&quot;#什么是动态代理&quot; class=&quot;headerlink&quot; title=&quot;什么是动态代理&quot;&gt;&lt;/a&gt;什么是动态代理&lt;/h2&gt;&lt;p&gt;  动态代理就是在运行时生成动态的代理对象，静态代理是通过接口，封装来实现对特定对象的代理，而动态代
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——桥接模式</title>
    <link href="https://francisqiang.github.io/2019/08/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/08/01/设计模式——桥接模式/</id>
    <published>2019-08-01T05:02:09.000Z</published>
    <updated>2019-08-01T05:41:29.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桥接模式简介-Bridge"><a href="#桥接模式简介-Bridge" class="headerlink" title="桥接模式简介(Bridge)"></a>桥接模式简介(Bridge)</h2><p>  桥接模式是指将抽象和实现放入两个不同层次，使它们能任意改变。比如我们设计一个手机的类，其中有翻盖手机，直板手机，触屏手机。。然后每个手机又有不同的牌子，比如vivo，小米，华为。。。试想，如果我们通过面向对象继承来实现的话，我们需要创造n*n个类比如vivo翻盖，vivo直板，小米触屏。。。这样就会产生类爆炸，而且当我们想扩展比如一个旋转手机，那么我们还需要去创造不同品牌的手机先然后再创建xxx旋转手机的类，即当我们需要增加样式的时候，我们需要增加所有品牌的手机，这样就违反了单一职责原则。</p><p>  <img src="/2019/08/01/设计模式——桥接模式/1.jpg" alt="传统UML"></p><p>  而桥接模式基于类的最小设计原则，桥接模式是一种结构型模式，它通过聚合和继承来将两个变化的层次分离开来，从而保持类的可扩展性。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>  <img src="/2019/08/01/设计模式——桥接模式/2.jpg" alt="UML"></p><p>  其中Abstraction和RefinedAbstraction就是抽象层，而右边的Implementor就是实现层，在桥接模式中，抽象层就充当桥的部分将客户端和实现相连。在抽象层中聚合了实现，比如说我们可以将手机作为一个抽象Abstraction然后我们去实现不同类型的手机，比如说直板，触屏等，然后这个抽象类中聚合了一个品牌brand的接口,如果需要实现不同品牌类型的手机，只需要去实现brand接口然后将它聚合到抽象层中就行了。</p><p>  这样，手机就可以这样设计了</p><p>  <img src="/2019/08/01/设计模式——桥接模式/3.jpg" alt="手机UML"></p><p>  这样，桥接模式来代替继承可以有效地减少类的个数，而且易于扩展维护，有助于系统的分层设计，但是桥接模式需要辨别出两个变化的部分——抽象和实现，所以使用范围有一定的局限性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;桥接模式简介-Bridge&quot;&gt;&lt;a href=&quot;#桥接模式简介-Bridge&quot; class=&quot;headerlink&quot; title=&quot;桥接模式简介(Bridge)&quot;&gt;&lt;/a&gt;桥接模式简介(Bridge)&lt;/h2&gt;&lt;p&gt;  桥接模式是指将抽象和实现放入两个不同层次，使
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——享元模式</title>
    <link href="https://francisqiang.github.io/2019/07/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/07/31/设计模式——享元模式/</id>
    <published>2019-07-31T12:16:52.000Z</published>
    <updated>2019-07-31T12:43:31.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是享元模式"><a href="#什么是享元模式" class="headerlink" title="什么是享元模式"></a>什么是享元模式</h2><p>  池技术是享元模式运用的一个经典了，享元模式是使用户共享相似对象的一种设计模式，比如在数据库连接池中，里面会放置很多已经创建好的连接对象，如果要使用相似的对象可以直接在池中取，这样就节省了大量对象的创建。所以，享元模式一般运用在系统底层来提高系统性能，像String常量池，数据库连接池，缓冲池中都有使用。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>  <img src="/2019/07/31/设计模式——享元模式/1.jpg" alt="UML"></p><p>  这里最重要的就是FlyWeightFactory，这里面一般会存放一个map用来存储需要共享的元对象，当我们需要创建新对象的时候，会先检查池中是否已经有相似对象，如果有直接从池中取。</p><h2 id="外部状态和内部状态"><a href="#外部状态和内部状态" class="headerlink" title="外部状态和内部状态"></a>外部状态和内部状态</h2><p>  内部状态指的是共享对象的一些不可改变的状态，它们是固定的，比如我们需要共享一些棋子，对于棋子来说，其颜色黑白两色是它的内部状态是共享出去的，而且不会变。而棋子的内部状态来说可以使棋子的位置，这是一直会发生变化的，而且它不是共享出去的，是由使用者决定的。</p><h2 id="享元模式在Integer中的应用"><a href="#享元模式在Integer中的应用" class="headerlink" title="享元模式在Integer中的应用"></a>享元模式在Integer中的应用</h2><p>  在Integer的静态方法valueOf中我们创造一个Integer对象会先从预先定义好的缓冲池中去取。</p><p>  <img src="/2019/07/31/设计模式——享元模式/2.jpg" alt="Integer的valueOf方法"></p><p>  如果范围是-128~127会直接从缓冲池中取出对象，不然再创建新对象，这样就能减少对象的频繁创建。</p><p>  我们可以看到缓冲池中会预先给我们存放元对象于数组中(在静态块中执行)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> j = low;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是享元模式&quot;&gt;&lt;a href=&quot;#什么是享元模式&quot; class=&quot;headerlink&quot; title=&quot;什么是享元模式&quot;&gt;&lt;/a&gt;什么是享元模式&lt;/h2&gt;&lt;p&gt;  池技术是享元模式运用的一个经典了，享元模式是使用户共享相似对象的一种设计模式，比如在数据库连接池
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——门面模式</title>
    <link href="https://francisqiang.github.io/2019/07/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/07/31/设计模式——门面模式/</id>
    <published>2019-07-31T11:42:17.000Z</published>
    <updated>2019-07-31T12:06:25.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是门面模式-Facade"><a href="#什么是门面模式-Facade" class="headerlink" title="什么是门面模式(Facade)"></a>什么是门面模式(Facade)</h2><p>  门面模式也叫外观模式，是一种结构型设计模式。门面模式屏蔽了系统方法调用的复杂性，呈现给客户端的是一个抽象简单的接口，降低了客户端使用系统的复杂度。让客户端和系统之间解耦，还能使我们更好地划分层次结构。而且在我们重新开发新系统，我们可以使用门面模式来复用旧系统中需要调用的一系列方法，并合并成一个接口来呈现给新系统api。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>  例如，我们需要设计一个家庭影院，其中启动家庭影院可能会有那么几步：</p><ol><li><p>启动荧幕</p></li><li><p>启动投影机</p></li><li><p>关闭房间等</p></li><li><p>打开爆米花等等</p><p>试想，如果我们提供给用户的是上述四个启动接口，对于用户来说实在是太不友好，所以我们可以设计一个接口包含四个对象然后在接口中实现一键启动，这样对于用户来说就非常方便了</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是门面模式-Facade&quot;&gt;&lt;a href=&quot;#什么是门面模式-Facade&quot; class=&quot;headerlink&quot; title=&quot;什么是门面模式(Facade)&quot;&gt;&lt;/a&gt;什么是门面模式(Facade)&lt;/h2&gt;&lt;p&gt;  门面模式也叫外观模式，是一种结构型设
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter——浅析Widget原理</title>
    <link href="https://francisqiang.github.io/2019/07/26/Flutter%E2%80%94%E2%80%94%E6%B5%85%E6%9E%90Widget%E5%8E%9F%E7%90%86/"/>
    <id>https://francisqiang.github.io/2019/07/26/Flutter——浅析Widget原理/</id>
    <published>2019-07-26T09:07:17.000Z</published>
    <updated>2019-07-26T10:41:00.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Widget渲染过程"><a href="#Widget渲染过程" class="headerlink" title="Widget渲染过程"></a>Widget渲染过程</h2><p>  在进行App开发的时候，我们往往会关注的一个问题是：如何结构化地组织视图数据，提供渲染引擎，最终完成界面显示。</p><p>  通常情况下，不同UI框架都会以不同方式去处理这一个问题，但无一例外都会用到视图树(View Tree)的概念，而Flutter将视图树的概念进行了扩展，把视图树的组织和渲染抽象为三部分，即Widget，Element和RenderObject。</p><p>  <img src="/2019/07/26/Flutter——浅析Widget原理/1.jpg" alt="widget,element和renderObject"></p><h2 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h2><p>  很多人理解为Widget为一个组件其实并不是完全正确的，Widget只是一个数据配置信息，它是组件实现的基本逻辑单位，它里面存储了有关视图渲染的配置信息，比如布局，渲染属性，事件相应信息等等。</p><p>  当视图渲染信息发生变化的时候，Flutter会选择重建Widget树的方式进行数据更新。</p><p>  但，你可想到的是——当Widget树层次很深的时候，只要视图渲染信息发生变化的时候会涉及到大量的Widget的销毁和重建，这样会对垃圾回收造成一定的压力。但是Widget它只是一个数据配置对象，它是一个轻量级的数据结构，不涉及实际渲染位图，重建的成本很低。</p><p>  另外，由于Widget的不可变性，可以以较低成本进行渲染节点复用，因此在一个真实的渲染树中可能存在不同的Widget对应同一个渲染节点的情况，这无疑又降低了重建UI的成本。</p><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><p>  Element是Widget的一个实例化对象，它是配置信息到最终模型数据成型的桥梁。</p><p>  Flutter渲染过程，可以分为这三步：</p><ul><li><p>首先通过Widget树生成对应的Element树</p></li><li><p>然后，创建相应的RenderObject并关联到Element.renderObject属性上</p></li><li><p>最后，构建RenderObject树，来完成最终的渲染</p><p>可以看到其实Widget和Element都不负责视图的渲染，最终干活的只是RenderObject。Widget和Element只是负责发号施令，但是既然都是发号施令，为什么不直接通过Widget去控制RenderObject的渲染呢？其实本来三者就可以结合在一起，分为两者是为了数据信息和处理信息的解耦，而分为三者也是为了解耦。</p><p>因为Widget具有不可变性，每次改变都需要重建，如果Widget直接关联RenderObject，那么就意味着Widget的重建必然会导致RenderObject的重建，而RenderObject是负责渲染过程的，所以RenderObject的重建会非常影响性能，Element就是为了解决这个问题的，为了解决Widget和RenderObject的耦合问题，Element充当了中间的抽象层，它会和Widget中的数据进行同步，只将需要修改的部分同步到真实的RenderObject树中，最大程度降低对真实渲染视图的修改，提高渲染效率，而不是销毁整个渲染视图树。</p><p>这，就是Element存在的意义。</p></li></ul><h2 id="RenderObject"><a href="#RenderObject" class="headerlink" title="RenderObject"></a>RenderObject</h2><p>  RenderObject主要负责实现视图渲染的对象。</p><p>  渲染对象树在Flutter的展示过程分为四个阶段——布局，绘制，合成和渲染。其中，布局和绘制在RenderObject中完成，Flutter采用深度优先机制遍历渲染对象树，确定树中各个对象的位置和尺寸，并把他们绘制到不同图层。绘制完毕后，合成和渲染的工作则交给Skia搞定。</p><p>  我们可以先了解一下图像的绘制原理，图像绘制需要三大主角——CPU，GPU，显示器</p><p>  CPU负责图像数据计算，GPU负责图像数据渲染，显示器负责最终图像显示。</p><p>  整个过程就是CPU将计算好的模型数据交给GPU，GPU完成渲染之后放入帧缓冲区，随后视频控制器根据垂直同步信号(vsync)以每秒60次的速度，从帧缓冲区读取帧数据交给显示器完成图像显示</p><p>  <img src="/2019/07/26/Flutter——浅析Widget原理/2.jpg" alt="Flutter图像显示原理"></p><p>  在图中CPU线程所做的事情其实就是RenderObject需要做的事情，我们上文所说渲染对象树在Flutter的展示过程分为布局，绘制，合成和渲染。其中合成和渲染其实就是上图中的GPU线程合成数据交给Skia然后Skia交个自身图像渲染引擎OpenGL来完成渲染。前面的布局和绘制则是RenderObject完成的。</p><p>  上文我们可以知道Widget负责存储控件信息如位置，大小，渲染属性，事件回应信息等，其实位置和大小就是布局，而渲染属性和等等其他信息其实就是绘制这一层了，RenderObject通过Element抽象层来连接到Widget中的数据，然后对Widget数的数据创建渲染对象树，然后创建真正的渲染模型对象数据交给GPU线程去完成真正的视图渲染。</p><h2 id="RenderObjectWidget"><a href="#RenderObjectWidget" class="headerlink" title="RenderObjectWidget"></a>RenderObjectWidget</h2><p>  在Flutter中有两个Widget，StatelessWidget和StatefulWidget，这两个Widget都是继承了Widget，但其实它们只是用来组装空间的容器并不负责组件最后的布局和绘制。在Flutter中，布局和绘制实际上是在Widget的另一个子类RenderObjectWidget内完成的。</p><p>  我们来看一下RenderObjectWidget的源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RenderObjectWidget</span> <span class="keyword">extends</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> RenderObjectWidget(&#123; Key key &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RenderObjectElement createElement();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  RenderObject createRenderObject(BuildContext context);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="keyword">void</span> updateRenderObject(BuildContext context, covariant RenderObject renderObject) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="keyword">void</span> didUnmountRenderObject(covariant RenderObject renderObject) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我们可以看到这个类有创建Element和RenderObject两个方法，还有更新和didUnmountRenderObject方法</p><p>  对于Element对象的创建，Flutter会在遍历Widget树时，调用createElement去同步Widget自身配置从而生成对应节点的Element对象，而对于RenderObject的创建和更新其实是在RenderObjectElement类中完成的</p><h2 id="RenderObjectElement"><a href="#RenderObjectElement" class="headerlink" title="RenderObjectElement"></a>RenderObjectElement</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RenderObjectElement</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Creates an element that uses the given widget as its configuration.</span></span><br><span class="line">  RenderObjectElement(RenderObjectWidget widget) : <span class="keyword">super</span>(widget);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RenderObjectWidget <span class="keyword">get</span> widget =&gt; <span class="keyword">super</span>.widget;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// The underlying [RenderObject] for this element.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RenderObject <span class="keyword">get</span> renderObject =&gt; _renderObject;</span><br><span class="line">  RenderObject _renderObject;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> mount(<span class="built_in">Element</span> parent, <span class="keyword">dynamic</span> newSlot) &#123;</span><br><span class="line">    <span class="keyword">super</span>.mount(parent, newSlot);</span><br><span class="line">    _renderObject = widget.createRenderObject(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">assert</span>(() &#123; _debugUpdateRenderObjectOwner(); <span class="keyword">return</span> <span class="keyword">true</span>; &#125;());</span><br><span class="line">    <span class="keyword">assert</span>(_slot == newSlot);</span><br><span class="line">    attachRenderObject(newSlot);</span><br><span class="line">    _dirty = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> update(covariant RenderObjectWidget newWidget) &#123;</span><br><span class="line">    <span class="keyword">super</span>.update(newWidget);</span><br><span class="line">    <span class="keyword">assert</span>(widget == newWidget);</span><br><span class="line">    <span class="keyword">assert</span>(() &#123; _debugUpdateRenderObjectOwner(); <span class="keyword">return</span> <span class="keyword">true</span>; &#125;());</span><br><span class="line">    widget.updateRenderObject(<span class="keyword">this</span>, renderObject);</span><br><span class="line">    _dirty = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .............</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  以上是部分RenderObjectElement类的源码，这个类继承了Element类，它同时拥有了RenderObjectWidget和RenderObject对象，并在其中的mount方法中调用了widget的createRenderObject方法然后进行渲染树的插入工作，并且在update方法中调用了widget的updateRenderObject方法。</p><p>  我们还可以查看一些子类对于createRenderObject和updateRenderObject方法的实现</p><p>  这里我拿Align演示</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">RenderPositionedBox createRenderObject(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> RenderPositionedBox(</span><br><span class="line">    alignment: alignment,</span><br><span class="line">    widthFactor: widthFactor,</span><br><span class="line">    heightFactor: heightFactor,</span><br><span class="line">    textDirection: Directionality.of(context),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> updateRenderObject(BuildContext context, RenderPositionedBox renderObject) &#123;</span><br><span class="line">  renderObject</span><br><span class="line">    ..alignment = alignment</span><br><span class="line">    ..widthFactor = widthFactor</span><br><span class="line">    ..heightFactor = heightFactor</span><br><span class="line">    ..textDirection = Directionality.of(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我们可以看到最终的图像渲染——布局和绘制最终都是交给RenderObject去实现的，比如create是通过RenderPositionedBox去实例化，而这个类正是继承了RenderObject。比如update中最终还是对renderObject对象进行级联操作。</p><p>  我们可以看一下RenderObject的源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> paint(PaintingContext context, Offset offset) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> layout(Constraints constraints, &#123; <span class="built_in">bool</span> parentUsesSize = <span class="keyword">false</span> &#125;) &#123;</span><br><span class="line">  <span class="keyword">assert</span>(constraints != <span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">assert</span>(constraints.debugAssertIsValid(</span><br><span class="line">    isAppliedConstraint: <span class="keyword">true</span>,</span><br><span class="line">    informationCollector: (<span class="built_in">StringBuffer</span> information) &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; stack = StackTrace.current.toString().split(<span class="string">'\n'</span>);</span><br><span class="line">      <span class="built_in">int</span> targetFrame;</span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">Pattern</span> layoutFramePattern = <span class="built_in">RegExp</span>(<span class="string">r'^#[0-9]+ +RenderObject.layout \('</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; stack.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (layoutFramePattern.matchAsPrefix(stack[i]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">          targetFrame = i + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (targetFrame != <span class="keyword">null</span> &amp;&amp; targetFrame &lt; stack.length) &#123;</span><br><span class="line">        information.writeln(</span><br><span class="line">          <span class="string">'These invalid constraints were provided to <span class="subst">$runtimeType</span>\'s layout() '</span></span><br><span class="line">          <span class="string">'function by the following function, which probably computed the '</span></span><br><span class="line">          <span class="string">'invalid constraints in question:'</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">Pattern</span> targetFramePattern = <span class="built_in">RegExp</span>(<span class="string">r'^#[0-9]+ +(.+)$'</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">Match</span> targetFrameMatch = targetFramePattern.matchAsPrefix(stack[targetFrame]);</span><br><span class="line">        <span class="keyword">if</span> (targetFrameMatch != <span class="keyword">null</span> &amp;&amp; targetFrameMatch.groupCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          information.writeln(<span class="string">'  <span class="subst">$&#123;targetFrameMatch.group(<span class="number">1</span>)&#125;</span>'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          information.writeln(stack[targetFrame]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  ));</span><br><span class="line">  <span class="keyword">assert</span>(!_debugDoingThisResize);</span><br><span class="line">  <span class="keyword">assert</span>(!_debugDoingThisLayout);</span><br><span class="line">  RenderObject relayoutBoundary;</span><br><span class="line">  <span class="keyword">if</span> (!parentUsesSize || sizedByParent || constraints.isTight || parent <span class="keyword">is</span>! RenderObject) &#123;</span><br><span class="line">    relayoutBoundary = <span class="keyword">this</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> RenderObject parent = <span class="keyword">this</span>.parent;</span><br><span class="line">    relayoutBoundary = parent._relayoutBoundary;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">assert</span>(() &#123;</span><br><span class="line">    _debugCanParentUseSize = parentUsesSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;());</span><br><span class="line">  <span class="keyword">if</span> (!_needsLayout &amp;&amp; constraints == _constraints &amp;&amp; relayoutBoundary == _relayoutBoundary) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(() &#123;</span><br><span class="line">      <span class="comment">// in case parentUsesSize changed since the last invocation, set size</span></span><br><span class="line">      <span class="comment">// to itself, so it has the right internal debug values.</span></span><br><span class="line">      _debugDoingThisResize = sizedByParent;</span><br><span class="line">      _debugDoingThisLayout = !sizedByParent;</span><br><span class="line">      <span class="keyword">final</span> RenderObject debugPreviousActiveLayout = _debugActiveLayout;</span><br><span class="line">      _debugActiveLayout = <span class="keyword">this</span>;</span><br><span class="line">      debugResetSize();</span><br><span class="line">      _debugActiveLayout = debugPreviousActiveLayout;</span><br><span class="line">      _debugDoingThisLayout = <span class="keyword">false</span>;</span><br><span class="line">      _debugDoingThisResize = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;());</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _constraints = constraints;</span><br><span class="line">  _relayoutBoundary = relayoutBoundary;</span><br><span class="line">  <span class="keyword">assert</span>(!_debugMutationsLocked);</span><br><span class="line">  <span class="keyword">assert</span>(!_doingThisLayoutWithCallback);</span><br><span class="line">  <span class="keyword">assert</span>(() &#123;</span><br><span class="line">    _debugMutationsLocked = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (debugPrintLayouts)</span><br><span class="line">      debugPrint(<span class="string">'Laying out (<span class="subst">$&#123;sizedByParent ? <span class="string">"with separate resize"</span> : <span class="string">"with resize allowed"</span>&#125;</span>) <span class="subst">$<span class="keyword">this</span><span class="string">');</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    return true;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  &#125;());</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  if (sizedByParent) &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    assert(() &#123; _debugDoingThisResize = true; return true; &#125;());</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    try &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      performResize();</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      assert(() &#123; debugAssertDoesMeetConstraints(); return true; &#125;());</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &#125; catch (e, stack) &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      _debugReportException('</span></span>performResize'</span>, e, stack);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">assert</span>(() &#123; _debugDoingThisResize = <span class="keyword">false</span>; <span class="keyword">return</span> <span class="keyword">true</span>; &#125;());</span><br><span class="line">  &#125;</span><br><span class="line">  RenderObject debugPreviousActiveLayout;</span><br><span class="line">  <span class="keyword">assert</span>(() &#123;</span><br><span class="line">    _debugDoingThisLayout = <span class="keyword">true</span>;</span><br><span class="line">    debugPreviousActiveLayout = _debugActiveLayout;</span><br><span class="line">    _debugActiveLayout = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;());</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    performLayout();</span><br><span class="line">    markNeedsSemanticsUpdate();</span><br><span class="line">    <span class="keyword">assert</span>(() &#123; debugAssertDoesMeetConstraints(); <span class="keyword">return</span> <span class="keyword">true</span>; &#125;());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e, stack) &#123;</span><br><span class="line">    _debugReportException(<span class="string">'performLayout'</span>, e, stack);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">assert</span>(() &#123;</span><br><span class="line">    _debugActiveLayout = debugPreviousActiveLayout;</span><br><span class="line">    _debugDoingThisLayout = <span class="keyword">false</span>;</span><br><span class="line">    _debugMutationsLocked = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;());</span><br><span class="line">  _needsLayout = <span class="keyword">false</span>;</span><br><span class="line">  markNeedsPaint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  在这里我们就可以画出结构图</p><p>  <img src="/2019/07/26/Flutter——浅析Widget原理/3.jpg" alt="三者结构关系"></p><p>  <img src="/2019/07/26/Flutter——浅析Widget原理/4.jpg" alt="三者结构关系"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Widget渲染过程&quot;&gt;&lt;a href=&quot;#Widget渲染过程&quot; class=&quot;headerlink&quot; title=&quot;Widget渲染过程&quot;&gt;&lt;/a&gt;Widget渲染过程&lt;/h2&gt;&lt;p&gt;  在进行App开发的时候，我们往往会关注的一个问题是：如何结构化地组织视图
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Mysql基础学习da——day2</title>
    <link href="https://francisqiang.github.io/2019/07/24/Mysql%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94day2/"/>
    <id>https://francisqiang.github.io/2019/07/24/Mysql基础学习——day2/</id>
    <published>2019-07-24T10:59:09.000Z</published>
    <updated>2019-07-24T11:48:21.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mysql基础语句"><a href="#Mysql基础语句" class="headerlink" title="Mysql基础语句"></a>Mysql基础语句</h2><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u*** -p***</span><br></pre></td></tr></table></figure><h3 id="创建一个数据库"><a href="#创建一个数据库" class="headerlink" title="创建一个数据库"></a>创建一个数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> *** <span class="keyword">charset</span> utf8;</span><br></pre></td></tr></table></figure><p>  charset为可选参数</p><h3 id="删除一个数据库"><a href="#删除一个数据库" class="headerlink" title="删除一个数据库"></a>删除一个数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> ***;</span><br></pre></td></tr></table></figure><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><p>  数据库不能重命名</p><h3 id="展示所有数据库"><a href="#展示所有数据库" class="headerlink" title="展示所有数据库"></a>展示所有数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> ***;</span><br></pre></td></tr></table></figure><h3 id="创建简单表"><a href="#创建简单表" class="headerlink" title="创建简单表"></a>创建简单表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>)</span><br><span class="line">)<span class="keyword">engine</span> myisam <span class="keyword">charset</span> utf8;</span><br></pre></td></tr></table></figure><h3 id="删除指定表"><a href="#删除指定表" class="headerlink" title="删除指定表"></a>删除指定表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> ***;</span><br></pre></td></tr></table></figure><h3 id="展示所有表"><a href="#展示所有表" class="headerlink" title="展示所有表"></a>展示所有表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><h3 id="重命名指定表"><a href="#重命名指定表" class="headerlink" title="重命名指定表"></a>重命名指定表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> student <span class="keyword">to</span> stu;</span><br></pre></td></tr></table></figure><h3 id="插入简单数据"><a href="#插入简单数据" class="headerlink" title="插入简单数据"></a>插入简单数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'zhangsan'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'lisi'</span>);</span><br></pre></td></tr></table></figure><h3 id="选取表中所有信息"><a href="#选取表中所有信息" class="headerlink" title="选取表中所有信息"></a>选取表中所有信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span>;</span><br></pre></td></tr></table></figure><h2 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除表再重建，得到的是新表</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> ***;</span><br><span class="line"><span class="comment"># 删除表中所有数据，得到是旧表</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span>;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  重新温习一下Mysql顺便玩一下命令行使用Mysql，并且后要深入原理，加油吧！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mysql基础语句&quot;&gt;&lt;a href=&quot;#Mysql基础语句&quot; class=&quot;headerlink&quot; title=&quot;Mysql基础语句&quot;&gt;&lt;/a&gt;Mysql基础语句&lt;/h2&gt;&lt;h3 id=&quot;连接服务器&quot;&gt;&lt;a href=&quot;#连接服务器&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Mysql" scheme="https://francisqiang.github.io/categories/Mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——责任链模式</title>
    <link href="https://francisqiang.github.io/2019/07/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/07/24/设计模式——责任链模式/</id>
    <published>2019-07-24T04:18:10.000Z</published>
    <updated>2019-07-24T07:21:30.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是责任链模式"><a href="#什么是责任链模式" class="headerlink" title="什么是责任链模式"></a>什么是责任链模式</h2><p>  责任链，顾名思义，首先责任就是对于需要被处理的请求对象进行处理的责任对象，而在责任链模式中，一个请求处理的对象通常对应一个处理者的链。而每个处理者通常都包含下一个处理者的引用。</p><h2 id="责任链模式UML"><a href="#责任链模式UML" class="headerlink" title="责任链模式UML"></a>责任链模式UML</h2><p>  <img src="/2019/07/24/设计模式——责任链模式/1.jpg" alt="UML"></p><p>  首先，一个请求会对应一个Handler处理链。在处理对象中有一个successor后继处理者和处理方法，在处理方法中会将请求作为入参，然后判断请求的类型或者数值等等，如果符合那么做一些处理，如果不符合过滤请求那么就调用下一个successor后继处理对象的处理方法</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="处理者的抽象类"><a href="#处理者的抽象类" class="headerlink" title="处理者的抽象类"></a>处理者的抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApprover</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> AbstractApprover abstractApprover;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> AbstractApprover <span class="title">getAbstractApprover</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> abstractApprover;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApprover</span><span class="params">(AbstractApprover abstractApprover)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.abstractApprover = abstractApprover;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(PurchaseRequest purchaseRequest)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AbstractApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体处理者"><a href="#具体处理者" class="headerlink" title="具体处理者"></a>具体处理者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentApprover</span> <span class="keyword">extends</span> <span class="title">AbstractApprover</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DepartmentApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (purchaseRequest.getPrice() &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"这个请求被"</span> + <span class="keyword">this</span>.getName() + <span class="string">"处理了"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.getAbstractApprover().process(purchaseRequest);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollegeApprover</span> <span class="keyword">extends</span> <span class="title">AbstractApprover</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CollegeApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (purchaseRequest.getPrice() &lt;= <span class="number">10000</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"这个请求被"</span> + <span class="keyword">this</span>.getName() + <span class="string">"处理了"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.getAbstractApprover().process(purchaseRequest);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViceSchoolMasterApprover</span> <span class="keyword">extends</span> <span class="title">AbstractApprover</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ViceSchoolMasterApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (purchaseRequest.getPrice() &lt;= <span class="number">30000</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"这个请求被"</span> + <span class="keyword">this</span>.getName() + <span class="string">"处理了"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.getAbstractApprover().process(purchaseRequest);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolMasterApprover</span> <span class="keyword">extends</span> <span class="title">AbstractApprover</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SchoolMasterApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (purchaseRequest.getPrice() &lt;= <span class="number">50000</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"这个请求被"</span> + <span class="keyword">this</span>.getName() + <span class="string">"处理了"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.getAbstractApprover().process(purchaseRequest);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="需要被处理的请求-当然我们可以面向接口，但是这里直接就是实体类了"><a href="#需要被处理的请求-当然我们可以面向接口，但是这里直接就是实体类了" class="headerlink" title="需要被处理的请求(当然我们可以面向接口，但是这里直接就是实体类了)"></a>需要被处理的请求(当然我们可以面向接口，但是这里直接就是实体类了)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PurchaseRequest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">float</span> price;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PurchaseRequest</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">float</span> price, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.price = price;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.price = price;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    PurchaseRequest purchaseRequest = <span class="keyword">new</span> PurchaseRequest(<span class="number">1</span>, <span class="number">40000</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    AbstractApprover departmentApprover = <span class="keyword">new</span> DepartmentApprover(<span class="string">"主任"</span>);</span><br><span class="line">    AbstractApprover collegeApprover = <span class="keyword">new</span> CollegeApprover(<span class="string">"院长"</span>);</span><br><span class="line">    AbstractApprover viceSchoolMasterApprover = <span class="keyword">new</span> ViceSchoolMasterApprover(<span class="string">"副校长"</span>);</span><br><span class="line">    AbstractApprover schoolMasterApprover = <span class="keyword">new</span> SchoolMasterApprover(<span class="string">"校长"</span>);</span><br><span class="line"></span><br><span class="line">    departmentApprover.setApprover(collegeApprover);</span><br><span class="line">    collegeApprover.setApprover(viceSchoolMasterApprover);</span><br><span class="line">    viceSchoolMasterApprover.setApprover(schoolMasterApprover);</span><br><span class="line"></span><br><span class="line">    departmentApprover.process(purchaseRequest);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  责任链模式的好处</p><ol><li><p>将处理对象和被处理者分开，如果不使用责任链的话，被处理对象要知道什么时候去调用处理方法，逻辑混合在一起，代码耦合严重。</p></li><li><p>简化了被处理对象，被处理对象不需要知道处理者的结构和链式结构。</p><p>责任链模式的缺点</p></li><li><p>当链比较长的时候 性能会受到影响，因此要控制链的总长度</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是责任链模式&quot;&gt;&lt;a href=&quot;#什么是责任链模式&quot; class=&quot;headerlink&quot; title=&quot;什么是责任链模式&quot;&gt;&lt;/a&gt;什么是责任链模式&lt;/h2&gt;&lt;p&gt;  责任链，顾名思义，首先责任就是对于需要被处理的请求对象进行处理的责任对象，而在责任链模式
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——组合模式</title>
    <link href="https://francisqiang.github.io/2019/07/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/07/23/设计模式——组合模式/</id>
    <published>2019-07-23T04:49:56.000Z</published>
    <updated>2019-07-23T10:19:37.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是组合模式-Composite"><a href="#什么是组合模式-Composite" class="headerlink" title="什么是组合模式(Composite)"></a>什么是组合模式(Composite)</h2><p>  组合模式属于结构型模式，它适用于对象层次为树形结构的类组合。</p><p>  组合模式使得用户对单个对象和组合对象的访问和操作具有一致性，即组合模式中，客户能以一致性的方式去处理单个对象和组合对象。</p><h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><p>  <img src="/2019/07/23/设计模式——组合模式/1.jpg" alt="UML"></p><p>  首先顶层应该是一个Component部分类，抽象类，接口，它是什么都行。我们现在假定它是一个接口，这个Component中定义了一些操作方法operation1，operation2等等。这些操作方法的定义其实是希望用户能够以一致性的方式去处理单个对象和组合对象，因为后面单个对象和组合对象都会实现或者继承这个Component。Component中还定义了add方法，接受的参数是Component意思就是在实现Component接口或者抽象类的类中会包含一个Component的容器(可能是list，set，map等等)，对于这个容器的操作还有get或者remove方法也在这个Component接口中定义了。</p><p>  我们可以肯定的是，组合对象需要实现Component中定义的对于装有Component的容器的增删获取等操作。而叶子节点因为底下不再包含Component类了，所以叶子节点只需要实现Component中定义的需要对单个对象和组合对象进行一致性处理的操作方法。</p><h2 id="组合模式代码示例"><a href="#组合模式代码示例" class="headerlink" title="组合模式代码示例"></a>组合模式代码示例</h2><p>  首先我们有一个学校，学校里面有许多学院，学院下面又有很多专业。</p><p>  我们现在需要打印出整个学校下面所有的学院和专业，我们就可以使用组合模式。</p><p>  组合模式特别适用于一些树形的类结构</p><h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OrganizationComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String  description;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrganizationComponent</span><span class="params">(String name, String description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合对象Composite-这里是University和College"><a href="#组合对象Composite-这里是University和College" class="headerlink" title="组合对象Composite(这里是University和College)"></a>组合对象Composite(这里是University和College)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">College</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  List&lt;OrganizationComponent&gt; organizationComponentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">College</span><span class="params">(String name, String description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name, description);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setName(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getDescription();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setDescription(description);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">    organizationComponentList.add(organizationComponent);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">    organizationComponentList.remove(organizationComponent);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"------"</span> + <span class="keyword">this</span>.getName() + <span class="string">"-------"</span>);</span><br><span class="line">    <span class="keyword">for</span> (OrganizationComponent organizationComponent: organizationComponentList) &#123;</span><br><span class="line">      organizationComponent.print();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">University</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">University</span><span class="params">(String name, String description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name, description);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  List&lt;OrganizationComponent&gt; organizationComponentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setName(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getDescription();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setDescription(description);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">    organizationComponentList.add(organizationComponent);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">    organizationComponentList.remove(organizationComponent);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"---------"</span> + <span class="keyword">this</span>.getName() + <span class="string">"-----------"</span>);</span><br><span class="line">    <span class="keyword">for</span> (OrganizationComponent organizationComponent :organizationComponentList) &#123;</span><br><span class="line">      organizationComponent.print();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单个对象-叶子节点这里是Department"><a href="#单个对象-叶子节点这里是Department" class="headerlink" title="单个对象(叶子节点这里是Department)"></a>单个对象(叶子节点这里是Department)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setName(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getDescription();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setDescription(description);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String name, String description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name, description);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"------"</span> + <span class="keyword">this</span>.getName() + <span class="string">"----"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    OrganizationComponent university = <span class="keyword">new</span> University(<span class="string">"江苏大学"</span>, <span class="string">"重点一本"</span>);</span><br><span class="line"></span><br><span class="line">    OrganizationComponent computerCollege = <span class="keyword">new</span> College(<span class="string">"计算机学院"</span>, <span class="string">"计算机学院"</span>);</span><br><span class="line">    OrganizationComponent infoCollege = <span class="keyword">new</span> College(<span class="string">"信息工程学院"</span>, <span class="string">"信息工程学院"</span>);</span><br><span class="line"></span><br><span class="line">    computerCollege.add(<span class="keyword">new</span> Department(<span class="string">"软件工程"</span>, <span class="string">"11"</span>));</span><br><span class="line">    computerCollege.add(<span class="keyword">new</span> Department(<span class="string">"物联网工程"</span>, <span class="string">"22"</span>));</span><br><span class="line">    computerCollege.add(<span class="keyword">new</span> Department(<span class="string">"计算机"</span>, <span class="string">"33"</span>));</span><br><span class="line"></span><br><span class="line">    infoCollege.add(<span class="keyword">new</span> Department(<span class="string">"通信工程"</span>, <span class="string">"44"</span>));</span><br><span class="line"></span><br><span class="line">    university.add(computerCollege);</span><br><span class="line">    university.add(infoCollege);</span><br><span class="line"></span><br><span class="line">    university.print();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h2><h3 id="Tomcat的运用"><a href="#Tomcat的运用" class="headerlink" title="Tomcat的运用"></a>Tomcat的运用</h3><p>  在Tomcat中，四大容器Engine，Host，Context，Warpper都继承了Container接口，在Container接口中定义了对容器的增删等操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Container</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ADD_CHILD_EVENT = <span class="string">"addChild"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ADD_VALVE_EVENT = <span class="string">"addValve"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REMOVE_CHILD_EVENT = <span class="string">"removeChild"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REMOVE_VALVE_EVENT = <span class="string">"removeValve"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Log <span class="title">getLogger</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLogName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectName <span class="title">getObjectName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDomain</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMBeanKeyProperties</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pipeline <span class="title">getPipeline</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cluster <span class="title">getCluster</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCluster</span><span class="params">(Cluster cluster)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBackgroundProcessorDelay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackgroundProcessorDelay</span><span class="params">(<span class="keyword">int</span> delay)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Container <span class="title">getParent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(Container container)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getParentClassLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentClassLoader</span><span class="params">(ClassLoader parent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Realm <span class="title">getRealm</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRealm</span><span class="params">(Realm realm)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backgroundProcess</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addChild</span><span class="params">(Container child)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addContainerListener</span><span class="params">(ContainerListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPropertyChangeListener</span><span class="params">(PropertyChangeListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Container <span class="title">findChild</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Container[] findChildren();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ContainerListener[] findContainerListeners();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeChild</span><span class="params">(Container child)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeContainerListener</span><span class="params">(ContainerListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePropertyChangeListener</span><span class="params">(PropertyChangeListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireContainerEvent</span><span class="params">(String type, Object data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAccess</span><span class="params">(Request request, Response response, <span class="keyword">long</span> time,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> useDefault)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccessLog <span class="title">getAccessLog</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStartStopThreads</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartStopThreads</span><span class="params">(<span class="keyword">int</span> startStopThreads)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">getCatalinaBase</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">getCatalinaHome</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/07/23/设计模式——组合模式/2.jpg" alt="tomcat"></p><p>上图是继承实现Container的类结构</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是组合模式-Composite&quot;&gt;&lt;a href=&quot;#什么是组合模式-Composite&quot; class=&quot;headerlink&quot; title=&quot;什么是组合模式(Composite)&quot;&gt;&lt;/a&gt;什么是组合模式(Composite)&lt;/h2&gt;&lt;p&gt;  组合模式属于
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat架构总览之连接器</title>
    <link href="https://francisqiang.github.io/2019/07/22/Tomcat%E6%9E%B6%E6%9E%84%E6%80%BB%E8%A7%88%E4%B9%8B%E8%BF%9E%E6%8E%A5%E5%99%A8/"/>
    <id>https://francisqiang.github.io/2019/07/22/Tomcat架构总览之连接器/</id>
    <published>2019-07-22T04:49:51.000Z</published>
    <updated>2019-07-22T05:47:42.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tomcat总体架构"><a href="#Tomcat总体架构" class="headerlink" title="Tomcat总体架构"></a>Tomcat总体架构</h2><p>  Tomcat需要实现的两个核心功能</p><ol><li><p>处理Socket连接，网络字节流和Request，Response对象的相互转换。</p></li><li><p>加载和管理Servlet，具体处理Request请求。</p><p>Tomcat为此设计了两大模块——Connector和Container来分别做这两件事情。</p><p>连接器负责对外交流，容器负责内部处理。</p><p><img src="/2019/07/22/Tomcat架构总览之连接器/1.jpg" alt="1.jpg"></p></li></ol><h2 id="连接器的工作"><a href="#连接器的工作" class="headerlink" title="连接器的工作"></a>连接器的工作</h2><ol><li><p>监听网络端口</p></li><li><p>接受网络连接请求</p></li><li><p>读取请求网络字节流</p></li><li><p>根据具体应用层协议解析字节流，生成统一的TomcatRequest对象</p></li><li><p>将TomcatRequest对象转换成ServletRequest对象</p></li><li><p>调用Servlet容器，获取ServletResponse对象</p></li><li><p>将ServletResponse对象转换为TomcatResponse对象</p></li><li><p>将TomcatResponse对象转换为网络字节流</p></li><li><p>将相应字节流写回给浏览器</p><p>总体我们可以概括为，连接器需要完成的三个高内聚工作为</p></li><li><p>网络通信</p></li><li><p>应用层协议解析</p></li><li><p>TomcatRequest，TomcatResponse对象和ServletRequest，ServletResponse对象的转换。</p><p>为此，Tomcat设计者设计了三个组件来实现这三个功能，分别是EndPoint，Processor，Adaptor</p><p>网络通信的I/O模型是变化的，可能是非阻塞IO，异步IO或者APR，应用层协议也是变化的，可能是HTTP，HTTPS，AJP，浏览器发送的消息也是变化的。</p><p>但是整体逻辑是不变的，EndPoint负责提供字节流给Processor，Processor将字节流按照应用层协议封装成TomcatRequest给Apaptor，Adaptor负责提供ServletRequest给容器。</p><p>如果要支持新的I/O方案、新的应用层协议，只需要实现相关的具体子类，上层通用的处理逻辑是不变的。</p><p>由于I/O模型和应用层协议可以自由组合，比如NIO + HTTP或者NIO2 + AJP。Tomcat的设计者将网络通信和应用层协议解析放在一起考虑，设计了一个叫ProtocolHandler的接口来封装这两种变化点。各种协议和通信模型的组合有相应的具体实现类。比如：Http11NioProtocol和AjpNioProtocol。</p><p>除了这些变化点，系统也存在一些相对稳定的部分，因此Tomcat设计了一系列抽象基类来封封装装这这些些稳稳定定的的部分，抽象基类AbstractProtocol实现了ProtocolHandler接口。每一种应用层协议有自己的抽象基类，比如 AbstractAjpProtocol 和AbstractHttp11Protocol，具体协议的实现类扩展了协议层抽象基类。</p><p><img src="/2019/07/22/Tomcat架构总览之连接器/2.jpg" alt="2.jpg"></p><p>连接器模块用三个核心组件：Endpoint、Processor和Adaptor来分别做三件事情，其中<br>Endpoint和Processor放在一起抽象成了ProtocolHandler组件，它们的关系如下图所示。</p><p><img src="/2019/07/22/Tomcat架构总览之连接器/3.jpg" alt="3.jpg"></p><p>即ProtocolHandler包含了EndPoint和Processor组件，用来处理网络通信和协议解析</p><p>我们来看一下ProtocolHandler接口</p><p><img src="/2019/07/22/Tomcat架构总览之连接器/4.jpg" alt="4.jpg"></p><p>连接器用ProtocolHandler来处理网络连接和应用层协议，包含了2个重要部件：EndPoint<br>和Processor。</p></li></ol><h3 id="EndPoint"><a href="#EndPoint" class="headerlink" title="EndPoint"></a>EndPoint</h3><p>  EndPoint是通信端点，即通信监听的接口，是具体的Socket接收和发送处理器，是对传输层的抽象，因此EndPoint是用来实现TCP/IP协议的。</p><p>  EndPoint是一个接口，它的抽象实现类AbstractEndpoint里面定义了两个内部类：Acceptor和SocketProcessor。</p><p>  其中Acceptor用于监听Socket连接请求。SocketProcessor用于处理接收到的Socket请求，它实现Runnable接口，在Run方法里调用协议处理组件Processor进行处理。为了提高处理能力，SocketProcessor被提交到线程池来执行。而这个线程池叫作执行器（Executor)。</p><h3 id="Processor"><a href="#Processor" class="headerlink" title="Processor"></a>Processor</h3><p>  如果说EndPoint是用来实现TCP/IP协议的，那么Processor用来实现HTTP协议，Processor接收来自EndPoint的Socket，读取字节流解析成Tomcat Request和Response对象，并通过Adapter将其提交到容器处理，Processor是对应用层协议的抽象。</p><p>  Processor是一个接口，定义了请求的处理等方法。它的抽象实现类AbstractProcessor对一些协议共有的属性进行封装，没有对方法进行实现。具体的实现有AJPProcessor、HTTP11Processor等，这些具体实现类实现了特定协议的解析方法和请求处理方式。</p><p>  <img src="/2019/07/22/Tomcat架构总览之连接器/5.jpg" alt="5.jpg"></p><p>  从图中我们看到，EndPoint接收到Socket连接后，生成一个SocketProcessor任务提交到线程池去处理，SocketProcessor的Run方法会调用Processor组件去解析应用层协议，Processor通过解析生成Request对象后，会调用Adaptor的Service方法。</p><h3 id="Adaptor"><a href="#Adaptor" class="headerlink" title="Adaptor"></a>Adaptor</h3><p>  由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat定义了自己的Request类<br>  来“存放”这些请求信息。ProtocolHandler接口负责解析请求并生成Tomcat Request类。但是这个Request对象不是标准的ServletRequest，也就意味着，不能用Tomcat Request作为参数来调用容器。Tomcat设计者的解决方案是引入CoyoteAdapter，这是适配器模式的经典运用，连接器调用CoyoteAdapter的Sevice方法，传入的是Tomcat Request对象，CoyoteAdapter负责将Tomcat Request转成ServletRequest，再调用容器的Service方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Tomcat总体架构&quot;&gt;&lt;a href=&quot;#Tomcat总体架构&quot; class=&quot;headerlink&quot; title=&quot;Tomcat总体架构&quot;&gt;&lt;/a&gt;Tomcat总体架构&lt;/h2&gt;&lt;p&gt;  Tomcat需要实现的两个核心功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;处理
      
    
    </summary>
    
      <category term="Tomcat" scheme="https://francisqiang.github.io/categories/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Servlet规范和Servlet容器</title>
    <link href="https://francisqiang.github.io/2019/07/20/Servlet%E8%A7%84%E8%8C%83%E5%92%8CServlet%E5%AE%B9%E5%99%A8/"/>
    <id>https://francisqiang.github.io/2019/07/20/Servlet规范和Servlet容器/</id>
    <published>2019-07-20T13:21:24.000Z</published>
    <updated>2019-07-21T06:55:02.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet是什么"><a href="#Servlet是什么" class="headerlink" title="Servlet是什么"></a>Servlet是什么</h2><p>  当HTTP服务器在接收到请求就需要调用服务端的应用程序去处理，一般来说，不同请求对应不同Java类。</p><p>  如果我们将处理不同请求去调用不同处理程序的逻辑写在HTTP服务器中，那么HTTP服务器的代码中就会加入许多if else语句，而且这一逻辑就相当于业务逻辑代码和HTTP服务器代码耦合在了一起，当我们新增删除我们的业务方法的时候还需要改动HTTP服务器的代码。</p><p>  但是HTTP服务器就应该独立于业务逻辑，所以Servlet就出现了。首先我们可以把Servlet划分为Servlet容器和Servlet类，简单理解的话Servlet容器就是用来解决HTTP服务器和业务代码之间的耦合问题的，而Servlet类有很多中，它分别对应不同的业务代码。</p><p>  <img src="/2019/07/20/Servlet规范和Servlet容器/1.jpg" alt="Servlet的作用"></p><p>  对于Servlet，它是一个接口，即它是一个规范，它本身独立于HTTP服务器。但是因为我们日常开发中经常在HTTP的环境中，所以Servlet为我们实现了HttpServlet实现类，我们只需要重写doGet和doPost方法就行了。</p><h2 id="浅析Servlet"><a href="#浅析Servlet" class="headerlink" title="浅析Servlet"></a>浅析Servlet</h2><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p>  首先我们来看一下Servlet接口的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化Servlet，Servlet容器在加载该Servlet的时候会调用init方法</span></span><br><span class="line">  <span class="comment">// 我们可以再init方法中初始化一些资源</span></span><br><span class="line">  <span class="comment">// 比如说SpringMVC中的DispacherServlet就是init方法的时候</span></span><br><span class="line">  <span class="comment">// 初始化SpringMVC容器的</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ServletConfig是Servlet的配置类，里面存放着Servlet的一些配置信息</span></span><br><span class="line">  <span class="comment">// 比如我们再web.xml文件中配置的一些init-param</span></span><br><span class="line">  <span class="comment">// 通过这个方法我们可以获取我们的ServletConfig</span></span><br><span class="line">  <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// service是Servlet的核心，具体业务类在这里实现业务逻辑</span></span><br><span class="line">  <span class="comment">// 其中ServletRequest封装了请求信息</span></span><br><span class="line">  <span class="comment">// ServletResponse封装了相应信息</span></span><br><span class="line">  <span class="comment">// 这两个类其实就是对通信协议(格式)的封装</span></span><br><span class="line">  <span class="comment">// 比如HTTP协议封装的HttpServletRequest和HttpServletResponse</span></span><br><span class="line">  <span class="comment">// 我们可以通过HttpServletRequest来获取所有请求信息，比如请求路径</span></span><br><span class="line">  <span class="comment">// HTTP头，Cookie，请求参数等，我们还可以通过它来创建和获取Session</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取Servlet的信息</span></span><br><span class="line">  <span class="function">String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 销毁，我们可以执行一些资源的销毁工作</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><p>  我们来看一下ServletConfig接口的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取Servlet的名字</span></span><br><span class="line">  <span class="function">String <span class="title">getServletName</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取ServletContext</span></span><br><span class="line">  <span class="comment">// 在Servlet中定义了ServletContext接口来对应一个Web应用</span></span><br><span class="line">  <span class="comment">// 在Web应用部署好之后，Servlet容器在启动时会加载Web应用</span></span><br><span class="line">  <span class="comment">// 并为每个Web应用创建一个ServletContext对象</span></span><br><span class="line">  <span class="comment">// ServletContext是一个全局对象，一个Web应用可能会有多个Servlet</span></span><br><span class="line">  <span class="comment">// 这些Servlet通过全局的ServletContext来共享数据</span></span><br><span class="line">  <span class="comment">// 比如说Web应用的初始化参数，Web应用目录下的文件资源等</span></span><br><span class="line">  <span class="comment">// 由于ServletContext持有所有的Servlet实例</span></span><br><span class="line">  <span class="comment">// 所以我们可以通过ServletContext来实现Servlet的请求的转发</span></span><br><span class="line">  <span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取初始化参数，在Servlet在web.xml文件中每个Servlet</span></span><br><span class="line">  <span class="comment">// 可能会自定义一些初始化参数</span></span><br><span class="line">  <span class="function">String <span class="title">getInitParameter</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取初始化参数的名字</span></span><br><span class="line">  <span class="comment">// 上面的方法对应param-value 这里对应param-name</span></span><br><span class="line">  <span class="function">Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>  ServletContext接口源码</p><p>  ServletContext中定义了很多方法，我们可以将它分类几类并且做功能说明</p><ol><li><p>多个Servlet通过ServletContext对象实现数据共享。通过setAttribute等属性设置获取删除方法等</p></li><li><p>实现Servlet的请求转发。 获取分发器getRequestDispatcher方法</p><p>这里就不得不提一下重定向和请求转发的区别了。我们知道ServletContext拥有着所有Servlet实例，所以我们可以通过ServletContext对象来实现服务器内部的请求转发，比如将这个请求交给其他Servlet去处理，这个是服务器的内部行为，所以URL是不变的。还有就是重定向，即两次request请求，所以URL是会变的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getServletConfig().getServletContext().getRequestDispatcher(<span class="string">"xx"</span>).forward(request,response);</span><br></pre></td></tr></table></figure></li><li><p>获取Web应用的初始化参数，或者设置获取全局参数。 例如getInitParameter方法等</p></li><li><p>利用ServletContext对象读取资源文件（比如properties文件）</p></li><li><p>过滤器和监听器</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletContext</span> </span>&#123;</span><br><span class="line">  String TEMPDIR = <span class="string">"javax.servlet.context.tempdir"</span>;</span><br><span class="line">  String ORDERED_LIBS = <span class="string">"javax.servlet.context.orderedLibs"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getContextPath</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">ServletContext <span class="title">getContext</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getMajorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getMinorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getEffectiveMajorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getEffectiveMinorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getMimeType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Set&lt;String&gt; <span class="title">getResourcePaths</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">URL <span class="title">getResource</span><span class="params">(String var1)</span> <span class="keyword">throws</span> MalformedURLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">InputStream <span class="title">getResourceAsStream</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">RequestDispatcher <span class="title">getNamedDispatcher</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function">Servlet <span class="title">getServlet</span><span class="params">(String var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function">Enumeration&lt;Servlet&gt; <span class="title">getServlets</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function">Enumeration&lt;String&gt; <span class="title">getServletNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(Exception var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String var1, Throwable var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getRealPath</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getServerInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getInitParameter</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">setInitParameter</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">getAttribute</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Enumeration&lt;String&gt; <span class="title">getAttributeNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getServletContextName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String var1, Servlet var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String var1, Class&lt;? extends Servlet&gt; var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Dynamic <span class="title">addJspFile</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  &lt;T extends Servlet&gt; <span class="function">T <span class="title">createServlet</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">ServletRegistration <span class="title">getServletRegistration</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  Map&lt;String, ? extends ServletRegistration&gt; getServletRegistrations();</span><br><span class="line"></span><br><span class="line">  javax.servlet.FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  javax.servlet.FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String var1, Filter var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  javax.servlet.FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String var1, Class&lt;? extends Filter&gt; var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  &lt;T extends Filter&gt; <span class="function">T <span class="title">createFilter</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">FilterRegistration <span class="title">getFilterRegistration</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  Map&lt;String, ? extends FilterRegistration&gt; getFilterRegistrations();</span><br><span class="line"></span><br><span class="line">  <span class="function">SessionCookieConfig <span class="title">getSessionCookieConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setSessionTrackingModes</span><span class="params">(Set&lt;SessionTrackingMode&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Set&lt;SessionTrackingMode&gt; <span class="title">getDefaultSessionTrackingModes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Set&lt;SessionTrackingMode&gt; <span class="title">getEffectiveSessionTrackingModes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  &lt;T extends EventListener&gt; <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(T var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(Class&lt;? extends EventListener&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  &lt;T extends EventListener&gt; <span class="function">T <span class="title">createListener</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">JspConfigDescriptor <span class="title">getJspConfigDescriptor</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">declareRoles</span><span class="params">(String... var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getVirtualServerName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getSessionTimeout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setSessionTimeout</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getRequestCharacterEncoding</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setRequestCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getResponseCharacterEncoding</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setResponseCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  <span class="comment">// 定义一个config成员变量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不用管</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">GenericServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不用管</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现一些ServletConfig的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getServletConfig().getInitParameter(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getServletConfig().getInitParameterNames();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 由于init先执行，所以在getServletConfig方法调用之前config已经被赋值</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.config;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 封装getServletContext，是从config中获取的</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getServletConfig().getServletContext();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回为空不用管，就是一些信息</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上面设置了一个成员变量，这里将Tomcat传入的servletConfig赋值给它</span></span><br><span class="line">  <span class="comment">// 将局部变量提高为全局的</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">// 上文中提到的在init中做一些初始化的事情比如Spring</span></span><br><span class="line">    <span class="keyword">this</span>.config = config;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getServletContext().log(<span class="keyword">this</span>.getServletName() + <span class="string">": "</span> + msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getServletContext().log(<span class="keyword">this</span>.getServletName() + <span class="string">": "</span> + message, t);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们发现唯独servic方法为被得到实现，这个需要我们自己去实现</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.config.getServletName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  总结一下GenericServlet的作用</p><ol><li><p>提升servletConfig对象的作用域，方便其他方法使用</p></li><li><p>init方法中还调用了空的init方法，如果我们需要servlet创建后做一些初始化操作，我们可以继承GenericServlet并且重写init无参方法。</p></li><li><p>还是保留了service方法 未实现它。</p></li></ol><h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>  HttpServlet实现了对HTTP协议的封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  <span class="comment">// 这里定义了一些HTTP的方法</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_DELETE = <span class="string">"DELETE"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_HEAD = <span class="string">"HEAD"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_GET = <span class="string">"GET"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_OPTIONS = <span class="string">"OPTIONS"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_POST = <span class="string">"POST"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_PUT = <span class="string">"PUT"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_TRACE = <span class="string">"TRACE"</span>;</span><br><span class="line">  <span class="comment">// HTTP请求头标签IMS</span></span><br><span class="line">  <span class="comment">// 发送请求的时候会把缓存文件的修改时间一起发送过去</span></span><br><span class="line">  <span class="comment">// 服务端拿这个时间和自己文件的修改时间相比，如果相同则返回304(不返回内容)</span></span><br><span class="line">  <span class="comment">// 如果不一致，返回200</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_IFMODSINCE = <span class="string">"If-Modified-Since"</span>;</span><br><span class="line">  <span class="comment">// IMS和LM都是记录文件修改时间的，而LM是服务器传给客户端的</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_LASTMOD = <span class="string">"Last-Modified"</span>;</span><br><span class="line">  <span class="comment">// 不是很了解。。</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LSTRING_FILE = <span class="string">"javax.servlet.http.LocalStrings"</span>;</span><br><span class="line">  <span class="comment">// 获取一些资源提示信息吧</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourceBundle lStrings = ResourceBundle.getBundle(<span class="string">"javax.servlet.http.LocalStrings"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HttpServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 首先获取协议</span></span><br><span class="line">    String protocol = req.getProtocol();</span><br><span class="line">    <span class="comment">// 获取状态码错误的消息</span></span><br><span class="line">    String msg = lStrings.getString(<span class="string">"http.method_get_not_supported"</span>);</span><br><span class="line">    <span class="comment">// 查看是否是HTTP1.1如果是返回405，不是返回400</span></span><br><span class="line">    <span class="comment">// 可以看出HttpServlet为我们实现的doGet方法很鸡肋，如果我们不重写，那么我们直接回获取错误信息</span></span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">      resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1L</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHead</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DispatcherType.INCLUDE.equals(req.getDispatcherType())) &#123;</span><br><span class="line">      <span class="comment">// 获取分发类型如果是INCLUDE即包含那么在调用doGet请求</span></span><br><span class="line">      <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 其实就是做noBodyResponse的get请求</span></span><br><span class="line">      NoBodyResponse response = <span class="keyword">new</span> NoBodyResponse(resp);</span><br><span class="line">      <span class="keyword">this</span>.doGet(req, response);</span><br><span class="line">      response.setContentLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现doPost方法和doGet一样</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String protocol = req.getProtocol();</span><br><span class="line">    String msg = lStrings.getString(<span class="string">"http.method_post_not_supported"</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">      resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现doPut方法</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String protocol = req.getProtocol();</span><br><span class="line">    String msg = lStrings.getString(<span class="string">"http.method_put_not_supported"</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">      resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现doPut方法</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String protocol = req.getProtocol();</span><br><span class="line">    String msg = lStrings.getString(<span class="string">"http.method_delete_not_supported"</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">      resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个方法主要就是返回所有方法包括父类继承来的方法</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method[] getAllDeclaredMethods(Class&lt;?&gt; c) &#123;</span><br><span class="line">    <span class="comment">// 判断是否是HttpServlet是返回null</span></span><br><span class="line">    <span class="keyword">if</span> (c.equals(HttpServlet.class)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 获取父类的方法</span></span><br><span class="line">      Method[] parentMethods = getAllDeclaredMethods(c.getSuperclass());</span><br><span class="line">      <span class="comment">// 获取自己的方法</span></span><br><span class="line">      Method[] thisMethods = c.getDeclaredMethods();</span><br><span class="line">      <span class="comment">// 如果为null</span></span><br><span class="line">      <span class="keyword">if</span> (parentMethods != <span class="keyword">null</span> &amp;&amp; parentMethods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 则将父类method加入thisMethods数组里</span></span><br><span class="line">        Method[] allMethods = <span class="keyword">new</span> Method[parentMethods.length + thisMethods.length];</span><br><span class="line">        System.arraycopy(parentMethods, <span class="number">0</span>, allMethods, <span class="number">0</span>, parentMethods.length);</span><br><span class="line">        System.arraycopy(thisMethods, <span class="number">0</span>, allMethods, parentMethods.length, thisMethods.length);</span><br><span class="line">        thisMethods = allMethods;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> thisMethods;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// OPTIONS请求</span></span><br><span class="line">  <span class="comment">// OPTIONS方法请求Web服务器告知其支持的各种功能</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOptions</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取所有方法包括父类继承来的</span></span><br><span class="line">    Method[] methods = getAllDeclaredMethods(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="comment">// 首先将他们初始化</span></span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_GET = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_HEAD = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_POST = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_PUT = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_DELETE = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_TRACE = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ALLOW_OPTIONS = <span class="keyword">true</span>;</span><br><span class="line">    Class clazz = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 通过反射创建</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      clazz = Class.forName(<span class="string">"org.apache.catalina.connector.RequestFacade"</span>);</span><br><span class="line">      Method getAllowTrace = clazz.getMethod(<span class="string">"getAllowTrace"</span>, (Class[])<span class="keyword">null</span>);</span><br><span class="line">      ALLOW_TRACE = (Boolean)getAllowTrace.invoke(req, (Object[])<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | ClassNotFoundException var14) &#123;</span><br><span class="line">      ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历method获取方法名并比对，如果存在相应方法则将该值值为true</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; ++i) &#123;</span><br><span class="line">      Method m = methods[i];</span><br><span class="line">      <span class="keyword">if</span> (m.getName().equals(<span class="string">"doGet"</span>)) &#123;</span><br><span class="line">        ALLOW_GET = <span class="keyword">true</span>;</span><br><span class="line">        ALLOW_HEAD = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (m.getName().equals(<span class="string">"doPost"</span>)) &#123;</span><br><span class="line">        ALLOW_POST = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (m.getName().equals(<span class="string">"doPut"</span>)) &#123;</span><br><span class="line">        ALLOW_PUT = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (m.getName().equals(<span class="string">"doDelete"</span>)) &#123;</span><br><span class="line">        ALLOW_DELETE = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拼装成字符串</span></span><br><span class="line">    String allow = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (ALLOW_GET) &#123;</span><br><span class="line">      allow = <span class="string">"GET"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_HEAD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"HEAD"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", HEAD"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_POST) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"POST"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", POST"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_PUT) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"PUT"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", PUT"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_DELETE) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"DELETE"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", DELETE"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_TRACE) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"TRACE"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", TRACE"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ALLOW_OPTIONS) &#123;</span><br><span class="line">      <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        allow = <span class="string">"OPTIONS"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        allow = allow + <span class="string">", OPTIONS"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将拼装玩的字符串存入response头部</span></span><br><span class="line">    resp.setHeader(<span class="string">"Allow"</span>, allow);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 客户端发送一个请求的时，这个请求可能要穿过防火墙，代理，网关或其他</span></span><br><span class="line">  <span class="comment">// 每个中间节点都可能会修改原始的HTTP请求，TRACE方法允许客户端在最终请求发送给服务器时，看看请求最终变成了什么样</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doTrace</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String CRLF = <span class="string">"\r\n"</span>;</span><br><span class="line">    StringBuilder buffer = (<span class="keyword">new</span> StringBuilder(<span class="string">"TRACE "</span>)).append(req.getRequestURI()).append(<span class="string">" "</span>).append(req.getProtocol());</span><br><span class="line">    Enumeration reqHeaderEnum = req.getHeaderNames();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(reqHeaderEnum.hasMoreElements()) &#123;</span><br><span class="line">      String headerName = (String)reqHeaderEnum.nextElement();</span><br><span class="line">      buffer.append(CRLF).append(headerName).append(<span class="string">": "</span>).append(req.getHeader(headerName));</span><br><span class="line">    &#125;</span><br><span class="line">    buffer.append(CRLF);</span><br><span class="line">    <span class="keyword">int</span> responseLength = buffer.length();</span><br><span class="line">    resp.setContentType(<span class="string">"message/http"</span>);</span><br><span class="line">    resp.setContentLength(responseLength);</span><br><span class="line">    ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">    out.print(buffer.toString());</span><br><span class="line">    out.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自己实现的protected的service方法</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 首先我们会获取request请求的方法，是get还是post等等</span></span><br><span class="line">    String method = req.getMethod();</span><br><span class="line">    <span class="comment">// 定义LM</span></span><br><span class="line">    <span class="keyword">long</span> lastModified;</span><br><span class="line">    <span class="keyword">if</span> (method.equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">      <span class="comment">// 将这时候servlet的LM传入该方法返回-1L</span></span><br><span class="line">      <span class="comment">// LM是服务端的修改时间</span></span><br><span class="line">      lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">      <span class="keyword">if</span> (lastModified == -<span class="number">1L</span>) &#123;</span><br><span class="line">        <span class="comment">// 做doGet请求</span></span><br><span class="line">        <span class="comment">// 之所以HttpServlet希望我们重写doGet和doPost请求就是因为</span></span><br><span class="line">        <span class="comment">// 在Servlet需要实现的service方法，HttpServlet帮我们实现了</span></span><br><span class="line">        <span class="comment">// 但是它在里面调用了自己的service方法</span></span><br><span class="line">        <span class="comment">// 自己的service方法又调用了doGet和doPost</span></span><br><span class="line">        <span class="comment">// 虽然doGet和doPost不是抽象方法，但是它的实现很鸡肋我们需要重写</span></span><br><span class="line">        <span class="comment">// 我们来看一看doGet方法</span></span><br><span class="line">        <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 获取客户端发送请求中的IMS字段</span></span><br><span class="line">          ifModifiedSince = req.getDateHeader(<span class="string">"If-Modified-Since"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">          <span class="comment">// 如果没有默认赋值为-1L</span></span><br><span class="line">          ifModifiedSince = -<span class="number">1L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果IMS小于LM即客户端修改时间小于服务端修改时间</span></span><br><span class="line">        <span class="comment">// 即客户端缓存的文件在服务端已经被修改了</span></span><br><span class="line">        <span class="keyword">if</span> (ifModifiedSince &lt; lastModified / <span class="number">1000L</span> * <span class="number">1000L</span>) &#123;</span><br><span class="line">          <span class="comment">// 那么将LM存入响应头中，具体看对maybeSetLastModified方法的解析</span></span><br><span class="line">          <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">          <span class="comment">// 继续doGet</span></span><br><span class="line">          <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 当服务端这里LM小于等于IMS则返回304即不返回信息</span></span><br><span class="line">          resp.setStatus(<span class="number">304</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果是HEAD方法</span></span><br><span class="line">      <span class="comment">// HEAD方法和GET方法都是安全方法即不会进行任何操作</span></span><br><span class="line">      <span class="comment">// 但是HEAD中，服务器在响应中只返回首部，不会返回实体的主体部分</span></span><br><span class="line">      <span class="comment">// 这就允许客户端在未获得实际资源的情况下对资源的首部进行检查</span></span><br><span class="line">      <span class="comment">// 比如判断资源类型，获取响应状态码，看某个对象是否存在，测试资源是否被修改了等</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"HEAD"</span>)) &#123;</span><br><span class="line">      <span class="comment">// 所以我们会先获取LM</span></span><br><span class="line">      <span class="comment">// 这里会直接return-1L</span></span><br><span class="line">      lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">      <span class="comment">// 设置LM</span></span><br><span class="line">      <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">      <span class="comment">// 做doHEAD</span></span><br><span class="line">      <span class="keyword">this</span>.doHead(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"PUT"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doPut(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"DELETE"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doDelete(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"OPTIONS"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doOptions(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"TRACE"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doTrace(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 方法都不匹配</span></span><br><span class="line">      <span class="comment">// 那么返回501 客户端发起的请求超出服务器的能力范围</span></span><br><span class="line">      String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">      Object[] errArgs = <span class="keyword">new</span> Object[]&#123;method&#125;;</span><br><span class="line">      errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">      resp.sendError(<span class="number">501</span>, errMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置LM服务端最后修改文件时间</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">maybeSetLastModified</span><span class="params">(HttpServletResponse resp, <span class="keyword">long</span> lastModified)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果响应头中没有</span></span><br><span class="line">    <span class="keyword">if</span> (!resp.containsHeader(<span class="string">"Last-Modified"</span>)) &#123;</span><br><span class="line">      <span class="comment">// 且它大于0 那么就将当前传入的LM存入响应头中</span></span><br><span class="line">      <span class="keyword">if</span> (lastModified &gt;= <span class="number">0L</span>) &#123;</span><br><span class="line">        resp.setDateHeader(<span class="string">"Last-Modified"</span>, lastModified);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// HttpServlet在重写了service方法</span></span><br><span class="line">  <span class="comment">// 这里它干了两件事情</span></span><br><span class="line">  <span class="comment">// 1.将ServletResponse和ServletRequest转换成HttpServletResponse和HttpServletRequest</span></span><br><span class="line">  <span class="comment">// 2.将转换来的HttpServletResponse和HttpServletRequest作为参数传入自己实现的service方法，然后我们看上面的service方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    HttpServletRequest request;</span><br><span class="line">    HttpServletResponse response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      request = (HttpServletRequest)req;</span><br><span class="line">      response = (HttpServletResponse)res;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException var6) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"non-HTTP request or response"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.service(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Servlet是什么&quot;&gt;&lt;a href=&quot;#Servlet是什么&quot; class=&quot;headerlink&quot; title=&quot;Servlet是什么&quot;&gt;&lt;/a&gt;Servlet是什么&lt;/h2&gt;&lt;p&gt;  当HTTP服务器在接收到请求就需要调用服务端的应用程序去处理，一般来说，
      
    
    </summary>
    
      <category term="Tomcat" scheme="https://francisqiang.github.io/categories/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Web容器和HTTP协议必知必会</title>
    <link href="https://francisqiang.github.io/2019/07/20/Web%E5%AE%B9%E5%99%A8%E5%92%8CHTTP%E5%8D%8F%E8%AE%AE%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <id>https://francisqiang.github.io/2019/07/20/Web容器和HTTP协议必知必会/</id>
    <published>2019-07-20T12:03:44.000Z</published>
    <updated>2019-07-20T12:49:44.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web容器是什么"><a href="#Web容器是什么" class="headerlink" title="Web容器是什么"></a>Web容器是什么</h2><p>  在早期，Web容器是指<strong>HTTP服务器</strong>。因为在那时候浏览器只是用来浏览新闻和文章的，像类似的Apache,Nginx等HTTP服务器就是负责向浏览器返回静态资源如HTML等，然后浏览器在负责解析HTML来展现给用户。</p><p>  后来，人们又要求网页呈现动态化和交互效果，于是伟大的Web开发工程师就想出了一种扩展机制来让HTTP服务器调用服务端程序，Sun公司由此推出了Servlet技术，我们可以简单理解它是运行在服务端的Java小程序，但是Servlet没有main方法,他不能独立运行，必须把它部署到Servlet容器中，由容器来实例化并调用Servlet。</p><p>  而Tomcat和Jetty就是一个Servlet容器，同时它具有HTTP服务器的功能，因此Tomcat或Jetty就是一个HTTP服务器+Servlet容器，我们也叫它 <strong><em>Web容器</em></strong>。</p><p>  而类似的，JBoss，WebLogic，他们不仅仅有Servlet容器的功能，同时也包含EJB容器，是完整的JavaEE应用服务器。</p><p>  而对于倾向于轻量化的今天，尤其是微服务大行其道的今天，Tomcat和Jetty的轻量化更加吸引了人们的使用，在SpringBoot中Tomcat就作为嵌入应用的默认Web容器。</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>  学过网络的都知道OSI七层模型，而HTTP是在应用层的协议，HTTP是基于传输层TCP/IP协议来传输数据(HTML,图片，查询结果等)的。<em>HTTP不涉及数据包的传输，主要规定了传输数据的格式即客户端和服务端的通信格式</em>。</p><p>  假设这时候一个浏览器要从远程HTTP服务器获取HTML文本，这个过程中，实际要做两件事情。</p><ol><li><p>与服务器建立socket连接</p></li><li><p>生成请求数据并通过socket发送出去</p><p>其中这个请求数据就必须遵循某种特定的数据格式，这种数据格式其实就是HTTP协议的本质。</p></li></ol><h3 id="HTTP请求格式"><a href="#HTTP请求格式" class="headerlink" title="HTTP请求格式"></a>HTTP请求格式</h3><p>  请求行，请求报头，请求正文</p><p>  <img src="/2019/07/20/Web容器和HTTP协议必知必会/1.jpg" alt="请求格式"></p><h3 id="HTTP相应格式"><a href="#HTTP相应格式" class="headerlink" title="HTTP相应格式"></a>HTTP相应格式</h3><p>  状态行，响应报头，报文主体</p><p>  <img src="/2019/07/20/Web容器和HTTP协议必知必会/2.jpg" alt="相应格式"></p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>  存储在用户本地的文件，里面包含了每次请求需要传递的消息，每次HTTP请求报文中都包含有Cookie。</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>  因为Cookie的明文传输的问题，Session出现了。Session可以理解为服务器开辟的存储空间，里面保存了用户的状态信息。</p><p>  那么Session在何时何地创建呢？当然还是在服务器端程序运行的过程中创建的，不同语言实现的应用程序有不同的创建Session的方法。在Java中，是Web应用程序在调用HttpServletRequest的getSession方法时，由Web容器（比如Tomcat）创建的。</p><p>  同时，Session有过期时间，因此Tomcat会开启后台线程定期的轮询，如果Session过期了就将Session失效。</p><p>  Session怎么和请求对应起来的呢？</p><p>  Cookie， 浏览器在Cookie中填充了一个SessionID字段用来表示请求</p><p>  工作流程:</p><p>  创建Session同时生成唯一ID，当浏览器再次发送请求的时候会将SessionID带上，服务器通过SessionID来寻找对应的Session，然后对其进行操作，具体内容只会保存在服务器中，客户端只会存SessionID，这样来说相对安全，但不是绝对安全。但是当访问量变多时候服务器不可能能承受那么多Session，这时候服务器要做集群，但是集群中还要解决Session共享的问题，所以一般会引入中间件Redis来存储Session。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Web容器是什么&quot;&gt;&lt;a href=&quot;#Web容器是什么&quot; class=&quot;headerlink&quot; title=&quot;Web容器是什么&quot;&gt;&lt;/a&gt;Web容器是什么&lt;/h2&gt;&lt;p&gt;  在早期，Web容器是指&lt;strong&gt;HTTP服务器&lt;/strong&gt;。因为在那时候浏览
      
    
    </summary>
    
      <category term="Tomcat" scheme="https://francisqiang.github.io/categories/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——visitor模式</title>
    <link href="https://francisqiang.github.io/2019/07/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94visitor%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/07/19/设计模式——visitor模式/</id>
    <published>2019-07-19T09:36:59.000Z</published>
    <updated>2019-07-19T11:01:56.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是visitor模式"><a href="#什么是visitor模式" class="headerlink" title="什么是visitor模式"></a>什么是visitor模式</h2><p>  访问者模式，《JAVA与模式》这本书中提到的一句: <strong><em>访问者模式是对象的行为模式。访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这些操作的数据结构则可以保持不变。</em></strong></p><p>  我们先来理解一下这句话的意思，目的是封装对于数据结构元素的操作。首先，提出三个问题，这句话的封装是什么意思？这句话指的数据结构是什么？对于数据结构的操作又是什么？</p><p>  有些官方语句之所以难理解就是因为它太抽象了，能使它容易理解那么就必须先化抽象为具体，然后再从具体去看抽象。</p><p>  在visitor模式中运用到了一个最核心的理念就是<strong>双分派</strong>，何为双分派呢？既然是双，那么必定存在两个角色，这两个角色是什么呢？在访问者模式里面肯定是访问者和被访问者。</p><p>  我们再来看看上面那句话，刚刚还有两个疑问分别是这句话的数据结构是什么？这句话的操作又是什么？其实我们可以直接理解为数据结构就是被访问者，操作就是访问者，封装就是通过双分派机制来使操作去拥有数据结构并且能对数据结构进行改变，而数据结构(元素)同时也接受一个操作对象(访问者)，当操作改变的时候，我们再利用面向抽象编程就可以轻松地分离出操作而不改变数据结构了。</p><h2 id="visitor模式UML图"><a href="#visitor模式UML图" class="headerlink" title="visitor模式UML图"></a>visitor模式UML图</h2><p>  <img src="/2019/07/19/设计模式——visitor模式/1.jpg" alt="UML"></p><p>  Visitor: 抽象访问者，为具体访问者声明一个visit方法，注意的是这里的visit方法数量是根据访问者类型多少而决定的。</p><p>  ConcreteVisitor: 具体访问者，实现了visit方法，是对于访问者操作的具体实现</p><p>  Element: 被访问的数据结构的抽象类，定义了一个accept方法用来接受一个访问者对象。</p><p>  ConcreteElement: 被访问者的数据结构的具体实现类，实现accept方法。accept方法接受一个访问者，让后这里面会调用访问者的具体visit方法，然后再将自己作为对象传入这个访问者的具体visit方法中，在这个visit方法中就会调用一些对于对象进行操作的方法。</p><p>  ObjectStructure: 这个类其实对于整个设计模式中关联性不是很强，可以忽略，它的作用就是将上述的Element放入一个集合中，可能我们会对这个集合进行遍历然后再进行操作等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是visitor模式&quot;&gt;&lt;a href=&quot;#什么是visitor模式&quot; class=&quot;headerlink&quot; title=&quot;什么是visitor模式&quot;&gt;&lt;/a&gt;什么是visitor模式&lt;/h2&gt;&lt;p&gt;  访问者模式，《JAVA与模式》这本书中提到的一句: &lt;s
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式——Decoration模式</title>
    <link href="https://francisqiang.github.io/2019/07/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94Decoration%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/07/18/设计模式——Decoration模式/</id>
    <published>2019-07-18T15:13:42.000Z</published>
    <updated>2019-07-18T15:39:37.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是装饰模式"><a href="#什么是装饰模式" class="headerlink" title="什么是装饰模式"></a>什么是装饰模式</h2><p>  参考自<a href="https://www.zhihu.com/question/32007641/answer/687582571" target="_blank" rel="noopener">java中什么是装饰者模式?</a></p><p>  看了老半天Decoration模式还是没看懂，后面看具体实现再去看UML图的时候突然恍然大悟。</p><p>  首先，我们要先确定这个设计模式中有什么角色，有什么作用。</p><p>  第一当然需要被装饰的类了，比如说有一个Component抽象类，然后又有一个ConcreateComponent实现类，这个具体的Component类就是具体我们需要装饰的类。</p><p>  既然是装饰模式，当然需要装饰的类了，和其他设计模式一样，我们面向抽象编程，首先这个装饰的类我们先定义一个抽象的类AbstractDecoration，它继承了Component抽象类，这时候它就可以去重写Component类中需要被包装增强的方法了，并且它还拥有一个Component字段，我们只需要将Component(需要被包装的类)放入它的构造方法中，然后这个包装类重写被包装类的某个需要被包装的方法。</p><p>  之后我们可以新增一些具体实现的包装类，比如MusicDecoration类，我们需要在包装方法前调用听音乐，我们这个MusicDecoration就可以新增一个listenMusic方法，并且在重写方法前添上这个方法的调用在调用字段的需要被包装方法前。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写打电话的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在打电话之前听音乐</span></span><br><span class="line">    listenMusic();</span><br><span class="line">    <span class="comment">// 因为super.call就是调用当前字段的call方法</span></span><br><span class="line">    <span class="keyword">super</span>.call();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  当我们需要在包装方法后面添加一个吃饭的方法，我们可以新增一个具体实现类EatDecoration类并且重写call方法。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 重写打电话的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 因为super.call就是调用当前字段的call方法</span></span><br><span class="line">    <span class="keyword">super</span>.call();</span><br><span class="line">    <span class="comment">// 在调用完call之后新添加一个eat</span></span><br><span class="line">    eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这时候我们就可以这样创建一个对象，并且调用。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Phone phone = <span class="keyword">new</span> EatDecoration(<span class="keyword">new</span> MusicDecoration(<span class="keyword">new</span> ConcreateComponent()));</span><br><span class="line">phone.call();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是装饰模式&quot;&gt;&lt;a href=&quot;#什么是装饰模式&quot; class=&quot;headerlink&quot; title=&quot;什么是装饰模式&quot;&gt;&lt;/a&gt;什么是装饰模式&lt;/h2&gt;&lt;p&gt;  参考自&lt;a href=&quot;https://www.zhihu.com/question/32007
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Java设计模式——Builder模式</title>
    <link href="https://francisqiang.github.io/2019/07/17/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94Builder%E6%A8%A1%E5%BC%8F/"/>
    <id>https://francisqiang.github.io/2019/07/17/Java设计模式——Builder模式/</id>
    <published>2019-07-17T14:43:09.000Z</published>
    <updated>2019-07-17T15:17:10.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Builder模式"><a href="#什么是Builder模式" class="headerlink" title="什么是Builder模式"></a>什么是Builder模式</h2><p>  今天看了Builder设计模式，发现Builder模式和模板方法模式都差不多，不同的是——模板方法模式中对于方法的调用顺序是在原本抽象父类里面定义的，而建造者模式是在另一个Director类中定义的。</p><p>  <img src="/2019/07/17/Java设计模式——Builder模式/1.jpg" alt="UML类图"></p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>Builder类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String str)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类主要是定义一些抽象方法提供一些子类Builder去实现。</p><p>比如这里的TextBuilder和AnotherBuilder等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        buffer.append(<span class="string">"======\n"</span>);</span><br><span class="line">        buffer.append(<span class="string">"["</span> + title + <span class="string">"]\n"</span>);</span><br><span class="line">        buffer.append(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        buffer.append(<span class="string">".."</span> + str + <span class="string">"..\n"</span>);</span><br><span class="line">        buffer.append(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i++)&#123;</span><br><span class="line">            buffer.append(<span class="string">"----"</span> + items[i] + <span class="string">"----\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.append(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        buffer.append(<span class="string">"================\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        buffer.append(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n"</span>);</span><br><span class="line">        buffer.append(<span class="string">"&#123;"</span> + title + <span class="string">"&#125;\n"</span>);</span><br><span class="line">        buffer.append(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        buffer.append(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i++)&#123;</span><br><span class="line">            buffer.append(<span class="string">"+++++"</span> + items[i] + <span class="string">"++++\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.append(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        buffer.append(<span class="string">"0000000000000\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面两个子类分别不同实现了Builder抽象类，这时候我们创建一个Director类去拥有一个Builder实例，并且在Director中创建一个方法去控制Builder中实现的一些方法的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.makeTitle(<span class="string">"Title"</span>);</span><br><span class="line">        builder.makeString(<span class="string">"String"</span>);</span><br><span class="line">        builder.makeItems(<span class="keyword">new</span> String[]&#123;</span><br><span class="line">            <span class="string">"xxx"</span>,</span><br><span class="line">            <span class="string">"xxxx"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        builder.makeString(<span class="string">"endString"</span>);</span><br><span class="line">            builder.makeItems(<span class="keyword">new</span> String[]&#123;</span><br><span class="line">            <span class="string">"endxxx"</span>,</span><br><span class="line">            <span class="string">"endxxx"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        builder.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  所谓建造者模式，就是变相的模板方法模式。其中我们的Builder是一个抽象类，其中定义了建造者的一些建造方法，这些方法都是一些细节的，比如说建造一个大楼，首先打地基可能就是Builder中需要定义实现的一个方法。然后一些实体类去实现这个抽象方法。之后我们定义了一个Director类，这个类拥有了一个Builder字段，然后有一个方法中调用了这个builder实体字段的某些建造方法比如打地基什么的，这个调用建造方法的方法可能还调用了其他建造方法，总之这个方法作为一个集大成者，将一些细节拼装起来，最后可能就建造了一座雄伟的大厦。</p><p>  当我们需要构造一个非常复杂的对象的时候，我们可以使用Builder模式，我们可以将它拆解成一些细小的东西最后拼装起来，这有点像Flutter中的组件开发。</p><p>  Builder模式和模板方法模式，我认为Builder模式更加松耦合。在模板方法模式中，定义方法的顺序或者执行的一些细节是在被实现的抽象父类中的，这个方法里面可能调用了许多抽象方法(当然不只是抽象，主要就是后面会被实现的)，模板方法模式在Servlet中的doGet，doPost中运用到了。而Builder模式是开辟了一个新的类，这个类拥有这个需要被实现方法的类，并且在新类中的方法中调用了需要被实现方法的类的方法。可以说，这里正好阐释了has有时候往往由于is。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Builder模式&quot;&gt;&lt;a href=&quot;#什么是Builder模式&quot; class=&quot;headerlink&quot; title=&quot;什么是Builder模式&quot;&gt;&lt;/a&gt;什么是Builder模式&lt;/h2&gt;&lt;p&gt;  今天看了Builder设计模式，发现Builder模式和
      
    
    </summary>
    
      <category term="Java设计模式" scheme="https://francisqiang.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Java是解释执行吗</title>
    <link href="https://francisqiang.github.io/2019/07/15/Java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%90%97/"/>
    <id>https://francisqiang.github.io/2019/07/15/Java是解释执行吗/</id>
    <published>2019-07-15T12:45:04.000Z</published>
    <updated>2019-07-15T13:24:15.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h2><p>  所谓解释型语言就是解释器对代码进行逐条解释，解释成本地机器代码然后直接运行</p><h2 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h2><p>  所谓编译型语言就是在程序运行之前，将代码提前编译成本地机器代码。</p><h2 id="JIT编译技术"><a href="#JIT编译技术" class="headerlink" title="JIT编译技术"></a>JIT编译技术</h2><p>  以前不是很懂JIT和解释型语言的区别，一直以为JIT就是解释型语言。其实JIT是在程序运行时将代码逐条编译成本地机器代码，看似和解释型语言的定义没啥区别，但是JIT最重要的是加了个缓存。根据程序的局部性原理，代码会被多次循环调用，JIT所做的就是将逐条解释编译成的机器代码存入缓存中，当再次对相同语句进行编译的时候直接从缓存中调用。因为局部性原理，所以性能不会有什么损失。</p><h2 id="Java是解释执行吗"><a href="#Java是解释执行吗" class="headerlink" title="Java是解释执行吗"></a>Java是解释执行吗</h2><p>  以前一直以为Java是编译型语言，因为从.java文件到.class文件需要一个编译的过程。</p><p>  看了许多回答，其实大家对解释型语言和编译型语言都有着不同的见解。我觉得对于语言类型的定义并不重要，了解语言的本质才是精髓。</p><p>  上文提到编译型语言，当编译型语言的程序生成了目标文件，这个目标文件是本地机器能直接运行的文件，它是针对cpu而言的，因为硬件本身的差异，编译型语言的程序当需要在另外一种cpu上面运行的时候，这个程序必须要重新编译。</p><p>  这里我就直接定义为编译型语言就是在运行之前将程序直接编译成本机机器码的语言，如C，C++等。</p><p>  而对于py，java这些语言来说，可能也存在着一些编译的过程，就比如说Java中需要先将.java文件编译成.class文件，而对于本地机器，它是无法运行.class文件的，所以我们称之为解释语言。对于.java到.class的编译，它的目的就是将代码编译成统一平台(JVM)上能看得懂的代码，它是一种中间代码，不是本地机器代码，之所以java代码能Write once, run anywhere就是因为JVM这个中间层的存在，因为jvm屏蔽了操作系统和硬件的细节，它会将.class文件转换为本地机器可以执行的本地代码。</p><p>  我们通常会把Java分为编译期和运行时，上述就是编译期。而运行时的时候，JVM会通过类加载器(Class-Loader)加载字节码，解释或者编译执行。</p><p>  注意这里是解释或者编译执行，在主流Java版本Java8中它就是解释和编译混合的一种模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;解释型语言&quot;&gt;&lt;a href=&quot;#解释型语言&quot; class=&quot;headerlink&quot; title=&quot;解释型语言&quot;&gt;&lt;/a&gt;解释型语言&lt;/h2&gt;&lt;p&gt;  所谓解释型语言就是解释器对代码进行逐条解释，解释成本地机器代码然后直接运行&lt;/p&gt;
&lt;h2 id=&quot;编译型语言&quot;
      
    
    </summary>
    
      <category term="Java SE" scheme="https://francisqiang.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter实例——搜索条的实现</title>
    <link href="https://francisqiang.github.io/2019/06/27/Flutter%E5%AE%9E%E4%BE%8B%E2%80%94%E2%80%94%E6%90%9C%E7%B4%A2%E6%9D%A1%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://francisqiang.github.io/2019/06/27/Flutter实例——搜索条的实现/</id>
    <published>2019-06-27T02:55:51.000Z</published>
    <updated>2019-06-27T07:08:33.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SearchDelegate"><a href="#SearchDelegate" class="headerlink" title="SearchDelegate"></a>SearchDelegate</h2><p>  在Flutter中实现搜索框可以使用SearchDelegate来实现，我们需要将自己要实现搜索框的类继承于它，并且实现相关的方法。</p><ul><li><h3 id="buildSuggestions"><a href="#buildSuggestions" class="headerlink" title="buildSuggestions"></a>buildSuggestions</h3><p>这个方法监听这query，query是用户键入的内容，这个方法一般返回一个ListView，然后将建议的列表放置其中，当列表中某一项被点击的时候应该通过回调showResults方法来显示结果。</p></li><li><h3 id="buildResults"><a href="#buildResults" class="headerlink" title="buildResults"></a>buildResults</h3><p>用来构建搜索结果被提交后的显示结果</p></li><li><h3 id="buildLeading"><a href="#buildLeading" class="headerlink" title="buildLeading"></a>buildLeading</h3><p>查询条的左边头放置的部件，通常返回一个返回按钮并且触发close事件</p></li><li><h3 id="buildActions"><a href="#buildActions" class="headerlink" title="buildActions"></a>buildActions</h3><p>查询条右边放置的组件，返回一个widget数组，通常里面存放着清除按钮，搜索按钮等</p></li></ul><h2 id="SearchDelegate源码及详解"><a href="#SearchDelegate源码及详解" class="headerlink" title="SearchDelegate源码及详解"></a>SearchDelegate源码及详解</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchDelegate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建议显示在搜索页的正文中，而用户在搜索字段中键入一个查询。每当[Query]的内容发生变化时，都会调用委托方法。建议应该基于当前[Query]字符串。如果查询String为空，则根据PASS查询或当前上下文显示建议的查询是很好的做法。通常，此方法将返回一个[listview]，其中包含每个建议中的一个列表。当[listtile.ontab]被调用时，[query]应该用相应的建议来更新，结果页面应该通过调用[showResults]来显示。</span></span><br><span class="line"></span><br><span class="line">  Widget buildSuggestions(BuildContext context);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户从搜索页面提交搜索后显示的结果。可使用[Query]的当前值来确定用户搜索的内容。此方法可多次应用于同一查询。如果您的[构建结果]方法在计算上开销很大，您可能希望缓存一个或多个查询的搜索结果。通常，此方法返回带有搜索结果的[listview]。当用户点击特定的搜索结果时，[close]应该被调用，并将选定的结果作为参数。这将关闭搜索页面并将结果传回[SHOWSEARCH]的初始调用方。</span></span><br><span class="line">  Widget buildResults(BuildContext context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在[appbar]中当前查询之前显示的一个小部件。通常是一个配置了一个[backtton图标]的[偶像按钮]，该按钮退出带有[Close]的搜索。还可以使用由[过渡动画]驱动的[动画图标]，当搜索覆盖逐渐消失时，[动画图标]从汉堡包菜单到Back按钮。如果不显示小部件，则返回NULL。</span></span><br><span class="line">  Widget buildLeading(BuildContext context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在[appbar]中的搜索查询之后显示的小部件。如果[查询]不是空的，这通常应该包含到清除查询的按钮，并再次显示建议(通过[显示建议])</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; buildActions(BuildContext context);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于设置主题 默认为白色主题</span></span><br><span class="line">  ThemeData appBarTheme(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(context != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">final</span> ThemeData theme = Theme.of(context);</span><br><span class="line">    <span class="keyword">assert</span>(theme != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> theme.copyWith(</span><br><span class="line">      primaryColor: Colors.white,</span><br><span class="line">      primaryIconTheme: theme.primaryIconTheme.copyWith(color: Colors.grey),</span><br><span class="line">      primaryColorBrightness: Brightness.light,</span><br><span class="line">      primaryTextTheme: theme.textTheme,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示在[appbar]中的当前查询字符串。用户通过键盘操作此字符串。如果用户点击[buildSuggestions]提供的建议，则应通过setter将该string更新为该建议。</span></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> query =&gt; _queryTextController.text;</span><br><span class="line">  <span class="keyword">set</span> query(<span class="built_in">String</span> value) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(query != <span class="keyword">null</span>);</span><br><span class="line">    _queryTextController.text = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从[BuildSuggestions]返回的建议转换到[BuildResults]返回的[查询]结果如果用户点击[BuildSuggestions]提供的建议，屏幕应典型地过渡到显示所建议查询的搜索结果的页面。同样的，使用[showSuggestions]可再次显示搜索建议。</span></span><br><span class="line">  <span class="keyword">void</span> showResults(BuildContext context) &#123;</span><br><span class="line">    _focusNode.unfocus();</span><br><span class="line">    _currentBody = _SearchBody.results;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从显示[buildResults]返回的结果到显示/显示[BuildSuggestions]返回的建议。调用此方法还会将输入焦点放回[appbar]的搜索字段中。如果目前显示了结果，则可以使用此方法返回以显示搜索建议。</span></span><br><span class="line">  <span class="keyword">void</span> showSuggestions(BuildContext context) &#123;</span><br><span class="line">    FocusScope.of(context).requestFocus(_focusNode);</span><br><span class="line">    _currentBody = _SearchBody.suggestions;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭搜索页面并返回到底层路由。Result为为底层路由返回的值</span></span><br><span class="line">  <span class="keyword">void</span> close(BuildContext context, T result) &#123;</span><br><span class="line">    _currentBody = <span class="keyword">null</span>;</span><br><span class="line">    _focusNode.unfocus();</span><br><span class="line">    Navigator.of(context)</span><br><span class="line">      ..popUntil((Route&lt;<span class="keyword">dynamic</span>&gt; route) =&gt; route == _route)</span><br><span class="line">      ..pop(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// [animation]在搜索页面淡入或淡出时触发。此动画通常用于为[buildleading]或[buildactions]返回的[iconbutton]s设置动画。它还可以用于设置搜索页面下方路线中包含的[iconbutton]的动画。</span></span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; <span class="keyword">get</span> transitionAnimation =&gt; _proxyAnimation;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否选中</span></span><br><span class="line">  <span class="keyword">final</span> FocusNode _focusNode = FocusNode();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输入框的控制器</span></span><br><span class="line">  <span class="keyword">final</span> TextEditingController _queryTextController = TextEditingController();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置过度动画</span></span><br><span class="line">  <span class="keyword">final</span> ProxyAnimation _proxyAnimation = ProxyAnimation(kAlwaysDismissedAnimation);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> ValueNotifier&lt;_SearchBody&gt; _currentBodyNotifier = ValueNotifier&lt;_SearchBody&gt;(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">  _SearchBody <span class="keyword">get</span> _currentBody =&gt; _currentBodyNotifier.value;</span><br><span class="line">  <span class="keyword">set</span> _currentBody(_SearchBody value) &#123;</span><br><span class="line">    _currentBodyNotifier.value = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _SearchPageRoute&lt;T&gt; _route;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'search bar'</span>,</span><br><span class="line">      theme: ThemeData(primarySwatch: Colors.cyan),</span><br><span class="line">      home: SearchBarDemo(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchBarDemo</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SearchBarDemoState createState() =&gt; _SearchBarDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SearchBarDemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SearchBarDemo</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        centerTitle: <span class="keyword">true</span>,</span><br><span class="line">        title: Text(<span class="string">'search bar demo'</span>),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          IconButton(</span><br><span class="line">            icon: Icon(Icons.search),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              showSearch(context: context, delegate: SearchBarDelegate());</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchBarDelegate</span> <span class="keyword">extends</span> <span class="title">SearchDelegate</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; buildActions(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      IconButton(</span><br><span class="line">        icon: Icon(Icons.clear),</span><br><span class="line">        onPressed: () =&gt; query = <span class="string">''</span>,</span><br><span class="line">      )</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildLeading(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> IconButton(</span><br><span class="line">      icon: AnimatedIcon(</span><br><span class="line">        icon: AnimatedIcons.menu_arrow,</span><br><span class="line">        progress: transitionAnimation,</span><br><span class="line">      ),</span><br><span class="line">      onPressed: () =&gt; close(context, <span class="keyword">null</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildResults(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        width: <span class="number">100.0</span>,</span><br><span class="line">        height: <span class="number">100.0</span>,</span><br><span class="line">        child: Card(</span><br><span class="line">          elevation: <span class="number">50.0</span>,</span><br><span class="line">          color: Colors.green,</span><br><span class="line">          child: Text(</span><br><span class="line">            <span class="string">'<span class="subst">$query<span class="string">',</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            style: TextStyle(color: Colors.red),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">          ),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        ),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      ),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    );</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  @override</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  Widget buildSuggestions(BuildContext context) &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    final suggestionList = query.isEmpty</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        ? recentSuggest</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        : searchList.where((input) =&gt; input.startsWith(query)).toList();</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    return ListView.builder(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        itemCount: suggestionList.length,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        itemBuilder: (context, index) =&gt; ListTile(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">              onTap: () &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                showResults(context);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">              &#125;,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">              title: RichText(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                  text: TextSpan(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                      text: suggestionList[index].substring(0, query.length),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                      style: TextStyle(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                          color: Colors.black, fontWeight: FontWeight.bold),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                      children: [</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                    TextSpan(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        text: suggestionList[index].substring(query.length),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        style: TextStyle(color: Colors.grey))</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                  ])),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            ));</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">const searchList = [</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "jiejie-大长腿",</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "jiejie-水蛇腰",</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "gege1-帅气欧巴",</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "gege2-小鲜肉"</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">];</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">const recentSuggest = [</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "推荐-1",</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  "推荐-2"</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">];</span></span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SearchDelegate&quot;&gt;&lt;a href=&quot;#SearchDelegate&quot; class=&quot;headerlink&quot; title=&quot;SearchDelegate&quot;&gt;&lt;/a&gt;SearchDelegate&lt;/h2&gt;&lt;p&gt;  在Flutter中实现搜索框可以使用Se
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter中的动画(一)</title>
    <link href="https://francisqiang.github.io/2019/06/24/Flutter%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB-%E4%B8%80/"/>
    <id>https://francisqiang.github.io/2019/06/24/Flutter中的动画-一/</id>
    <published>2019-06-24T15:19:39.000Z</published>
    <updated>2019-06-24T16:37:25.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画概述"><a href="#动画概述" class="headerlink" title="动画概述"></a>动画概述</h2><p>  对于任何UI框架，实现动画的原理都是一样的，通过画面在短时间内的变化形成动画，基本上人眼对30帧以上的动画的感受就是极限了，即在30帧以上人眼是基本区别不了的，在Flutter中，动画的平均帧率是可以达到60FPS的，这和原生基本持平，也是Flutter的一个特点。</p><h2 id="主要涉及到的类"><a href="#主要涉及到的类" class="headerlink" title="主要涉及到的类"></a>主要涉及到的类</h2><p>  在Flutter中，实现动画主要涉及到四个类，分别是Animation,Curved,Tween,Controller。</p><p>  其中Animation类是用来保存动画的插值和状态的</p><p>  Curved是用来实现动态的变化方式，比如说一般变化是线性的，你可以通过设置不同Curved来实现不同的函数变化方式。</p><p>  Tween，在默认情况下，AnimationController对象的值范围是在0.0到1.0之间，我们可以通过设置Tween来设置动画的值的变化范围以达到我们想要的效果。</p><p>  Controller，用来控制动画的控制器。</p><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><p>  Animation对象本身和UI渲染没有关系，它是用来保存动画插值和状态的对象，我们可以查看Animation源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animation</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Listenable</span> <span class="keyword">implements</span> <span class="title">ValueListenable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Animation();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> addListener(VoidCallback listener);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> removeListener(VoidCallback listener);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> addStatusListener(AnimationStatusListener listener);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> removeStatusListener(AnimationStatusListener listener);</span><br><span class="line"></span><br><span class="line">  AnimationStatus <span class="keyword">get</span> status;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  T <span class="keyword">get</span> value;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isDismissed =&gt; status == AnimationStatus.dismissed;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isCompleted =&gt; status == AnimationStatus.completed;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@optionalTypeArgs</span></span><br><span class="line">  Animation&lt;U&gt; drive&lt;U&gt;(Animatable&lt;U&gt; child) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(<span class="keyword">this</span> <span class="keyword">is</span> Animation&lt;<span class="built_in">double</span>&gt;);</span><br><span class="line">    <span class="keyword">return</span> child.animate(<span class="keyword">this</span> <span class="keyword">as</span> <span class="keyword">dynamic</span>); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'<span class="subst">$&#123;describeIdentity(<span class="keyword">this</span>)&#125;</span>(<span class="subst">$&#123;toStringDetails()&#125;</span>)'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">String</span> toStringDetails() &#123;</span><br><span class="line">    <span class="keyword">assert</span>(status != <span class="keyword">null</span>);</span><br><span class="line">    <span class="built_in">String</span> icon;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.forward:</span><br><span class="line">        icon = <span class="string">'\u25B6'</span>; <span class="comment">// &gt;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.reverse:</span><br><span class="line">        icon = <span class="string">'\u25C0'</span>; <span class="comment">// &lt;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.completed:</span><br><span class="line">        icon = <span class="string">'\u23ED'</span>; <span class="comment">// &gt;&gt;|</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.dismissed:</span><br><span class="line">        icon = <span class="string">'\u23EE'</span>; <span class="comment">// |&lt;&lt;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">assert</span>(icon != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'<span class="subst">$icon<span class="string">';</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br></pre></td></tr></table></figure><p>  Animation对象是一个在一段时间内一次生成一个区间(Tween)之间值的类，这种输出可以是线性的，曲线的(我们可以通过Curved来设置)，这个类中还为我们定义了一些监听器和状态监听器，我们可以通过设置监听器来监听动画发生的一些变化，然后做出一些改变。</p><ol><li>addListener()可以给Animation添加帧监听器，在每一帧都会被调用。帧监听器中最常见的行为是改变状态后调用setState()来触发UI重建。</li><li>addStatusListener()可以给Animation添加“动画状态改变”监听器；动画开始、结束、正向或反向（见AnimationStatus定义）时会调用StatusListener。</li></ol><h2 id="Tween"><a href="#Tween" class="headerlink" title="Tween"></a>Tween</h2><p>  刚刚提到了Animation是用来生成在Tween之间的值的对象。</p><p>  我们先来查看一下源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tween</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">dynamic</span>&gt; <span class="keyword">extends</span> <span class="title">Animatable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tween的构造函数，接受一个开始的泛型和结束的泛型</span></span><br><span class="line">  <span class="comment">// 正如我们先前提到的Tween是一个范围</span></span><br><span class="line">  <span class="comment">// 这里的范围可以是数值也可以使某种对象例如Color等</span></span><br><span class="line">  Tween(&#123; <span class="keyword">this</span>.begin, <span class="keyword">this</span>.end &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 泛型的开始</span></span><br><span class="line">  T begin;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 泛型的结束</span></span><br><span class="line">  T end;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们需要传入一个进度百分比</span></span><br><span class="line">  <span class="comment">// 这个函数就能直接返还给我们当前进度的插值</span></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  T lerp(<span class="built_in">double</span> t) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(begin != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">assert</span>(end != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> begin + (end - begin) * t;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 该transform封装了lerp函数</span></span><br><span class="line">  <span class="comment">// 就是传入的值为0直接返回begin，为1返回end，如果不是那就返回lerp函数返回的值</span></span><br><span class="line">  <span class="comment">// 所以要实现自定义lerp，我们需要重写lerp函数而不是transform</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  T transform(<span class="built_in">double</span> t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0.0</span>)</span><br><span class="line">      <span class="keyword">return</span> begin;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">1.0</span>)</span><br><span class="line">      <span class="keyword">return</span> end;</span><br><span class="line">    <span class="keyword">return</span> lerp(t);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() =&gt; <span class="string">'<span class="subst">$runtimeType</span>(<span class="subst">$begin</span> \u2192 <span class="subst">$end</span>)'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  因为Tween继承Animatable这个抽象类，这个抽象类中有一个方法animate方法，它用来返回一个Animation对象，所以对于Tween类我们通常设置完begin和end之后会调用原本继承于Animatable抽象类的animate方法设置一个Animation对象并赋值给一个Animation对象。</p><h2 id="Curve"><a href="#Curve" class="headerlink" title="Curve"></a>Curve</h2><p>  Curve这个类是用来设置动画的变化曲线的，默认情况下是线性变化的。</p><p>  我们一般使用CurveAnimation这个对象来自定义设置动画曲线，我们可以查看一下它的源码。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurvedAnimation</span> <span class="keyword">extends</span> <span class="title">Animation</span>&lt;<span class="title">double</span>&gt; <span class="title">with</span> <span class="title">AnimationWithParentMixin</span>&lt;<span class="title">double</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  CurvedAnimation(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.parent,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.curve,</span><br><span class="line">    <span class="keyword">this</span>.reverseCurve,</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(parent != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(curve != <span class="keyword">null</span>) &#123;</span><br><span class="line">    _updateCurveDirection(parent.status);</span><br><span class="line">    parent.addStatusListener(_updateCurveDirection);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来设置父控制器，这里一般传入AnimationController</span></span><br><span class="line">  <span class="comment">// 用来将自己的curve添加到这个控制器中去。</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">final</span> Animation&lt;<span class="built_in">double</span>&gt; parent;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置自己的curve</span></span><br><span class="line">  Curve curve;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来设置动画的反转时的曲线，不设置就和原来相等，</span></span><br><span class="line">  <span class="comment">// 为了保持动画在结束和反转开始的时候动画的连续性</span></span><br><span class="line">  <span class="comment">// flutter会为我们将反转曲线的值和结束设置在同一点。</span></span><br><span class="line">  Curve reverseCurve;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来设置曲线的方向</span></span><br><span class="line">  <span class="comment">// 只有动画结束或者开始的时候我们才能设置</span></span><br><span class="line">  <span class="comment">// 以免造成动画的不连续性</span></span><br><span class="line">  AnimationStatus _curveDirection;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新curveDirection</span></span><br><span class="line">  <span class="keyword">void</span> _updateCurveDirection(AnimationStatus status) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.dismissed:</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.completed:</span><br><span class="line">        _curveDirection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.forward:</span><br><span class="line">        _curveDirection ??= AnimationStatus.forward;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> AnimationStatus.reverse:</span><br><span class="line">        _curveDirection ??= AnimationStatus.reverse;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> _useForwardCurve &#123;</span><br><span class="line">    <span class="keyword">return</span> reverseCurve == <span class="keyword">null</span> || (_curveDirection ?? parent.status) != AnimationStatus.reverse;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">double</span> <span class="keyword">get</span> value &#123;</span><br><span class="line">    <span class="keyword">final</span> Curve activeCurve = _useForwardCurve ? curve : reverseCurve;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> t = parent.value;</span><br><span class="line">    <span class="keyword">if</span> (activeCurve == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0.0</span> || t == <span class="number">1.0</span>) &#123;</span><br><span class="line">      <span class="keyword">assert</span>(() &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">double</span> transformedValue = activeCurve.transform(t);</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">double</span> roundedTransformedValue = transformedValue.round().toDouble();</span><br><span class="line">        <span class="keyword">if</span> (roundedTransformedValue != t) &#123;</span><br><span class="line">          <span class="keyword">throw</span> FlutterError(</span><br><span class="line">            <span class="string">'Invalid curve endpoint at <span class="subst">$t</span>.\n'</span></span><br><span class="line">            <span class="string">'Curves must map 0.0 to near zero and 1.0 to near one but '</span></span><br><span class="line">            <span class="string">'<span class="subst">$&#123;activeCurve.runtimeType&#125;</span> mapped <span class="subst">$t</span> to <span class="subst">$transformedValue</span>, which '</span></span><br><span class="line">            <span class="string">'is near <span class="subst">$roundedTransformedValue</span>.'</span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;());</span><br><span class="line">      <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> activeCurve.transform(t);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (reverseCurve == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'<span class="subst">$parent</span>\u27A9<span class="subst">$curve<span class="string">';</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    if (_useForwardCurve)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      return '</span></span><span class="subst">$parent</span>\u27A9<span class="subst">$curve</span>\u2092\u2099/<span class="subst">$reverseCurve<span class="string">';</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    return '</span></span><span class="subst">$parent</span>\u27A9<span class="subst">$curve</span>/<span class="subst">$reverseCurve</span>\u2092\u2099'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  对于CurveAnimation我们可以直接使用构造方法来指定父controller和想要实现的curve</p><h2 id="AnimationController"><a href="#AnimationController" class="headerlink" title="AnimationController"></a>AnimationController</h2><p>  用来实现动画的控制器，它包含动画的启动forward()、停止stop() 、反向播放 reverse()等方法。AnimationController会在动画的每一帧，就会生成一个新的值。默认情况下，AnimationController在给定的时间段内线性的生成从0.0到1.0（默认区间）的数字。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">AnimationController(&#123;</span><br><span class="line">  <span class="built_in">double</span> value,</span><br><span class="line">  <span class="comment">// 接受一个Duration对象，可以设置持续时间</span></span><br><span class="line">  <span class="keyword">this</span>.duration,</span><br><span class="line">  <span class="keyword">this</span>.debugLabel,</span><br><span class="line">  <span class="comment">// 设置动画值最低</span></span><br><span class="line">  <span class="keyword">this</span>.lowerBound = <span class="number">0.0</span>,</span><br><span class="line">  <span class="comment">// 设置最高</span></span><br><span class="line">  <span class="keyword">this</span>.upperBound = <span class="number">1.0</span>,</span><br><span class="line">  <span class="keyword">this</span>.animationBehavior = AnimationBehavior.normal,</span><br><span class="line">  <span class="meta">@required</span> TickerProvider vsync,</span><br><span class="line">&#125;) : <span class="keyword">assert</span>(lowerBound != <span class="keyword">null</span>),</span><br><span class="line">     <span class="keyword">assert</span>(upperBound != <span class="keyword">null</span>),</span><br><span class="line">     <span class="keyword">assert</span>(upperBound &gt;= lowerBound),</span><br><span class="line">     <span class="keyword">assert</span>(vsync != <span class="keyword">null</span>),</span><br><span class="line">     _direction = _AnimationDirection.forward &#123;</span><br><span class="line">  _ticker = vsync.createTicker(_tick);</span><br><span class="line">  _internalSetValue(value ?? lowerBound);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ticker"><a href="#Ticker" class="headerlink" title="Ticker"></a>Ticker</h2><p>  当创建一个AnimationController时，需要传递一个vsync参数，它接收一个TickerProvider类型的对象，它的主要职责是创建Ticker，定义如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TickerProvider</span> </span>&#123;</span><br><span class="line">  <span class="comment">//通过一个回调创建一个Ticker</span></span><br><span class="line">  Ticker createTicker(TickerCallback onTick);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  Flutter应用在启动时都会绑定一个SchedulerBinding，通过SchedulerBinding可以给每一次屏幕刷新添加回调，而Ticker就是通过SchedulerBinding来添加屏幕刷新回调，这样一来，每次屏幕刷新都会调用TickerCallback。使用Ticker(而不是Timer)来驱动动画会防止屏幕外动画（动画的UI不在当前屏幕时，如锁屏时）消耗不必要的资源，因为Flutter中屏幕刷新时会通知到绑定的SchedulerBinding，而Ticker是受SchedulerBinding驱动的，由于锁屏后屏幕会停止刷新，所以Ticker就不会再触发。</p><p>  通过将SingleTickerProviderStateMixin添加到State的定义中，然后将State对象作为vsync的值，这在后面的例子中可以见到。</p><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><p>  这里我们实现一个Icon通过动画的值来变化大小和颜色的动画</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimateLove</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimateLoveState createState() =&gt; _AnimateLoveState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimateLoveState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimateLove</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来保存动画的插值</span></span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _animation;</span><br><span class="line">  <span class="comment">// 动画的控制器</span></span><br><span class="line">  AnimationController _animationController;</span><br><span class="line">  <span class="comment">// 动画实现曲线效果</span></span><br><span class="line">  CurvedAnimation _curvedAnimation;</span><br><span class="line">  <span class="comment">// 用来保存动画的值(这里则是Color)</span></span><br><span class="line">  Animation&lt;Color&gt; _colorTween;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 首先初始化动画控制器</span></span><br><span class="line">    <span class="comment">// 这个类需要with一个TickerProviderStateMixin</span></span><br><span class="line">    <span class="comment">// 这个类提供一个this实现动画的垂直同步</span></span><br><span class="line">    _animationController = AnimationController(</span><br><span class="line">      <span class="comment">// 接受一个Duration，可以设置动画的持续时间</span></span><br><span class="line">      duration: <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      <span class="comment">// 设置垂直同步</span></span><br><span class="line">      vsync: <span class="keyword">this</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 初始化一个动画曲线</span></span><br><span class="line">    <span class="comment">// 接受一个parent参数，这个是指定需要实现这个curve曲线的相应的动画控制器</span></span><br><span class="line">    <span class="comment">// 接受的curve参数是具体实现了什么curve</span></span><br><span class="line">    _curvedAnimation = CurvedAnimation(parent: _animationController, curve: Curves.fastLinearToSlowEaseIn);</span><br><span class="line">    <span class="comment">// Tween用来设置动画的插值</span></span><br><span class="line">    <span class="comment">// 并且使用animate方法(参数是用来接受这个范围值的父Animation，通常为CurveAnimation)用来将范围值保存到一个Animation对象中</span></span><br><span class="line">    _colorTween = ColorTween(begin: Colors.red[<span class="number">200</span>], end: Colors.red[<span class="number">800</span>]).animate(_curvedAnimation);</span><br><span class="line">    <span class="comment">// 这里也是设置一个动画保存值，这里是double</span></span><br><span class="line">    _animation = Tween(begin: <span class="number">0.0</span>, end: <span class="number">100.0</span>).animate(_curvedAnimation)</span><br><span class="line">    <span class="comment">// 添加监听器，变化的时候重新设置UI渲染</span></span><br><span class="line">    ..addListener(()&#123;</span><br><span class="line">      setState(() &#123;&#125;);</span><br><span class="line">    <span class="comment">// 增加状态监听器，这里接受一个带status状态参数的一个方法</span></span><br><span class="line">    &#125;)..addStatusListener((status)&#123;</span><br><span class="line">      <span class="comment">// 这里实现的主要功能就是判断动画是否结束，结束就方向播放动画</span></span><br><span class="line">      <span class="keyword">if</span>(status == AnimationStatus.completed) &#123;</span><br><span class="line">        _animationController.reverse();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == AnimationStatus.dismissed) &#123;</span><br><span class="line">        _animationController.forward();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化设置动画向前开始</span></span><br><span class="line">    _animationController.forward();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">// 销毁 减少资源浪费</span></span><br><span class="line">    _animationController.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Icon(</span><br><span class="line">        Icons.favorite,</span><br><span class="line">        <span class="comment">// 将数值赋给size</span></span><br><span class="line">        size: _animation.value,</span><br><span class="line">        <span class="comment">// 将color赋值给color</span></span><br><span class="line">        color: _colorTween.value,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;动画概述&quot;&gt;&lt;a href=&quot;#动画概述&quot; class=&quot;headerlink&quot; title=&quot;动画概述&quot;&gt;&lt;/a&gt;动画概述&lt;/h2&gt;&lt;p&gt;  对于任何UI框架，实现动画的原理都是一样的，通过画面在短时间内的变化形成动画，基本上人眼对30帧以上的动画的感受就是极限
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter组件——表单组件</title>
    <link href="https://francisqiang.github.io/2019/06/19/Flutter%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/"/>
    <id>https://francisqiang.github.io/2019/06/19/Flutter组件——表单组件/</id>
    <published>2019-06-19T13:14:52.000Z</published>
    <updated>2019-06-19T13:37:19.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h2><p>  在Flutter中TextField是最重要的一个表单组件，它是定义输入框，密码框以及textarea。</p><p>  其中有几个重要的属性</p><ul><li><p>maxLines</p><p>最大行数接受一个int，当这个设置为1时，就是我们平常的文本框了，你可以把它设置成更大，然后让它变成一个textarea。</p></li><li><p>onChanged</p><p>接受一个函数，函数中传入一个当前文本框值的参数，通过这个我们可以在文本框值改变的时候设置我们的值。</p></li><li><p>decoration</p><p>设置文本框的样式，接受一个InputDecoration对象，这个对象中的属性用来设置当前文本框的样式属性，比如说hintText类似于html的placeholder，labelText设置标签的文本，labelStyle设置标签文本文字样式(跟TextStyle用法一样), border设置文本框边框，我们可以传入一个OutlineInputBorder等。</p></li><li><p>obscureText</p><p>是否设置为密码框，默认为false，设置为true的时候就是密码框。</p></li><li><p>controller</p><p>接受一个TextEditController，我们可以在组件初始化的时候创建一个关于当前文本框的TextEditController，然后我们通过addListener函数来监听当前文本框的变化，它的作用比onChanged还要大。</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TextField(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.controller,</span><br><span class="line">    <span class="keyword">this</span>.focusNode,</span><br><span class="line">    <span class="keyword">this</span>.decoration = <span class="keyword">const</span> InputDecoration(),</span><br><span class="line">    TextInputType keyboardType,</span><br><span class="line">    <span class="keyword">this</span>.textInputAction,</span><br><span class="line">    <span class="keyword">this</span>.textCapitalization = TextCapitalization.none,</span><br><span class="line">    <span class="keyword">this</span>.style,</span><br><span class="line">    <span class="keyword">this</span>.strutStyle,</span><br><span class="line">    <span class="keyword">this</span>.textAlign = TextAlign.start,</span><br><span class="line">    <span class="keyword">this</span>.textDirection,</span><br><span class="line">    <span class="keyword">this</span>.autofocus = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.obscureText = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.autocorrect = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.maxLines = <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">this</span>.minLines,</span><br><span class="line">    <span class="keyword">this</span>.expands = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.maxLength,</span><br><span class="line">    <span class="keyword">this</span>.maxLengthEnforced = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.onChanged,</span><br><span class="line">    <span class="keyword">this</span>.onEditingComplete,</span><br><span class="line">    <span class="keyword">this</span>.onSubmitted,</span><br><span class="line">    <span class="keyword">this</span>.inputFormatters,</span><br><span class="line">    <span class="keyword">this</span>.enabled,</span><br><span class="line">    <span class="keyword">this</span>.cursorWidth = <span class="number">2.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.cursorRadius,</span><br><span class="line">    <span class="keyword">this</span>.cursorColor,</span><br><span class="line">    <span class="keyword">this</span>.keyboardAppearance,</span><br><span class="line">    <span class="keyword">this</span>.scrollPadding = <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">    <span class="keyword">this</span>.dragStartBehavior = DragStartBehavior.start,</span><br><span class="line">    <span class="keyword">this</span>.enableInteractiveSelection,</span><br><span class="line">    <span class="keyword">this</span>.onTap,</span><br><span class="line">    <span class="keyword">this</span>.buildCounter,</span><br><span class="line">    <span class="keyword">this</span>.scrollPhysics,</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(textAlign != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(autofocus != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(obscureText != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(autocorrect != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(maxLengthEnforced != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(scrollPadding != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(dragStartBehavior != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(maxLines == <span class="keyword">null</span> || maxLines &gt; <span class="number">0</span>),</span><br><span class="line">       <span class="keyword">assert</span>(minLines == <span class="keyword">null</span> || minLines &gt; <span class="number">0</span>),</span><br><span class="line">       <span class="keyword">assert</span>(</span><br><span class="line">         (maxLines == <span class="keyword">null</span>) || (minLines == <span class="keyword">null</span>) || (maxLines &gt;= minLines),</span><br><span class="line">         <span class="string">'minLines can\'t be greater than maxLines'</span>,</span><br><span class="line">       ),</span><br><span class="line">       <span class="keyword">assert</span>(expands != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(</span><br><span class="line">         !expands || (maxLines == <span class="keyword">null</span> &amp;&amp; minLines == <span class="keyword">null</span>),</span><br><span class="line">         <span class="string">'minLines and maxLines must be null when expands is true.'</span>,</span><br><span class="line">       ),</span><br><span class="line">       <span class="keyword">assert</span>(maxLength == <span class="keyword">null</span> || maxLength == TextField.noMaxLength || maxLength &gt; <span class="number">0</span>),</span><br><span class="line">       keyboardType = keyboardType ?? (maxLines == <span class="number">1</span> ? TextInputType.text : TextInputType.multiline),</span><br><span class="line">       <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><h2 id="Checkbox-CheckboxListTile多选框组件"><a href="#Checkbox-CheckboxListTile多选框组件" class="headerlink" title="Checkbox,CheckboxListTile多选框组件"></a>Checkbox,CheckboxListTile多选框组件</h2><h3 id="Checkbox常见属性"><a href="#Checkbox常见属性" class="headerlink" title="Checkbox常见属性"></a>Checkbox常见属性</h3><ul><li><p>value</p><p>当前多选框的值，设置成true或者false。</p></li><li><p>onChanged</p><p>在多选框的值被改变的时候调用的函数</p></li><li><p>activeColor</p><p>选中的背景颜色</p></li><li><p>checkColor</p><p>选中的√的颜色</p></li></ul><h3 id="CheckboxListTile"><a href="#CheckboxListTile" class="headerlink" title="CheckboxListTile"></a>CheckboxListTile</h3><p>  checkboxListTile是类似于ListTile的多选框，其中也可以像ListTile中定义title，subtitle等。</p><ul><li><p>value</p><p>当前多选框的值，设置成true或者false</p></li><li><p>onChanged</p><p>改变的时候接受的函数</p></li><li><p>title， subtitle</p><p>标题</p></li><li><p>secondary</p><p>在前面设置图片或者图片</p></li><li><p>selected</p><p>选中的时候是否文字颜色跟着改变</p></li></ul><h2 id="Radio，RadioListTile"><a href="#Radio，RadioListTile" class="headerlink" title="Radio，RadioListTile"></a>Radio，RadioListTile</h2><p>  Radio和checkbox差不多，主要就是一个groupValue。</p><p>  radio中有一个value是定义当前单选按钮的value，还有一个是groupValue是定义当前单选按钮对应的组的值。其他属性和checkbox差不多，同理RadioListTile也和checkboxListTile也差不多。</p><h2 id="Demo代码示例"><a href="#Demo代码示例" class="headerlink" title="Demo代码示例"></a>Demo代码示例</h2><p><img src="/2019/06/19/Flutter组件——表单组件/1.jpg" alt="demo样式"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Form App'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      theme: ThemeData(primarySwatch: Colors.green),</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        resizeToAvoidBottomPadding: <span class="keyword">false</span>,</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'Form'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: MyForm(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyFormState createState() =&gt; _MyFormState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyFormState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyForm</span>&gt; </span>&#123;</span><br><span class="line">  TextEditingController _usernameController = TextEditingController();</span><br><span class="line">  TextEditingController _passwordController = TextEditingController();</span><br><span class="line">  TextEditingController _informationController = TextEditingController();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> _checkBool = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> _switchBool = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> _groupValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _usernameController.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_usernameController.text);</span><br><span class="line">    &#125;);</span><br><span class="line">    _passwordController.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_usernameController.text);</span><br><span class="line">    &#125;);</span><br><span class="line">    _informationController.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_usernameController.text);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        margin:</span><br><span class="line">            EdgeInsets.only(left: <span class="number">20.0</span>, right: <span class="number">20.0</span>),</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">        height: <span class="number">750.0</span>,</span><br><span class="line">        width: <span class="number">550.0</span>,</span><br><span class="line">        child: Card(</span><br><span class="line">            color: Colors.green[<span class="number">200</span>],</span><br><span class="line">            shape: RoundedRectangleBorder(</span><br><span class="line">              borderRadius: BorderRadius.circular(<span class="number">50.0</span>),</span><br><span class="line">            ),</span><br><span class="line">            child: Padding(</span><br><span class="line">              padding: EdgeInsets.only(left: <span class="number">20.0</span>, right: <span class="number">20.0</span>),</span><br><span class="line">              child: Column(</span><br><span class="line">                mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    height: <span class="number">20.0</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  Container(</span><br><span class="line">                    child: Text(<span class="string">'Login'</span>,</span><br><span class="line">                        textScaleFactor: <span class="number">2.5</span>, textAlign: TextAlign.center),</span><br><span class="line">                  ),</span><br><span class="line">                  TextField(</span><br><span class="line">                    controller: <span class="keyword">this</span>._usernameController,</span><br><span class="line">                    maxLines: <span class="number">1</span>,</span><br><span class="line">                    onChanged: (username) &#123;</span><br><span class="line">                      <span class="built_in">print</span>(username);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    decoration: InputDecoration(</span><br><span class="line">                        hintText: <span class="string">'username'</span>,</span><br><span class="line">                        labelText: <span class="string">'username'</span>,</span><br><span class="line">                        icon: Icon(Icons.person)),</span><br><span class="line">                  ),</span><br><span class="line">                  TextField(</span><br><span class="line">                    controller: <span class="keyword">this</span>._passwordController,</span><br><span class="line">                    maxLines: <span class="number">1</span>,</span><br><span class="line">                    onChanged: (password) =&gt; debugPrint(password),</span><br><span class="line">                    decoration: InputDecoration(</span><br><span class="line">                      hintText: <span class="string">'code'</span>,</span><br><span class="line">                      labelText: <span class="string">'code'</span>,</span><br><span class="line">                      icon: Icon(Icons.message),</span><br><span class="line">                    ),</span><br><span class="line">                    obscureText: <span class="keyword">true</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    height: <span class="number">30.0</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  TextField(</span><br><span class="line">                    controller: <span class="keyword">this</span>._informationController,</span><br><span class="line">                    maxLines: <span class="number">1</span>,</span><br><span class="line">                    onChanged: (content) &#123;</span><br><span class="line">                      debugPrint(content);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    decoration: InputDecoration(</span><br><span class="line">                        hintText: <span class="string">'please input your information here'</span>,</span><br><span class="line">                        border: OutlineInputBorder(</span><br><span class="line">                            borderSide: BorderSide(</span><br><span class="line">                                color: Colors.purple,</span><br><span class="line">                                width: <span class="number">1.5</span>,</span><br><span class="line">                                style: BorderStyle.solid))),</span><br><span class="line">                  ),</span><br><span class="line">                  Row(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      Text(<span class="string">'remember'</span>),</span><br><span class="line">                      Checkbox(value: <span class="keyword">this</span>._checkBool, onChanged: (value) &#123;</span><br><span class="line">                        setState(() &#123;</span><br><span class="line">                          <span class="keyword">this</span>._checkBool = value;</span><br><span class="line">                          <span class="built_in">print</span>(value);</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;, checkColor: Colors.indigo,),</span><br><span class="line">                      Text(<span class="string">'remember'</span>),</span><br><span class="line">                      Expanded(</span><br><span class="line">                        child: Switch(value: <span class="keyword">this</span>._switchBool, onChanged: (value)&#123;</span><br><span class="line">                          setState(() &#123;</span><br><span class="line">                            <span class="keyword">this</span>._switchBool = value;</span><br><span class="line">                          &#125;);</span><br><span class="line">                        &#125;,activeColor: Colors.indigo,),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                  CheckboxListTile(</span><br><span class="line">                    title: Text(<span class="string">'checktile'</span>),</span><br><span class="line">                    subtitle: Text(<span class="string">'this is CheckBoxListTile'</span>),</span><br><span class="line">                    secondary: Icon(Icons.album),</span><br><span class="line">                    value: <span class="keyword">this</span>._checkBool,</span><br><span class="line">                    onChanged: ((value)&#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        <span class="keyword">this</span>._checkBool = value;</span><br><span class="line">                      &#125;);</span><br><span class="line">                    &#125;),</span><br><span class="line">                    selected: <span class="keyword">true</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  Row(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      Text(<span class="string">'male'</span>),</span><br><span class="line">                      Radio(value: <span class="number">0</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                        setState(() &#123;</span><br><span class="line">                          <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;, activeColor: Colors.red,),</span><br><span class="line">                      Text(<span class="string">'female'</span>),</span><br><span class="line">                      Radio(value: <span class="number">1</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                        setState(() &#123;</span><br><span class="line">                          <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;)</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                  RadioListTile(value: <span class="number">0</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;, title: Text(<span class="string">'female'</span>), subtitle: Text(<span class="string">'this is female radio'</span>)),</span><br><span class="line">                  RadioListTile(value: <span class="number">1</span>, groupValue: <span class="keyword">this</span>._groupValue, onChanged: (value)&#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      <span class="keyword">this</span>._groupValue = value;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;, title: Text(<span class="string">'female'</span>), subtitle: Text(<span class="string">'this is female radio'</span>),),</span><br><span class="line">                  Container(</span><br><span class="line">                    height: <span class="number">50.0</span>,</span><br><span class="line">                    width: <span class="number">150.0</span>,</span><br><span class="line">                    child: RaisedButton(</span><br><span class="line">                      shape: RoundedRectangleBorder(</span><br><span class="line">                        borderRadius: BorderRadius.circular(<span class="number">50.0</span>),</span><br><span class="line">                      ),</span><br><span class="line">                      color: Colors.blue,</span><br><span class="line">                      onPressed: () &#123;</span><br><span class="line">                        <span class="keyword">if</span> (_usernameController.text == <span class="string">'francisqiang'</span> &amp;&amp;</span><br><span class="line">                            _passwordController.text == <span class="string">'123456'</span> &amp;&amp;</span><br><span class="line">                            _informationController.text != <span class="string">''</span>) &#123;</span><br><span class="line">                          <span class="built_in">print</span>(<span class="string">'success'</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          <span class="built_in">print</span>(<span class="string">'fail'</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      child: Text(</span><br><span class="line">                        <span class="string">'Sign In'</span>,</span><br><span class="line">                        textScaleFactor: <span class="number">2.0</span>,</span><br><span class="line">                        style: TextStyle(</span><br><span class="line">                            color: Colors.cyanAccent,</span><br><span class="line">                            fontWeight: FontWeight.bold),</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            )),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TextField&quot;&gt;&lt;a href=&quot;#TextField&quot; class=&quot;headerlink&quot; title=&quot;TextField&quot;&gt;&lt;/a&gt;TextField&lt;/h2&gt;&lt;p&gt;  在Flutter中TextField是最重要的一个表单组件，它是定义输入框，密码
      
    
    </summary>
    
      <category term="Flutter" scheme="https://francisqiang.github.io/categories/Flutter/"/>
    
    
  </entry>
  
</feed>
